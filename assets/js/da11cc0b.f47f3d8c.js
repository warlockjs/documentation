"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[6093],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(a),m=n,u=h["".concat(l,".").concat(m)]||h[m]||d[m]||i;return a?r.createElement(u,o(o({ref:t},p),{},{components:a})):r.createElement(u,o({ref:t},p))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5953:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const i={sidebar_position:4},o="Repository Caching",s={unversionedId:"warlock/repositories/caching",id:"warlock/repositories/caching",title:"Repository Caching",description:"Caching is crucial when it comes to performance. Warlock provides a simple way to cache your repositories.",source:"@site/docs/warlock/repositories/caching.mdx",sourceDirName:"warlock/repositories",slug:"/warlock/repositories/caching",permalink:"/docs/warlock/repositories/caching",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"warlock",previous:{title:"Repository Listing",permalink:"/docs/warlock/repositories/listing"},next:{title:"Repository Destroyer",permalink:"/docs/warlock/repositories/destroyer"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Usage",id:"usage",level:2},{value:"Available methods",id:"available-methods",level:2},{value:"Disable Repository Caching",id:"disable-repository-caching",level:2},{value:"Set cache driver",id:"set-cache-driver",level:2},{value:"Clear repository cache",id:"clear-repository-cache",level:2},{value:"Manually cache data",id:"manually-cache-data",level:2},{value:"Cache list",id:"cache-list",level:2},{value:"Expire time",id:"expire-time",level:3},{value:"Purging the cache",id:"purging-the-cache",level:3},{value:"Cache model",id:"cache-model",level:2}],p={toc:c},h="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(h,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"repository-caching"},"Repository Caching"),(0,n.kt)("p",null,"Caching is crucial when it comes to performance. Warlock provides a simple way to cache your repositories."),(0,n.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,n.kt)("p",null,"Make sure that you're already ",(0,n.kt)("a",{parentName:"p",href:"./../cache/introduction"},"Configured Cache")," and it is activated."),(0,n.kt)("h2",{id:"introduction"},"Introduction"),(0,n.kt)("p",null,"The concept here is simple, the repository will fetch data either from the cache or get a fresh copy from the database then cache it, the most important that ",(0,n.kt)("inlineCode",{parentName:"p"},"Warlock")," will clear the cache each time an update occurred to the attached model either by creating, updating, or deleting a model, this will give us the most recent data and make sure the data in the cache are persistent."),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,"Every method in ",(0,n.kt)("a",{parentName:"p",href:"./listing"},"Repository listing")," has a corresponding method suffixed with ",(0,n.kt)("inlineCode",{parentName:"p"},"cached"),", for example the ",(0,n.kt)("inlineCode",{parentName:"p"},"list")," cache method is ",(0,n.kt)("inlineCode",{parentName:"p"},"listCached"),", the ",(0,n.kt)("inlineCode",{parentName:"p"},"all")," method has ",(0,n.kt)("inlineCode",{parentName:"p"},"allCached"),", it's the same for the rest of the methods."),(0,n.kt)("h2",{id:"available-methods"},"Available methods"),(0,n.kt)("p",null,"Here are the available cache methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"listCached")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"allCached")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"listActiveCached")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"getCached")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"getActiveCached")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"oldestCached")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"oldestActiveCached")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"latestCached")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"latestActiveCached")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"firstCached")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"firstActiveCached")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"lastCached")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"lastActiveCached"))),(0,n.kt)("h2",{id:"disable-repository-caching"},"Disable Repository Caching"),(0,n.kt)("p",null,"To disable the cache even if it is activated in the app, set ",(0,n.kt)("inlineCode",{parentName:"p"},"isCacheable")," property to false:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/repositories/users-repository.ts"',title:'"src/app/users/repositories/users-repository.ts"'},'import {\n  FilterByOptions,\n  RepositoryManager,\n  RepositoryOptions,\n} from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport class UsersRepository extends RepositoryManager<User> {\n  /**\n   * {@inheritDoc}\n   */\n  public model = User;\n\n  /**\n   * Whether to enable or disable cache\n   */\n  public isCacheable = false;\n}\n')),(0,n.kt)("h2",{id:"set-cache-driver"},"Set cache driver"),(0,n.kt)("p",null,"By default the cache driver of the repository will be the ",(0,n.kt)("a",{parentName:"p",href:"./../cache/cache-manager"},"Cache Manager"),", however, you can set a different cache driver for the repository by setting the ",(0,n.kt)("inlineCode",{parentName:"p"},"cacheDriverName")," property to the desired cache:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/repositories/users-repository.ts"',title:'"src/app/users/repositories/users-repository.ts"'},'import {\n  FilterByOptions,\n  RepositoryManager,\n  RepositoryOptions,\n} from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport class UsersRepository extends RepositoryManager<User> {\n  /**\n   * {@inheritDoc}\n   */\n  public model = User;\n\n  /**\n   * The cache driver to use\n   */\n  public cacheDriverName = "redis";\n}\n')),(0,n.kt)("p",null,"This will change the cache driver to ",(0,n.kt)("inlineCode",{parentName:"p"},"redis")," instead of the default cache driver."),(0,n.kt)("h2",{id:"clear-repository-cache"},"Clear repository cache"),(0,n.kt)("p",null,"Each repository has its own namespace, which is ",(0,n.kt)("inlineCode",{parentName:"p"},"repositories")," followed by the model's collection name, in that sense if we want to clear the entire cache related to the repository, then call ",(0,n.kt)("inlineCode",{parentName:"p"},"clearCache")," method will do the job:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "./users/repositories/users-repository";\n\nusersRepository.clearCache();\n')),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"The cache is automatically cleared whenever a model is created, updated, or deleted.")),(0,n.kt)("h2",{id:"manually-cache-data"},"Manually cache data"),(0,n.kt)("p",null,"This could be useful if you're going to implement a custom list method and you want to cache the data, for example, let's fetch and cache all male users:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/repositories/users-repository.ts"',title:'"src/app/users/repositories/users-repository.ts"'},'import {\n  FilterByOptions,\n  RepositoryManager,\n  RepositoryOptions,\n} from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport class UsersRepository extends RepositoryManager<User> {\n  /**\n   * {@inheritDoc}\n   */\n  public model = User;\n\n  /**\n   * List all male users\n   */\n  public async allMale(options: RepositoryOptions) {\n    // generate cache key for the list method\n    const cacheKey = this.cacheKey("male", options);\n\n    // check if the data is already cached\n    const users = await this.cacheDriver.get(cacheKey);\n\n    if (users) {\n      // if so then return the cached data but map it into list of models first\n      return this.mapModels(users);\n    }\n\n    // if we reached here then the data is not cached yet, so we need to fetch it from database first\n    const maleUsers = await this.allActive({\n      gender: "male",\n    });\n\n    // cache the data\n    // please note that models can not be serialized, thus we need to store only the document data itself\n    // we don\'t need to await the cache driver to finish caching the data so we will not add the await keyword\n    this.cacheDriver.set(\n      cacheKey,\n      maleUsers.map((user) => user.data)\n    );\n\n    // return the list of models\n    return maleUsers;\n  }\n}\n')),(0,n.kt)("p",null,"Let's break down the code above:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"First we generate a cache key for the list method, it's important to use ",(0,n.kt)("inlineCode",{parentName:"li"},"cacheKey")," method to link the cache to the repository (needed for recaching or clearing the cache) the ",(0,n.kt)("inlineCode",{parentName:"li"},"cacheKey")," method takes a cache key, and optionally list of options that will serialized to be appended to the cache key."),(0,n.kt)("li",{parentName:"ul"},"Then we check if the data is already cached, if so then we return the cached data but first we need to map it into list of models."),(0,n.kt)("li",{parentName:"ul"},"If the data is not cached yet, then we fetch it from the database."),(0,n.kt)("li",{parentName:"ul"},"Then we cache the data, please note that models can not be serialized, thus we need to store only the document data itself."),(0,n.kt)("li",{parentName:"ul"},"Finally we return the list of models.")),(0,n.kt)("p",null,"We can also use the ",(0,n.kt)("inlineCode",{parentName:"p"},"cacheAll")," method, that will do all the dirty job for us:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/repositories/users-repository.ts"',title:'"src/app/users/repositories/users-repository.ts"'},'import {\n  FilterByOptions,\n  RepositoryManager,\n  RepositoryOptions,\n} from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport class UsersRepository extends RepositoryManager<User> {\n  /**\n   * {@inheritDoc}\n   */\n  public model = User;\n\n  /**\n   * List all male users\n   */\n  public allMale(options: RepositoryOptions) {\n    return this.cacheAll({\n      ...options,\n      gender: "male",\n    });\n  }\n}\n')),(0,n.kt)("h2",{id:"cache-list"},"Cache list"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"cacheAll")," method will cache the list of models based on the given options without pagination, it will return direct documents list, if you want to cache the list with pagination, then use ",(0,n.kt)("inlineCode",{parentName:"p"},"cacheList")," method:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/repositories/users-repository.ts"',title:'"src/app/users/repositories/users-repository.ts"'},'import {\n  FilterByOptions,\n  RepositoryManager,\n  RepositoryOptions,\n} from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport class UsersRepository extends RepositoryManager<User> {\n  /**\n   * {@inheritDoc}\n   */\n  public model = User;\n\n  /**\n   * List all male users\n   */\n  public allMale(options: RepositoryOptions) {\n    return this.cacheList({\n      ...options,\n      gender: "male",\n    });\n  }\n}\n')),(0,n.kt)("p",null,"This will return an object contains ",(0,n.kt)("inlineCode",{parentName:"p"},"documents")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"paginationInfo")," properties, the ",(0,n.kt)("inlineCode",{parentName:"p"},"documents")," property contains the list of documents, and the ",(0,n.kt)("inlineCode",{parentName:"p"},"paginationInfo")," contains the pagination information."),(0,n.kt)("h3",{id:"expire-time"},"Expire time"),(0,n.kt)("p",null,"In either ",(0,n.kt)("inlineCode",{parentName:"p"},"cacheAll")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"cacheList")," we can set the amount of time to expire after (AKA TTL), in this case, we pass to the object ",(0,n.kt)("inlineCode",{parentName:"p"},"expiresAfter")," key:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/repositories/users-repository.ts"',title:'"src/app/users/repositories/users-repository.ts"'},'import {\n  FilterByOptions,\n  RepositoryManager,\n  RepositoryOptions,\n} from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport class UsersRepository extends RepositoryManager<User> {\n  /**\n   * {@inheritDoc}\n   */\n  public model = User;\n\n  /**\n   * List all male users\n   */\n  public allMale(options: RepositoryOptions) {\n    return this.cacheList({\n      ...options,\n      gender: "male",\n      expiresAfter: 60 * 60 * 24, // 24 hours\n    });\n  }\n}\n')),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Please note that the ",(0,n.kt)("inlineCode",{parentName:"p"},"expiresAfter")," value is in seconds.")),(0,n.kt)("h3",{id:"purging-the-cache"},"Purging the cache"),(0,n.kt)("p",null,"Purging the cache with fetching means if the list is cached then it will be returned from the cache and it will be deleted after fetching, also if it is set to true, then the method will not cache the list if it wast not in the cache."),(0,n.kt)("h2",{id:"cache-model"},"Cache model"),(0,n.kt)("p",null,"To cache a single model, use ",(0,n.kt)("inlineCode",{parentName:"p"},"cacheModel"),", it takes an instance of a model and cache it's data."))}d.isMDXComponent=!0}}]);