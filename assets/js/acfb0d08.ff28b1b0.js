"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9111],{2607:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=s(4848),t=s(8453);const l={sidebar_position:9},d="Restful API",i={id:"warlock/http/restful",title:"Restful API",description:"Warlock embraces the RESTful API design, and provides a set of tools to help you build RESTful APIs.",source:"@site/docs/warlock/http/restful.mdx",sourceDirName:"warlock/http",slug:"/warlock/http/restful",permalink:"/docs/warlock/http/restful",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"warlock",previous:{title:"Output",permalink:"/docs/warlock/http/output"},next:{title:"Repositories",permalink:"/docs/category/repositories"}},o={},c=[{value:"Restful class",id:"restful-class",level:2},{value:"Declaring a Restful controller",id:"declaring-a-restful-controller",level:2},{value:"Restful methods",id:"restful-methods",level:2},{value:"Defining restful routes",id:"defining-restful-routes",level:2},{value:"List Method",id:"list-method",level:2},{value:"Change default records key",id:"change-default-records-key",level:3},{value:"List middleware",id:"list-middleware",level:3},{value:"Get Method",id:"get-method",level:2},{value:"Get middleware",id:"get-middleware",level:3},{value:"Get response key",id:"get-response-key",level:3},{value:"Create Method",id:"create-method",level:2},{value:"Create Validation",id:"create-validation",level:3},{value:"Create Events",id:"create-events",level:3},{value:"Return Type",id:"return-type",level:3},{value:"Update Method",id:"update-method",level:2},{value:"Update Validation",id:"update-validation",level:3},{value:"Update Events",id:"update-events",level:3},{value:"Return Type",id:"return-type-1",level:3},{value:"Patch Method",id:"patch-method",level:2},{value:"Patch Validation",id:"patch-validation",level:3},{value:"Patch Events",id:"patch-events",level:3},{value:"Return Type",id:"return-type-2",level:3},{value:"Validate All",id:"validate-all",level:2},{value:"Delete single record",id:"delete-single-record",level:2},{value:"Bulk Delete",id:"bulk-delete",level:2},{value:"Replacing resource methods",id:"replacing-resource-methods",level:2}];function a(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"restful-api",children:"Restful API"}),"\n",(0,n.jsx)(r.p,{children:"Warlock embraces the RESTful API design, and provides a set of tools to help you build RESTful APIs."}),"\n",(0,n.jsxs)(r.p,{children:["One of them is the ",(0,n.jsx)(r.code,{children:"Restful"})," class."]}),"\n",(0,n.jsx)(r.h2,{id:"restful-class",children:"Restful class"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"Restful"})," class is a base class for RESTful API controllers. It provides a set of methods to help you build RESTful APIs."]}),"\n",(0,n.jsx)(r.h2,{id:"declaring-a-restful-controller",children:"Declaring a Restful controller"}),"\n",(0,n.jsxs)(r.p,{children:["You can use ",(0,n.jsx)(r.a,{href:"https://marketplace.visualstudio.com/items?itemName=hassanzohdy.gnz",children:"Generator Z"})," to generate a Restful controller by right click on the ",(0,n.jsx)(r.code,{children:"controllers"})," directory then ",(0,n.jsx)(r.code,{children:"Generate Warlock Module"})," then ",(0,n.jsx)(r.code,{children:"Generate Warlock Restful Request"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Or you can create it manually, which we will do now."}),"\n",(0,n.jsxs)(r.p,{children:["First off, restful controllers heavily depends on ",(0,n.jsx)(r.a,{href:"./../repositories/introduction",children:"Repositories"}),", so get to know it before continuing this section."]}),"\n",(0,n.jsxs)(r.p,{children:["Now let's create our ",(0,n.jsx)(r.code,{children:"restfulUsers"})," controller"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:'import { Restful } from \'@warlock.js/core\';\r\nimport { User } from "app/users/models/user":\r\nimport userRepository from "app/users/repositories/users-repository";\r\n\r\nclass RestfulUsers<User> extends Restful {\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected repository = usersRepository;\r\n}\r\n\r\nconst restfulUsers = new RestfulUsers();\r\n\r\nexport default restfulUsers;\n'})}),"\n",(0,n.jsx)(r.p,{children:"Let's break down this code:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["We imported the ",(0,n.jsx)(r.code,{children:"Restful"})," class from ",(0,n.jsx)(r.code,{children:"@warlock.js/core"})," package."]}),"\n",(0,n.jsxs)(r.li,{children:["We imported the ",(0,n.jsx)(r.code,{children:"User"})," model from ",(0,n.jsx)(r.code,{children:"app/users/models/user"}),", which will be used for typescript type checking."]}),"\n",(0,n.jsxs)(r.li,{children:["We imported the ",(0,n.jsx)(r.code,{children:"usersRepository"})," from ",(0,n.jsx)(r.code,{children:"app/users/repositories/users-repository"}),", which will be used to operate on the database."]}),"\n",(0,n.jsxs)(r.li,{children:["We extended the ",(0,n.jsx)(r.code,{children:"Restful"})," class, and set the ",(0,n.jsx)(r.code,{children:"repository"})," property to ",(0,n.jsx)(r.code,{children:"usersRepository"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:["We created an instance of the ",(0,n.jsx)(r.code,{children:"RestfulUsers"})," class."]}),"\n",(0,n.jsxs)(r.li,{children:["We exported the ",(0,n.jsx)(r.code,{children:"restfulUsers"})," instance."]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Now our controller is ready to use."}),"\n",(0,n.jsx)(r.h2,{id:"restful-methods",children:"Restful methods"}),"\n",(0,n.jsx)(r.p,{children:"By default a Restful controller has the following methods:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"list"}),": To list records."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"create"}),": To create a new record."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"update"}),": To update an existing record."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"delete"}),": To delete an existing record."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"bulkDelete"}),": To delete multiple records."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"patch"}),": To update an existing record partially."]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Now let's see how to define our restful and its corresponding methods."}),"\n",(0,n.jsx)(r.h2,{id:"defining-restful-routes",children:"Defining restful routes"}),"\n",(0,n.jsxs)(r.p,{children:["Warlock's router system has a builtin ",(0,n.jsx)(r.code,{children:"restfulResource"})," method that accepts the base path of the resource, and the controller instance."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/routes.ts"',children:'import { router } from "@warlock.js/core";\r\nimport restfulUsers from "app/users/controllers/restful-users";\r\n\r\nrouter.restfulResource("users", restfulUsers);\n'})}),"\n",(0,n.jsx)(r.p,{children:"This will create routes for the previous methods as follows:"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Request Method"}),(0,n.jsx)(r.th,{children:"Path"}),(0,n.jsx)(r.th,{children:"Restful Method"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"GET"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"/users"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"restful.list"})}),(0,n.jsx)(r.td,{children:"List users"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"POST"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"/users"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"restful.create"})}),(0,n.jsx)(r.td,{children:"Create a new user"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"GET"}),(0,n.jsx)(r.td,{children:(0,n.jsxs)(r.strong,{children:["/users/",":id"]})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"restful.get"})}),(0,n.jsx)(r.td,{children:"Get a user"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"PUT"}),(0,n.jsx)(r.td,{children:(0,n.jsxs)(r.strong,{children:["/users/",":id"]})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"restful.update"})}),(0,n.jsx)(r.td,{children:"Update a user"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"PATCH"}),(0,n.jsx)(r.td,{children:(0,n.jsxs)(r.strong,{children:["/users/",":id"]})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"restful.patch"})}),(0,n.jsx)(r.td,{children:"Partially update a user"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"DELETE"}),(0,n.jsx)(r.td,{children:(0,n.jsxs)(r.strong,{children:["/users/",":id"]})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"restful.delete"})}),(0,n.jsx)(r.td,{children:"Delete a user"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"DELETE"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"/users"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"restful.bulkDelete"})}),(0,n.jsx)(r.td,{children:"Delete multiple users"})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"list-method",children:"List Method"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"list"})," method is used to list records, it sends all request inputs to the repository's ",(0,n.jsx)(r.code,{children:"list"})," method."]}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:["If ",(0,n.jsx)(r.a,{href:"./../cache/introduction",children:"Cache"})," is enabled then ",(0,n.jsx)(r.code,{children:"repository.listCached"})," method will be used instead of ",(0,n.jsx)(r.code,{children:"repository.list"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["By default when calling ",(0,n.jsx)(r.code,{children:"/users"})," the response will be returned with pagination (Because list method has default pagination option to ",(0,n.jsx)(r.strong,{children:"true"}),") so there will be two keys that will be sent to the response:"]}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:["The sent inputs from the request to the repository list methods will be used against ",(0,n.jsx)(r.a,{href:"./request#get-heavy-inputs",children:"Request Heavy method"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"records"}),": list of records that are fetched from the database."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.a,{href:"./../../cascade/aggregate/fetching#pagination",children:"paginationInfo"}),": The pagination info that is returned from the repository."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["Records that are sent are instance of the repository's model, so in our case users, it will be list of ",(0,n.jsx)(r.code,{children:"User"})," models."]}),"\n",(0,n.jsx)(r.h3,{id:"change-default-records-key",children:"Change default records key"}),"\n",(0,n.jsxs)(r.p,{children:["To send another key instead of ",(0,n.jsx)(r.code,{children:"records"}),", define ",(0,n.jsx)(r.code,{children:"recordsListName"})," property in the controller."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:"import { Restful } from '@warlock.js/core';\r\nimport { User } from \"app/users/models/user\":\r\nimport userRepository from \"app/users/repositories/users-repository\";\r\n\r\nclass RestfulUsers<User> extends Restful {\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected repository = usersRepository;\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected recordsListName = 'users';\r\n}\r\n\r\nconst restfulUsers = new RestfulUsers();\r\n\r\nexport default restfulUsers;\n"})}),"\n",(0,n.jsxs)(r.p,{children:["This will return an object contains ",(0,n.jsx)(r.code,{children:"users"})," and ",(0,n.jsx)(r.code,{children:"paginationInfo"})," keys."]}),"\n",(0,n.jsx)(r.h3,{id:"list-middleware",children:"List middleware"}),"\n",(0,n.jsxs)(r.p,{children:["To define a middleware to be executed before calling the ",(0,n.jsx)(r.code,{children:"restful.list"})," method, define ",(0,n.jsx)(r.code,{children:"middleware"})," property in the restful users controller."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:"\r\nimport {Request, Response, Restful } from '@warlock.js/core';\r\nimport { User } from \"app/users/models/user\":\r\nimport userRepository from \"app/users/repositories/users-repository\";\r\n\r\nclass RestfulUsers<User> extends Restful {\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected repository = usersRepository;\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected recordsListName = 'users';\r\n  /**\r\n   * Middleware\r\n   */\r\n  protected middleware = {\r\n    list: [\r\n      // middleware\r\n      this.isSuperAdmin.bind(this),\r\n    ],\r\n  };\r\n\r\n  protected isSuperAdmin(request: Request, response: Response) {\r\n    // check if the user is super admin\r\n    if (request.user.isSuperAdmin === false) {\r\n      return response.forbidden();\r\n    }\r\n  }\r\n}\r\n\r\nconst restfulUsers = new RestfulUsers();\r\n\r\nexport default restfulUsers;\n"})}),"\n",(0,n.jsxs)(r.p,{children:["This way we can interrupt the request and return a response before calling the ",(0,n.jsx)(r.code,{children:"restful.list"})," method."]}),"\n",(0,n.jsx)(r.h2,{id:"get-method",children:"Get Method"}),"\n",(0,n.jsxs)(r.p,{children:["To fetch a single user, a GET request to ",(0,n.jsx)(r.code,{children:"/users/:id"})," is sent, and the ",(0,n.jsx)(r.code,{children:"restful.get"})," method is called."]}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"restful.get"})," method sends the ",(0,n.jsx)(r.code,{children:"id"})," to the repository's ",(0,n.jsx)(r.code,{children:"find"})," method."]}),"\n",(0,n.jsxs)(r.p,{children:["If the record is not found, a ",(0,n.jsx)(r.code,{children:"404"})," response is returned."]}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:["If ",(0,n.jsx)(r.a,{href:"./../cache/introduction",children:"Cache"})," is enabled then ",(0,n.jsx)(r.code,{children:"repository.findCached"})," method will be used instead of ",(0,n.jsx)(r.code,{children:"repository.find"}),"."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"get-middleware",children:"Get middleware"}),"\n",(0,n.jsxs)(r.p,{children:["Same as the ",(0,n.jsx)(r.code,{children:"list"})," method, you can define a middleware to be executed before calling the ",(0,n.jsx)(r.code,{children:"restful.get"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:"//...\r\nclass RestfulUsers<User> extends Restful {\r\n  //...\r\n  /**\r\n   * Middleware\r\n   */\r\n  protected middleware = {\r\n    get: [\r\n      // middleware\r\n      this.isSuperAdmin.bind(this),\r\n    ],\r\n  };\r\n  //...\r\n}\r\n//...\n"})}),"\n",(0,n.jsx)(r.h3,{id:"get-response-key",children:"Get response key"}),"\n",(0,n.jsxs)(r.p,{children:["If the record is found, it will be returned in ",(0,n.jsx)(r.code,{children:"record"})," key, to change the response key define ",(0,n.jsx)(r.code,{children:"recordName"})," property in the controller."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:'//...\r\nclass RestfulUsers<User> extends Restful {\r\n  //...\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected recordName = "user";\r\n  //...\r\n}\r\n//...\n'})}),"\n",(0,n.jsxs)(r.p,{children:["This will return an object contains ",(0,n.jsx)(r.code,{children:"user"})," key."]}),"\n",(0,n.jsx)(r.h2,{id:"create-method",children:"Create Method"}),"\n",(0,n.jsxs)(r.p,{children:["To create a new user, a POST request to ",(0,n.jsx)(r.code,{children:"/users"})," is sent, and the ",(0,n.jsx)(r.code,{children:"restful.create"})," method is called."]}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"restful.create"})," method sends all request inputs to the repository's ",(0,n.jsx)(r.code,{children:"create"})," method."]}),"\n",(0,n.jsxs)(r.p,{children:["If the record is created successfully, a ",(0,n.jsx)(r.code,{children:"201"})," response is returned with the created record."]}),"\n",(0,n.jsx)(r.h3,{id:"create-validation",children:"Create Validation"}),"\n",(0,n.jsxs)(r.p,{children:["So the validation here is a little different than normal function handler, but to the better, in our restful class, there will be ",(0,n.jsx)(r.code,{children:"validation"})," property defined automatically (if generated using the generator), and it will look like:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:'//...\r\nimport { RouteResource } from "@warlock.js/core";\r\n\r\nclass RestfulUsers<User> extends Restful {\r\n  //...\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  public validation: RouteResource["validation"] = {\r\n    create: {\r\n      rules: {\r\n        firstName: ["required", "min:2"],\r\n        lastName: ["required", "min:2"],\r\n      },\r\n    },\r\n  };\r\n  //...\r\n}\r\n//...\n'})}),"\n",(0,n.jsxs)(r.p,{children:["This is way we defined a validation for the ",(0,n.jsx)(r.code,{children:"create"})," method, and it will be executed before calling the ",(0,n.jsx)(r.code,{children:"restful.create"})," method."]}),"\n",(0,n.jsxs)(r.p,{children:["We can use another rules like ",(0,n.jsx)(r.code,{children:"UniqueRule"})," as follows:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:'//...\r\nimport { UniqueRule, RouteResource } from "@warlock.js/core";\r\n\r\nclass RestfulUsers<User> extends Restful {\r\n  //...\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  public validation: RouteResource["validation"] = {\r\n    create: {\r\n      rules: {\r\n        firstName: ["required", "min:2"],\r\n        lastName: ["required", "min:2"],\r\n        email: ["required", "email", new UniqueRule(User)],\r\n      },\r\n    },\r\n  };\r\n  //...\r\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Of course we can define a custom validation method by passing to the ",(0,n.jsx)(r.code,{children:"middleware.create"})," object a ",(0,n.jsx)(r.code,{children:"validate"})," callback."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:'//...\r\nimport { RouteResource } from "@warlock.js/core";\r\n\r\nclass RestfulUsers<User> extends Restful {\r\n  //...\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  public validation: RouteResource["validation"] = {\r\n    create: {\r\n      validate: this.validate.bind(this),\r\n    },\r\n  };\r\n\r\n  protected validate(request: Request, response: Response) {\r\n    // validate the request\r\n  }\r\n  //...\r\n}\n'})}),"\n",(0,n.jsx)(r.h3,{id:"create-events",children:"Create Events"}),"\n",(0,n.jsx)(r.p,{children:"Restful class by default triggers multiple events, and they are as follows:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"beforeCreate(request: Request)"}),": Triggered before creating the record."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"beforeSave(request: Request)"}),": Triggered before creating or update the record."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"onCreate(request: Request, record: Model)"}),": Triggered after creating the record."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"onSave(request: Request, record: Model)"}),": Triggered after creating or updating the record."]}),"\n"]}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:["Please note that any ",(0,n.jsx)(r.code,{children:"xSave"})," event is triggered in three case: create, update, and patch."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["An example of usage for ",(0,n.jsx)(r.code,{children:"onSave"})," event will be as follows:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:'//...\r\n\r\nclass RestfulUsers<User> extends Restful {\r\n  //...\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  public validation: RouteResource["validation"] = {\r\n    create: {\r\n      rules: {\r\n        firstName: ["required", "min:2"],\r\n        lastName: ["required", "min:2"],\r\n      },\r\n    },\r\n  };\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  public onSave(request: Request, record: Model) {\r\n    // update the current user if it is the same user that was updated\r\n    if (request.user.id === record.id) {\r\n      request.user = record;\r\n    }\r\n  }\r\n  //...\r\n}\n'})}),"\n",(0,n.jsx)(r.h3,{id:"return-type",children:"Return Type"}),"\n",(0,n.jsx)(r.p,{children:"When creating a new record, you can return two types of responses:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"Single Record"}),": The newly created record, ",(0,n.jsx)(r.strong,{children:"this is the default behavior"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"List"}),": which calls the ",(0,n.jsx)(r.code,{children:"list"})," method and returns the list of records."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["To change the default behavior, define a ",(0,n.jsx)(r.code,{children:"returnOn"})," property with ",(0,n.jsx)(r.code,{children:"create"})," key in the controller."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:'//...\r\nclass RestfulUsers<User> extends Restful {\r\n  //...\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected returnOn = {\r\n    create: "record", // record | records\r\n  };\r\n  //...\r\n}\n'})}),"\n",(0,n.jsx)(r.h2,{id:"update-method",children:"Update Method"}),"\n",(0,n.jsxs)(r.p,{children:["Pretty much the same as the ",(0,n.jsx)(r.code,{children:"create"})," method, but it calls the ",(0,n.jsx)(r.code,{children:"restful.update"})," method."]}),"\n",(0,n.jsx)(r.h3,{id:"update-validation",children:"Update Validation"}),"\n",(0,n.jsxs)(r.p,{children:["Instead of defining a validation for the ",(0,n.jsx)(r.code,{children:"create"})," method, we define it for the ",(0,n.jsx)(r.code,{children:"update"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:'//...\r\n\r\nclass RestfulUsers<User> extends Restful {\r\n  //...\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  public validation: RouteResource["validation"] = {\r\n    update: {\r\n      rules: {\r\n        firstName: ["required", "min:2"],\r\n        lastName: ["required", "min:2"],\r\n      },\r\n    },\r\n  };\r\n  //...\r\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["We can also use the ",(0,n.jsx)(r.code,{children:"UniqueRule"})," as well:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:'//...\r\nimport { UniqueRule, RouteResource } from "@warlock.js/core";\r\n\r\nclass RestfulUsers<User> extends Restful {\r\n  //...\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  public validation: RouteResource["validation"] = {\r\n    update: {\r\n      rules: {\r\n        firstName: ["required", "min:2"],\r\n        lastName: ["required", "min:2"],\r\n        email: ["required", "email", new UniqueRule(User).exceptCurrentUser()],\r\n      },\r\n    },\r\n  };\r\n  //...\r\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Using ",(0,n.jsx)(r.code,{children:"exceptCurrentUser"})," will validate the rule against all records except the current record."]}),"\n",(0,n.jsx)(r.h3,{id:"update-events",children:"Update Events"}),"\n",(0,n.jsxs)(r.p,{children:["Same as the ",(0,n.jsx)(r.code,{children:"create"})," method, but with different names:"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"beforeUpdate(request: Request, model: Model)"}),": Triggered before updating the record."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"beforeSave(request: Request, model: Model)"}),": Triggered before creating or update the record."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"onUpdate(request: Request, model: Model, oldModel: Model)"}),": Triggered after updating the record."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"onSave(request: Request, model: Model, oldModel: Model)"}),": Triggered after creating or updating the record."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["When updating model, the old data of the model will be sent to events ",(0,n.jsx)(r.code,{children:"onUpdate"})," and ",(0,n.jsx)(r.code,{children:"onSave"})," methods."]}),"\n",(0,n.jsx)(r.h3,{id:"return-type-1",children:"Return Type"}),"\n",(0,n.jsx)(r.p,{children:"When updating an existing record, you can return two types of responses:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"Single Record"}),": The updated record, ",(0,n.jsx)(r.strong,{children:"this is the default behavior"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"List"}),": which calls the ",(0,n.jsx)(r.code,{children:"list"})," method and returns the list of records."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["To change the default behavior, define a ",(0,n.jsx)(r.code,{children:"returnOn"})," property with ",(0,n.jsx)(r.code,{children:"update"})," key in the controller."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:'//...\r\nclass RestfulUsers<User> extends Restful {\r\n  //...\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected returnOn = {\r\n    update: "record", // record | records\r\n  };\r\n  //...\r\n}\n'})}),"\n",(0,n.jsx)(r.h2,{id:"patch-method",children:"Patch Method"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"patch"})," method is used to update a record partially, it calls the ",(0,n.jsx)(r.code,{children:"restful.patch"})," method."]}),"\n",(0,n.jsx)(r.h3,{id:"patch-validation",children:"Patch Validation"}),"\n",(0,n.jsxs)(r.p,{children:["Same as the ",(0,n.jsx)(r.code,{children:"create"})," and ",(0,n.jsx)(r.code,{children:"update"})," methods, but with different name:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:'//...\r\n\r\nclass RestfulUsers<User> extends Restful {\r\n  //...\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  public validation: RouteResource["validation"] = {\r\n    patch: {\r\n      rules: {\r\n        firstName: ["required", "min:2"],\r\n        lastName: ["required", "min:2"],\r\n      },\r\n    },\r\n  };\r\n  //...\r\n}\n'})}),"\n",(0,n.jsx)(r.h3,{id:"patch-events",children:"Patch Events"}),"\n",(0,n.jsxs)(r.p,{children:["Same as the ",(0,n.jsx)(r.code,{children:"create"})," and ",(0,n.jsx)(r.code,{children:"update"})," methods, but with different name:"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"beforePatch(request: Request, model: Model)"}),": Triggered before patching the record."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"beforeSave(request: Request, model: Model)"}),": Triggered before creating or update the record."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"onPatch(request: Request, model: Model, oldModel: Model)"}),": Triggered after patching the record."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"onSave(request: Request, model: Model, oldModel: Model)"}),": Triggered after creating or patching the record."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["When patching model, the old data of the model will be sent to events ",(0,n.jsx)(r.code,{children:"onPatch"})," and ",(0,n.jsx)(r.code,{children:"onSave"})," methods."]}),"\n",(0,n.jsx)(r.h3,{id:"return-type-2",children:"Return Type"}),"\n",(0,n.jsx)(r.p,{children:"When patching an existing record, you can return two types of responses:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"Single Record"}),": The patched record, ",(0,n.jsx)(r.strong,{children:"this is the default behavior"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"List"}),": which calls the ",(0,n.jsx)(r.code,{children:"list"})," method and returns the list of records."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["To change the default behavior, define a ",(0,n.jsx)(r.code,{children:"returnOn"})," property with ",(0,n.jsx)(r.code,{children:"patch"})," key in the controller."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:'//...\r\n\r\nclass RestfulUsers<User> extends Restful {\r\n  //...\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected returnOn = {\r\n    patch: "record", // record | records\r\n  };\r\n  //...\r\n}\n'})}),"\n",(0,n.jsx)(r.h2,{id:"validate-all",children:"Validate All"}),"\n",(0,n.jsxs)(r.p,{children:["If you noticed in our previous create and update examples, the rules are pretty much the same, to avoid this, we can define a ",(0,n.jsx)(r.code,{children:"validation.all"})," property in the controller."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/controllers/restful-users.ts"',children:'//...\r\n\r\nclass RestfulUsers<User> extends Restful {\r\n  //...\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  public validation: RouteResource["validation"] = {\r\n    all: {\r\n      rules: {\r\n        firstName: ["required", "min:2"],\r\n        lastName: ["required", "min:2"],\r\n      },\r\n    },\r\n  };\r\n  //...\r\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["This validation will be applied on the three methods: ",(0,n.jsx)(r.code,{children:"create"}),", ",(0,n.jsx)(r.code,{children:"update"}),", and ",(0,n.jsx)(r.code,{children:"patch"}),"."]}),"\n",(0,n.jsx)(r.h2,{id:"delete-single-record",children:"Delete single record"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"delete"})," method will be called when a request to ",(0,n.jsx)(r.code,{children:"/users/:id"})," is sent with ",(0,n.jsx)(r.code,{children:"DELETE"})," method."]}),"\n",(0,n.jsxs)(r.p,{children:["If the record does not exist, a ",(0,n.jsx)(r.code,{children:"404"})," response is returned."]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"beforeDelete(model: Model)"})," event is triggered before deleting the record."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"onDelete(model: Model)"})," event is triggered after deleting the record."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["The return type will be either to return all records from the ",(0,n.jsx)(r.code,{children:"restful.list"})," method or just return success response."]}),"\n",(0,n.jsx)(r.h2,{id:"bulk-delete",children:"Bulk Delete"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"bulkDelete"})," method will be called when a request to ",(0,n.jsx)(r.code,{children:"/users"})," is sent with ",(0,n.jsx)(r.code,{children:"DELETE"})," method."]}),"\n",(0,n.jsx)(r.p,{children:"It's very beneficial when you want to delete multiple records at once, this will reduce the round trips to the server."}),"\n",(0,n.jsxs)(r.p,{children:["Simple send a ",(0,n.jsx)(r.code,{children:"/users"})," with ",(0,n.jsx)(r.code,{children:"DELETE"})," method with the following body:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-json",children:'{\r\n  "id": [1, 2, 3]\r\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["This will delete all records with ids ",(0,n.jsx)(r.code,{children:"1"}),", ",(0,n.jsx)(r.code,{children:"2"}),", and ",(0,n.jsx)(r.code,{children:"3"}),"."]}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:["Same events and return type as the ",(0,n.jsx)(r.code,{children:"delete"})," method, the events will be applied on every single record that will be deleted."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["If the return type is not ",(0,n.jsx)(r.code,{children:"records"})," then total deleted models will be returned in response key ",(0,n.jsx)(r.code,{children:"deleted"}),"."]}),"\n",(0,n.jsx)(r.h2,{id:"replacing-resource-methods",children:"Replacing resource methods"}),"\n",(0,n.jsxs)(r.p,{children:["In some situation we want to use the same restful object, but we need to use another method for certain request, for example we can use the same restful class for users and customers which they are both the same collection, except that in the ",(0,n.jsx)(r.code,{children:"customers"})," request we want to add ",(0,n.jsx)(r.code,{children:"isCustomer"})," with value ",(0,n.jsx)(r.code,{children:"true"})," to the request inputs."]}),"\n",(0,n.jsxs)(r.p,{children:["To do so we can use the ",(0,n.jsx)(r.code,{children:"replace"})," object when defining the route resource to update the ",(0,n.jsx)(r.code,{children:"list"})," method"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="app/users/routes.ts"',children:'import { router } from "@warlock.js/core";\r\nimport restfulUsers from "app/users/controllers/restful-users";\r\nimport ListCustomers from "app/users/controllers/list-customers";\r\n\r\nrouter.restfulResource("users", restfulUsers, {\r\n  replace: {\r\n    list: ListCustomers,\r\n  },\r\n});\n'})})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>d,x:()=>i});var n=s(6540);const t={},l=n.createContext(t);function d(e){const r=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),n.createElement(l.Provider,{value:r},e.children)}}}]);