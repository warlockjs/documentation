"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[5601],{3745:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(4848),i=t(5680);const o={sidebar_position:2,title:"Query Events"},d=void 0,s={id:"cascade/events/query-events",title:"Query Events",description:"Introduction",source:"@site/docs/cascade/events/query-events.mdx",sourceDirName:"cascade/events",slug:"/cascade/events/query-events",permalink:"/docs/cascade/events/query-events",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Query Events"},sidebar:"mongodb",previous:{title:"Introduction",permalink:"/docs/cascade/events/introduction"},next:{title:"Model Events",permalink:"/docs/cascade/events/model-events"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"On Creating Event",id:"on-creating-event",level:2},{value:"On Created Event",id:"on-created-event",level:2},{value:"On Updating Event",id:"on-updating-event",level:2},{value:"On Updated Event",id:"on-updated-event",level:2},{value:"On Deleting Event",id:"on-deleting-event",level:2},{value:"On Deleted Event",id:"on-deleted-event",level:2},{value:"On Fetching Event",id:"on-fetching-event",level:2},{value:"On Fetched Event",id:"on-fetched-event",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.RP)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["The query builder serves as the most internal layer for other operations such as ",(0,r.jsx)(n.strong,{children:"Models"})," and ",(0,r.jsx)(n.strong,{children:"Aggregate"}),". Let's explore the events associated with the query builder."]}),"\n",(0,r.jsx)(n.h2,{id:"on-creating-event",children:"On Creating Event"}),"\n",(0,r.jsx)(n.p,{children:"This event is triggered before creating a new document or documents."}),"\n",(0,r.jsx)(n.p,{children:"Method Signature:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"public onCreating(callback: (payload: CreatingEventPayload) => void): this;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"src=app.ts",children:'import { query } from "@warlock.js/cascade";\r\n\r\nfunction main() {\r\n  query.onCreating(({ collection, query, data, isMany }) => {\r\n    // do something\r\n  });\r\n\r\n  // will trigger the `onCreating` event when creating a new document\r\n  query.create("users", { name: "John Doe" });\r\n\r\n  // will trigger the `onCreating` event when creating many documents\r\n  query.createMany("users", [{ name: "John Doe" }, { name: "Jane Doe" }]);\r\n}\r\n\r\nmain();\n'})}),"\n",(0,r.jsx)(n.p,{children:"The payload contains the following properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"collection"}),": The collection name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"query"}),": The ",(0,r.jsx)(n.a,{href:"https://mongodb.github.io/node-mongodb-native/Next/classes/Collection.html",children:"Collection Query"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"data"}),": The data to be inserted."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isMany"}),": A boolean value that indicates if the operation is for many documents or not."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["That event is triggered when calling ",(0,r.jsx)(n.code,{children:"create"})," or ",(0,r.jsx)(n.code,{children:"createMany"})," methods."]}),"\n",(0,r.jsx)(n.h2,{id:"on-created-event",children:"On Created Event"}),"\n",(0,r.jsx)(n.p,{children:"This event is triggered after creating a new document or documents."}),"\n",(0,r.jsx)(n.p,{children:"Method Signature:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"public onCreated(callback: (payload: CreatedEventPayload) => void): this;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"src=app.ts",children:'import { query } from "@warlock.js/cascade";\r\n\r\nfunction main() {\r\n  query.onCreated(({ collection, document, documents, data, isMany }) => {\r\n    // do something\r\n  });\r\n\r\n  // will trigger the `onCreated` event after creating a new document\r\n  query.create("users", { name: "John Doe" });\r\n\r\n  // will trigger the `onCreated` event after creating many documents\r\n  query.createMany("users", [{ name: "John Doe" }, { name: "Jane Doe" }]);\r\n}\r\n\r\nmain();\n'})}),"\n",(0,r.jsx)(n.p,{children:"The payload contains the following properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"collection"}),": The collection name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"document"}),": The created document, exists when calling ",(0,r.jsx)(n.code,{children:"create"})," method."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"documents"}),": The created documents, exists when calling ",(0,r.jsx)(n.code,{children:"createMany"})," method."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"data"}),": The data that was inserted."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isMany"}),": A boolean value that indicates if the operation is for many documents or not."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["That event is triggered when calling ",(0,r.jsx)(n.code,{children:"create"})," or ",(0,r.jsx)(n.code,{children:"createMany"})," methods."]}),"\n",(0,r.jsx)(n.h2,{id:"on-updating-event",children:"On Updating Event"}),"\n",(0,r.jsx)(n.p,{children:"This event is triggered before updating a document or documents."}),"\n",(0,r.jsx)(n.p,{children:"Method Signature:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"public onUpdating(callback: (payload: UpdatingEventPayload) => void): this;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"src=app.ts",children:'import { query } from "@warlock.js/cascade";\r\n\r\nfunction main() {\r\n  query.onUpdating(\r\n    ({ collection, query, data, isMany, filter, updateOptions, options }) => {\r\n      // do something\r\n    }\r\n  );\r\n\r\n  // will trigger the `onUpdating` event when updating a document\r\n  const filter = { name: "John Doe" };\r\n\r\n  query.update("users", filter, { name: "Jane Doe New Name" });\r\n\r\n  // will trigger the `onUpdating` event when updating many documents\r\n  query.updateMany("users", filter, {\r\n    $set: {\r\n      name: "Jane Doe New Name",\r\n    },\r\n  });\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The payload contains the following properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"collection"}),": The collection name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"query"}),": The ",(0,r.jsx)(n.a,{href:"https://mongodb.github.io/node-mongodb-native/Next/classes/Collection.html",children:"Collection Query"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"data"}),": The data to be updated."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isMany"}),": A boolean value that indicates if the operation is for many documents or not."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter"}),": The filter that will be used to update the document or documents based on it."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"updateOptions"}),": This is the ",(0,r.jsx)(n.a,{href:"https://mongodb.github.io/node-mongodb-native/Next/interfaces/UpdateManyModel.html#update",children:"Update Filter"})," object which is the second argument of ",(0,r.jsx)(n.code,{children:"updateMany"})," method"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"}),": ",(0,r.jsx)(n.a,{href:"https://mongodb.github.io/node-mongodb-native/Next/interfaces/UpdateOptions.html",children:"Update options"}),", will be passed only when calling ",(0,r.jsx)(n.code,{children:"updateMany"})," method."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["That event is triggered when calling ",(0,r.jsx)(n.code,{children:"update"})," or ",(0,r.jsx)(n.code,{children:"updateMany"})," methods."]}),"\n",(0,r.jsx)(n.h2,{id:"on-updated-event",children:"On Updated Event"}),"\n",(0,r.jsx)(n.p,{children:"This event is triggered after updating a document or documents."}),"\n",(0,r.jsx)(n.p,{children:"Method Signature:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"public onUpdated(callback: (payload: UpdatedEventPayload) => void): this;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"src=app.ts",children:'import { query } from "@warlock.js/cascade";\r\n\r\nfunction main() {\r\n  query.onUpdated(\r\n    ({\r\n      collection,\r\n      document,\r\n      documents,\r\n      data,\r\n      isMany,\r\n      filter,\r\n      updateOptions,\r\n      options,\r\n      result,\r\n    }) => {\r\n      // do something\r\n    }\r\n  );\r\n\r\n  // will trigger the `onUpdated` event after updating a document\r\n  const filter = { name: "John Doe" };\r\n\r\n  query.update("users", filter, { name: "Jane Doe New Name" });\r\n\r\n  // will trigger the `onUpdated` event after updating many documents\r\n  query.updateMany("users", filter, {\r\n    $set: {\r\n      name: "Jane Doe New Name",\r\n    },\r\n  });\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The payload contains the following properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"collection"}),": The collection name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"document"}),": The updated document, exists when calling ",(0,r.jsx)(n.code,{children:"update"})," method."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"documents"}),": The updated documents, exists when calling ",(0,r.jsx)(n.code,{children:"updateMany"})," method."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"data"}),": The data that was updated."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isMany"}),": A boolean value that indicates if the operation is for many documents or not."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter"}),": The filter that was used to update the document or documents based on it."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"updateOptions"}),": This is the ",(0,r.jsx)(n.a,{href:"https://mongodb.github.io/node-mongodb-native/Next/interfaces/UpdateManyModel.html#update",children:"Update Filter"})," object which is the second argument of ",(0,r.jsx)(n.code,{children:"updateMany"})," method."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"}),": ",(0,r.jsx)(n.a,{href:"https://mongodb.github.io/node-mongodb-native/Next/interfaces/UpdateOptions.html",children:"Update options"}),", will be passed only when calling ",(0,r.jsx)(n.code,{children:"updateMany"})," method."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"result"}),": The ",(0,r.jsx)(n.a,{href:"https://mongodb.github.io/node-mongodb-native/Next/interfaces/UpdateResult.html",children:"Update Result"})," object."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["That event is triggered when calling ",(0,r.jsx)(n.code,{children:"update"})," or ",(0,r.jsx)(n.code,{children:"updateMany"})," methods."]}),"\n",(0,r.jsx)(n.h2,{id:"on-deleting-event",children:"On Deleting Event"}),"\n",(0,r.jsx)(n.p,{children:"This event is triggered before deleting a document or documents."}),"\n",(0,r.jsx)(n.p,{children:"Method Signature:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"public onDeleting(callback: (payload: DeletingEventPayload) => void): this;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"src=app.ts",children:'import { query } from "@warlock.js/cascade";\r\n\r\nfunction main() {\r\n  query.onDeleting(({ collection, query, filter, isMany }) => {\r\n    // do something\r\n  });\r\n\r\n  // will trigger the `onDeleting` event when deleting a document\r\n  const filter = { name: "John Doe" };\r\n\r\n  query.deleteOne("users", filter);\r\n\r\n  // will trigger the `onDeleting` event when deleting many documents\r\n  query.deleteMany("users", filter);\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The payload contains the following properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"collection"}),": The collection name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"query"}),": The ",(0,r.jsx)(n.a,{href:"https://mongodb.github.io/node-mongodb-native/Next/classes/Collection.html",children:"Collection Query"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter"}),": The filter that will be used to delete the document or documents based on it."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isMany"}),": A boolean value that indicates if the operation is for many documents or not."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["That event is triggered when calling ",(0,r.jsx)(n.code,{children:"deleteOne"})," or ",(0,r.jsx)(n.code,{children:"deleteMany"})," methods."]}),"\n",(0,r.jsx)(n.h2,{id:"on-deleted-event",children:"On Deleted Event"}),"\n",(0,r.jsx)(n.p,{children:"This event is triggered after deleting a document or documents."}),"\n",(0,r.jsx)(n.p,{children:"Method Signature:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"public onDeleted(callback: (payload: DeletedEventPayload) => void): this;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"src=app.ts",children:'import { query } from "@warlock.js/cascade";\r\n\r\nfunction main() {\r\n  query.onDeleted(\r\n    ({ collection, isDeleted, filter, isMany, count, result }) => {\r\n      // do something\r\n    }\r\n  );\r\n\r\n  // will trigger the `onDeleted` event after deleting a document\r\n  const filter = { name: "John Doe" };\r\n\r\n  query.delete("users", filter);\r\n\r\n  // will trigger the `onDeleted` event after deleting many documents\r\n  query.deleteMany("users", filter);\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The payload contains the following properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"collection"}),": The collection name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isDeleted"}),": A boolean value that indicates if the document or documents were deleted or not."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter"}),": The filter that was used to delete the document or documents based on it."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isMany"}),": A boolean value that indicates if the operation is for many documents or not."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"count"}),": The number of deleted documents."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"result"}),": The ",(0,r.jsx)(n.a,{href:"https://mongodb.github.io/node-mongodb-native/Next/interfaces/DeleteResult.html",children:"Delete Result"})," object."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["That event is triggered when calling ",(0,r.jsx)(n.code,{children:"deleteOne"})," or ",(0,r.jsx)(n.code,{children:"deleteMany"})," methods."]}),"\n",(0,r.jsx)(n.h2,{id:"on-fetching-event",children:"On Fetching Event"}),"\n",(0,r.jsx)(n.p,{children:"This event is triggered before fetching a document or documents."}),"\n",(0,r.jsx)(n.p,{children:"Method Signature:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"public onFetching(callback: (payload: FetchingEventPayload) => void): this;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"src=app.ts",children:'import { query } from "@warlock.js/cascade";\r\n\r\nfunction main() {\r\n  query.onFetching(({ collection, query, filter, isMany }) => {\r\n    // do something\r\n  });\r\n\r\n  // will trigger the `onFetching` event when fetching a document\r\n  const filter = { name: "John Doe" };\r\n\r\n  query.first("users", filter);\r\n\r\n  // will trigger the `onFetching` event when fetching many documents\r\n  query.list("users", filter);\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The payload contains the following properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"collection"}),": The collection name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"query"}),": The ",(0,r.jsx)(n.a,{href:"https://mongodb.github.io/node-mongodb-native/Next/classes/Collection.html",children:"Collection Query"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter"}),": The filter that will be used to fetch the document or documents based on it."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isMany"}),": A boolean value that indicates if the operation is for many documents or not."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["That event is triggered when calling ",(0,r.jsx)(n.code,{children:"first"}),", ",(0,r.jsx)(n.code,{children:"last"}),", ",(0,r.jsx)(n.code,{children:"latest"}),", ",(0,r.jsx)(n.code,{children:"oldest"}),", ",(0,r.jsx)(n.code,{children:"distinct"})," or ",(0,r.jsx)(n.code,{children:"list"})," methods."]}),"\n",(0,r.jsx)(n.h2,{id:"on-fetched-event",children:"On Fetched Event"}),"\n",(0,r.jsx)(n.p,{children:"This event is triggered after fetching a document or documents."}),"\n",(0,r.jsx)(n.p,{children:"Method Signature:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"public onFetched(callback: (payload: FetchedEventPayload) => void): this;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"src=app.ts",children:'import { query } from "@warlock.js/cascade";\r\n\r\nfunction main() {\r\n  query.onFetched(({ collection, output, filter, isMany, count }) => {\r\n    // do something\r\n  });\r\n\r\n  // will trigger the `onFetched` event after fetching a document\r\n  const filter = { name: "John Doe" };\r\n\r\n  query.first("users", filter);\r\n\r\n  // will trigger the `onFetched` event after fetching many documents\r\n  query.list("users", filter);\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The payload contains the following properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"collection"}),": The collection name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output"}),": The fetched document or documents."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter"}),": The filter that was used to fetch the document or documents based on it."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isMany"}),": A boolean value that indicates if the operation is for many documents or not."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"count"}),": The number of fetched documents."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.RP)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},5680:(e,n,t)=>{t.d(n,{RP:()=>c});var r=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},a={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=c(t),p=i,g=u["".concat(l,".").concat(p)]||u[p]||a[p]||o;return t?r.createElement(g,d(d({ref:n},h),{},{components:t})):r.createElement(g,d({ref:n},h))}));h.displayName="MDXCreateElement"}}]);