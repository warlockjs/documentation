"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6366],{7816:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>n,metadata:()=>r,toc:()=>d});var i=a(4848),s=a(8453);const n={sidebar_position:4},l="Uploaded Files",r={id:"warlock/http/uploaded-files",title:"Uploaded Files",description:"Uploading files in an API application is crucial, and Warlock provides a simple way to handle file uploads.",source:"@site/docs/warlock/http/uploaded-files.mdx",sourceDirName:"warlock/http",slug:"/warlock/http/uploaded-files",permalink:"/docs/warlock/http/uploaded-files",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"warlock",previous:{title:"Request",permalink:"/docs/warlock/http/request"},next:{title:"Middleware",permalink:"/docs/warlock/http/middleware"}},o={},d=[{value:"How it works",id:"how-it-works",level:2},{value:"Handling uploaded file",id:"handling-uploaded-file",level:2},{value:"UploadedFile",id:"uploadedfile",level:2},{value:"Getting the file name",id:"getting-the-file-name",level:3},{value:"Get file extension",id:"get-file-extension",level:3},{value:"Get file size",id:"get-file-size",level:3},{value:"Get file mime type",id:"get-file-mime-type",level:3},{value:"Saving files",id:"saving-files",level:3},{value:"Saving files with custom name",id:"saving-files-with-custom-name",level:3},{value:"Saving file with random name",id:"saving-file-with-random-name",level:3},{value:"Get file buffer",id:"get-file-buffer",level:2},{value:"Working with multiple files",id:"working-with-multiple-files",level:2},{value:"Image Files",id:"image-files",level:2},{value:"Get image dimensions",id:"get-image-dimensions",level:2}];function c(e){const t={admonition:"admonition",code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"uploaded-files",children:"Uploaded Files"}),"\n",(0,i.jsx)(t.p,{children:"Uploading files in an API application is crucial, and Warlock provides a simple way to handle file uploads."}),"\n",(0,i.jsx)(t.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,i.jsxs)(t.p,{children:["Uploaded files are used in ",(0,i.jsx)(t.code,{children:"multipart/form-data"})," requests, and Warlock handles them automatically."]}),"\n",(0,i.jsx)(t.h2,{id:"handling-uploaded-file",children:"Handling uploaded file"}),"\n",(0,i.jsxs)(t.p,{children:["To access a an uploaded file, use ",(0,i.jsx)(t.code,{children:"request.file()"})," method, which returns a ",(0,i.jsx)(t.code,{children:"File"})," object."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/users/controllers/upload-avatar.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function uploadAvatar(request: Request, response: Response) {\r\n  const avatar = request.file("avatar");\r\n\r\n  // ...\r\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["This method will return an instance of ",(0,i.jsx)(t.code,{children:"UploadedFile"})," if it exists, otherwise it will return ",(0,i.jsx)(t.code,{children:"null"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"uploadedfile",children:"UploadedFile"}),"\n",(0,i.jsx)(t.p,{children:"Now we got the uploaded file, let's see what we can do with it."}),"\n",(0,i.jsx)(t.h3,{id:"getting-the-file-name",children:"Getting the file name"}),"\n",(0,i.jsxs)(t.p,{children:["To get the file name, use ",(0,i.jsx)(t.code,{children:"name"})," property."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/users/controllers/upload-avatar.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function uploadAvatar(request: Request, response: Response) {\r\n  const avatar = request.file("avatar");\r\n\r\n  if (!avatar) {\r\n    return response.error("No file uploaded");\r\n  }\r\n\r\n  const fileName = avatar.name;\r\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"get-file-extension",children:"Get file extension"}),"\n",(0,i.jsxs)(t.p,{children:["To get the file extension, use ",(0,i.jsx)(t.code,{children:"extension"})," property."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/users/controllers/upload-avatar.ts"',children:"//...\r\nconst extension = avatar.extension;\n"})}),"\n",(0,i.jsx)(t.h3,{id:"get-file-size",children:"Get file size"}),"\n",(0,i.jsxs)(t.p,{children:["To get the file size, use ",(0,i.jsx)(t.code,{children:"size"})," method."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/users/controllers/upload-avatar.ts"',children:"//...\r\nconst size = await avatar.size();\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["Please note that the file size is being calculated on demand, it means that the size of the uploaded file will be calculated only when calling ",(0,i.jsx)(t.code,{children:"size()"})," method."]})}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["When calling ",(0,i.jsx)(t.code,{children:"size()"})," method multiple times, it will cache the size of the file to avoid calculating it again."]})}),"\n",(0,i.jsx)(t.h3,{id:"get-file-mime-type",children:"Get file mime type"}),"\n",(0,i.jsxs)(t.p,{children:["To get the file mime type, use ",(0,i.jsx)(t.code,{children:"mimeType"})," property."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/users/controllers/upload-avatar.ts"',children:"//...\r\n\r\nconst mimeType = avatar.mimeType;\n"})}),"\n",(0,i.jsx)(t.h3,{id:"saving-files",children:"Saving files"}),"\n",(0,i.jsxs)(t.p,{children:["All uploaded files are stored inside ",(0,i.jsx)(t.code,{children:"storage/uploads"})," directory, in that sense, we need to pass only the relative path to the ",(0,i.jsx)(t.code,{children:"saveTo()"})," method."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/users/controllers/upload-avatar.ts"',children:'//...\r\n\r\nconst path = await avatar.saveTo("avatars");\n'})}),"\n",(0,i.jsx)(t.p,{children:"This method accepts the relative path to the storage path directory, it will create the directory if it doesn't exist and the file will be saved with the same name."}),"\n",(0,i.jsx)(t.admonition,{type:"danger",children:(0,i.jsx)(t.p,{children:"If the file already exists, it will be overridden."})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"saveTo"})," method will return the relative path of the file without the storage path, for example if the storage path is ",(0,i.jsx)(t.code,{children:"storage/uploads"}),", and the file is saved to ",(0,i.jsx)(t.code,{children:"storage/uploads/avatars/avatar.png"}),", the ",(0,i.jsx)(t.code,{children:"saveTo"})," method will return ",(0,i.jsx)(t.code,{children:"avatars/avatar.png"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"saving-files-with-custom-name",children:"Saving files with custom name"}),"\n",(0,i.jsxs)(t.p,{children:["If you want to rename the file when saving it, use ",(0,i.jsx)(t.code,{children:"saveAs"})," method, it accept two arguments, the directory that will be saved into and the file name (with the extension)."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/users/controllers/upload-avatar.ts"',children:'//...\r\nconst path = await avatar.saveAs("avatars", "avatar.png");\n'})}),"\n",(0,i.jsx)(t.h3,{id:"saving-file-with-random-name",children:"Saving file with random name"}),"\n",(0,i.jsxs)(t.p,{children:["If you are creating an uploading app that you don't really care about the file name, it is best too use random file name to avoid files overriding, in this case use the ",(0,i.jsx)(t.code,{children:"save()"})," method, it accepts only the directory that will be saved into."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/users/controllers/upload-avatar.ts"',children:'//...\r\nconst path = await avatar.save("avatars");\n'})}),"\n",(0,i.jsx)(t.h2,{id:"get-file-buffer",children:"Get file buffer"}),"\n",(0,i.jsx)(t.p,{children:"Sometime we need to get the file buffer, for example when we need to save the file to the database, or to upload it to a cloud storage service."}),"\n",(0,i.jsxs)(t.p,{children:["To get the file buffer, use ",(0,i.jsx)(t.code,{children:"buffer()"})," method."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/users/controllers/upload-avatar.ts"',children:"//...\r\nconst buffer = await avatar.buffer();\n"})}),"\n",(0,i.jsx)(t.h2,{id:"working-with-multiple-files",children:"Working with multiple files"}),"\n",(0,i.jsxs)(t.p,{children:["It is pretty much the same as dealing with a single file, except that the return type is an array of ",(0,i.jsx)(t.code,{children:"UploadedFile"})," objects."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/users/controllers/upload-avatar.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function uploadAvatar(request: Request, response: Response) {\r\n  const avatars = request.files("avatars");\r\n\r\n  if (!avatars.length) {\r\n    return response.error("No file uploaded");\r\n  }\r\n\r\n  for (const avatar of avatars) {\r\n    await avatar.save("avatars");\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(t.div,{}),"\n",(0,i.jsxs)(t.p,{children:["Please note that ",(0,i.jsx)(t.code,{children:"request.file()"})," can handle both single and multiple files, so you can use it instead of ",(0,i.jsx)(t.code,{children:"request.files()"})," if you want to handle both cases.\r\n:::"]}),"\n",(0,i.jsx)(t.h2,{id:"image-files",children:"Image Files"}),"\n",(0,i.jsxs)(t.p,{children:["To check if the file is an image, use ",(0,i.jsx)(t.code,{children:"isImage"})," property."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/users/controllers/upload-avatar.ts"',children:"//...\r\nif (avatar.isImage) {\r\n  // ...\r\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"get-image-dimensions",children:"Get image dimensions"}),"\n",(0,i.jsxs)(t.p,{children:["To get the image dimensions, use ",(0,i.jsx)(t.code,{children:"dimensions()"})," method."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/users/controllers/upload-avatar.ts"',children:"//...\r\nif (avatar.isImage) {\r\n  const { width, height } = await avatar.dimensions();\r\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>l,x:()=>r});var i=a(6540);const s={},n=i.createContext(s);function l(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(n.Provider,{value:t},e.children)}}}]);