"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[2784],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=o.createContext({}),l=function(e){var t=o.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return o.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(r),m=n,f=c["".concat(u,".").concat(m)]||c[m]||d[m]||a;return r?o.createElement(f,s(s({ref:t},p),{},{components:r})):o.createElement(f,s({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[c]="string"==typeof e?e:n,s[1]=i;for(var l=2;l<a;l++)s[l]=r[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2268:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=r(7462),n=(r(7294),r(3905));const a={sidebar_position:3},s="Auth Middleware",i={unversionedId:"warlock/auth/auth-middleware",id:"warlock/auth/auth-middleware",title:"Auth Middleware",description:"Auth middleware is used to verify the user identity, it's used to protect routes from unauthorized access.",source:"@site/docs/warlock/auth/auth-middleware.mdx",sourceDirName:"warlock/auth",slug:"/warlock/auth/auth-middleware",permalink:"/documentation/docs/warlock/auth/auth-middleware",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"warlock",previous:{title:"Introduction",permalink:"/documentation/docs/warlock/auth/introduction"},next:{title:"Auth configurations",permalink:"/documentation/docs/warlock/auth/configurations"}},u={},l=[{value:"Usage",id:"usage",level:2},{value:"Protected Routes for user type",id:"protected-routes-for-user-type",level:2}],p={toc:l},c="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"auth-middleware"},"Auth Middleware"),(0,n.kt)("p",null,"Auth middleware is used to verify the user identity, it's used to protect routes from unauthorized access."),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,"Import ",(0,n.kt)("inlineCode",{parentName:"p"},"auth")," middleware from ",(0,n.kt)("inlineCode",{parentName:"p"},"@mongez/warlock")," and use it in the route definition."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/routes.ts"',title:'"src/app/users/routes.ts"'},'import { router, authMiddleware } from "@mongez/warlock";\nimport { listUsers } from "./controllers/list-users";\n\nrouter.get("/users", listUsers, {\n  middleware: authMiddleware(),\n});\n')),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"authMiddleware")," will authenticate the current request by verifying the ",(0,n.kt)("inlineCode",{parentName:"p"},"JWT")," token sent with the request."),(0,n.kt)("h2",{id:"protected-routes-for-user-type"},"Protected Routes for user type"),(0,n.kt)("p",null,"The previous example works for any type of users either an actual user or a ",(0,n.kt)("a",{parentName:"p",href:"./guests"},"Guest")," user."),(0,n.kt)("p",null,"Now what if we want to protect a route for a specific user type?"),(0,n.kt)("p",null,"For example, the ",(0,n.kt)("inlineCode",{parentName:"p"},"update profile")," api requires an actual user not a guest user, in this case we can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"authMiddleware")," and pass to it the user type defined in ",(0,n.kt)("a",{parentName:"p",href:"./configurations"},"Auth configurations"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/routes.ts"',title:'"src/app/users/routes.ts"'},'import { router, authMiddleware } from "@mongez/warlock";\nimport { updateProfile } from "./controllers/update-profile";\n\nrouter.post("/users/profile", updateProfile, {\n  middleware: authMiddleware("user"),\n});\n')),(0,n.kt)("p",null,"This will allow only the user with ",(0,n.kt)("inlineCode",{parentName:"p"},"userType")," equals to ",(0,n.kt)("strong",{parentName:"p"},"user")," to access this route."),(0,n.kt)("p",null,"We can also use it for reverse guarded, for example, a logged in user can not make a login, create account or forget password request, so we can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"authMiddleware")," to guard these routes for guests only."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/routes.ts"',title:'"src/app/users/routes.ts"'},'import { router, authMiddleware } from "@mongez/warlock";\nimport { login } from "./controllers/login";\nimport { createAccount } from "./controllers/create-account";\nimport { forgetPassword } from "./controllers/forget-password";\n\nrouter.group(\n  {\n    middleware: [authMiddleware("guest")],\n  },\n  () => {\n    router.post("/login", login);\n    router.post("/create-account", createAccount);\n    router.post("/forget-password", forgetPassword);\n  }\n);\n')),(0,n.kt)("p",null,"We used the router group method to add the ",(0,n.kt)("inlineCode",{parentName:"p"},"authMiddleware")," to all routes inside the group."),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"All of these groups are already stored in ",(0,n.kt)("inlineCode",{parentName:"p"},"src/app/utils/router.ts"),".")))}d.isMDXComponent=!0}}]);