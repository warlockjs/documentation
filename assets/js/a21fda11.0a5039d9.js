"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[180],{3122:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=r(4848),i=r(8453);const s={sidebar_position:3},t="Validation Schema",l={id:"warlock/validation/validation-schema",title:"Validation Schema",description:"Added in v1.4.0.",source:"@site/docs/warlock/validation/validation-schema.mdx",sourceDirName:"warlock/validation",slug:"/warlock/validation/validation-schema",permalink:"/docs/warlock/validation/validation-schema",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"warlock",previous:{title:"Validation Rules",permalink:"/docs/warlock/validation/validation-rules"},next:{title:"Custom Validator",permalink:"/docs/warlock/validation/custom-validator"}},o={},d=[{value:"How it works",id:"how-it-works",level:2},{value:"Example",id:"example",level:2},{value:"Make all inputs required",id:"make-all-inputs-required",level:2},{value:"Array Schema",id:"array-schema",level:2},{value:"Apply rules to all inputs",id:"apply-rules-to-all-inputs",level:2}];function c(e){const n={admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"validation-schema",children:"Validation Schema"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Added in v1.4.0"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Validation schema allows you to define the validation rules in but in more convenient way."}),"\n",(0,a.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"validate.rules"})," accepts an object of inputs, each input has an array of validation rules, the key difference here is we will wrap that object in a new instance of ",(0,a.jsx)(n.code,{children:"ValidationSchema"})," class:"]}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"Let's take an example of validating the login request:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:'title="src/app/users/controllers/auth/login.ts"',children:'import { Request, Response, ValidationSchema } from "@warlock.js/core";\r\nimport { User } from "app/users/models/user";\r\n\r\nexport default async function login(request: Request, response: Response) {\r\n  // do logic here\r\n}\r\n\r\nlogin.validation = {\r\n  rules: new ValidationSchema({\r\n    email: ["required", "email"],\r\n    password: ["required", "string"],\r\n  },\r\n});\n'})}),"\n",(0,a.jsx)(n.p,{children:"It works exactly the same with no more differences."}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:["For the current version the ",(0,a.jsx)(n.code,{children:"validation.rules"})," accepts a plain object or an instance of ",(0,a.jsx)(n.code,{children:"ValidationSchema"})," class, but in the next major version it will only accept an instance of ",(0,a.jsx)(n.code,{children:"ValidationSchema"})," class."]})}),"\n",(0,a.jsx)(n.h2,{id:"make-all-inputs-required",children:"Make all inputs required"}),"\n",(0,a.jsxs)(n.p,{children:["So instead of adding the ",(0,a.jsx)(n.code,{children:"required"})," rule to each input, you can make all inputs required in the validation schema by calling ",(0,a.jsx)(n.code,{children:"requiredInputs"})," method:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'login.validation = {\r\n  rules: new ValidationSchema({\r\n    email: ["email"],\r\n    password: ["string"],\r\n  }).requiredInputs(),\r\n};\n'})}),"\n",(0,a.jsx)(n.p,{children:"This is equivalent to:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'login.validation = {\r\n  rules: new ValidationSchema({\r\n    email: ["required", "email"],\r\n    password: ["required", "string"],\r\n  }),\r\n};\n'})}),"\n",(0,a.jsx)(n.h2,{id:"array-schema",children:"Array Schema"}),"\n",(0,a.jsx)(n.p,{children:"Let's take a more complex example, let's say we want to validate the following request:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"{\r\n  name: 'John Doe',\r\n  addresses: [\r\n    {\r\n      city: \"Cairo\",\r\n      address: 'Street 1',\r\n      buildingNo: 1,\r\n      flatNo: 1,\r\n    },\r\n    }\r\n  ]\r\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This is an object that has ",(0,a.jsx)(n.code,{children:"addresses"})," which is an array of objects, each object has ",(0,a.jsx)(n.code,{children:"city"})," which is ",(0,a.jsx)(n.code,{children:"string"})," and ",(0,a.jsx)(n.code,{children:"address"}),", ",(0,a.jsx)(n.code,{children:"buildingNo"}),", and ",(0,a.jsx)(n.code,{children:"flatNo"})," which are strings."]}),"\n",(0,a.jsxs)(n.p,{children:["So how can we validate array of objects? this is where the ",(0,a.jsx)(n.code,{children:"ArraySchema"})," class comes in handy:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import {\r\n  Request,\r\n  Response,\r\n  ValidationSchema,\r\n  ArraySchema,\r\n} from "@warlock.js/core";\r\nimport { User } from "app/users/models/user";\r\n\r\nexport default async function login(request: Request, response: Response) {\r\n  // do logic here\r\n}\r\n\r\nlogin.validation = {\r\n  rules: new ValidationSchema({\r\n    name: ["required", "string"],\r\n    addresses: new ArraySchema({\r\n      city: ["required", "string"],\r\n      address: ["required", "string"],\r\n      buildingNo: ["required", "string"],\r\n      flatNo: ["required", "string"],\r\n    }),\r\n  }),\r\n};\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Here we defined the ",(0,a.jsx)(n.code,{children:"addresses"})," as an instance of ",(0,a.jsx)(n.code,{children:"ArraySchema"})," class, and we passed the validation rules as an object to the constructor."]}),"\n",(0,a.jsxs)(n.p,{children:["Now what if we want to validate the city as an object? we can do that by passing the validation rules as an instance of ",(0,a.jsx)(n.code,{children:"ValidationSchema"})," class:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import {\r\n  Request,\r\n  Response,\r\n  ValidationSchema,\r\n  ArraySchema,\r\n} from "@warlock.js/core";\r\nimport { User } from "app/users/models/user";\r\n\r\nexport default async function login(request: Request, response: Response) {\r\n  // do logic here\r\n}\r\n\r\nlogin.validation = {\r\n  rules: new ValidationSchema({\r\n    name: ["required", "string"],\r\n    addresses: new ArraySchema({\r\n      city: new ValidationSchema({\r\n        name: ["required", "string"],\r\n      }),\r\n      address: ["required", "string"],\r\n      buildingNo: ["required", "string"],\r\n      flatNo: ["required", "string"],\r\n    }),\r\n  }),\r\n};\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Here we defined the ",(0,a.jsx)(n.code,{children:"city"})," as an instance of ",(0,a.jsx)(n.code,{children:"ValidationSchema"})," class, and we passed the validation rules as an object to the constructor."]}),"\n",(0,a.jsxs)(n.p,{children:["So if the ",(0,a.jsx)(n.code,{children:"addresses.city.name"})," is missing, the validation will fai with a message like this:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\r\n  "errors": {\r\n    "key": "addresses.0.city.name",\r\n    "message": "The addresses.0.city.name field is required."\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["If any of the ",(0,a.jsx)(n.code,{children:"ArraySchema"})," inputs is required, the whole array will be required."]})}),"\n",(0,a.jsx)(n.h2,{id:"apply-rules-to-all-inputs",children:"Apply rules to all inputs"}),"\n",(0,a.jsxs)(n.p,{children:["If we checked the array schema, they all have the ",(0,a.jsx)(n.code,{children:"string"})," rule, we can use ",(0,a.jsx)(n.code,{children:"rules"})," method to add rules to all inputs at once:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import {\r\n  Request,\r\n  Response,\r\n  ValidationSchema,\r\n  ArraySchema,\r\n} from "@warlock.js/core";\r\nimport { User } from "app/users/models/user";\r\n\r\nexport default async function login(request: Request, response: Response) {\r\n  // do logic here\r\n}\r\n\r\nlogin.validation = {\r\n  rules: new ValidationSchema({\r\n    name: ["required", "string"],\r\n    addresses: new ArraySchema({\r\n      city: new ValidationSchema({\r\n        name: ["required"],\r\n      }),\r\n      address: ["required"],\r\n      buildingNo: ["required"],\r\n      flatNo: ["required"],\r\n    }).rules(["string"]),\r\n  }),\r\n};\n'})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Please note if the input is a validation schema, the rules will be applied to it as well for all its nested inputs, for example all inputs in ",(0,a.jsx)(n.code,{children:"city"})," will have ",(0,a.jsx)(n.code,{children:"string"})," rule as well."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var a=r(6540);const i={},s=a.createContext(i);function t(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);