"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[892],{6574:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var t=s(4848),o=s(8453);const a={sidebar_position:1},i="Philosophy",r={id:"cascade/models/introduction",title:"Philosophy",description:"Models are objects that aim to manage a single document in a collection, it also provides multiple ways of creating, updating, deleting and fetching documents as utilities.",source:"@site/docs/cascade/models/introduction.mdx",sourceDirName:"cascade/models",slug:"/cascade/models/introduction",permalink:"/docs/cascade/models/introduction",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"mongodb",previous:{title:"Models",permalink:"/docs/category/models"},next:{title:"Create New Document",permalink:"/docs/cascade/models/create-document"}},d={},c=[{value:"What is a model?",id:"what-is-a-model",level:2},{value:"Why not dealing with documents directly?",id:"why-not-dealing-with-documents-directly",level:2},{value:"Creating a model",id:"creating-a-model",level:2},{value:"How to use a model?",id:"how-to-use-a-model",level:2},{value:"Saving a model instance",id:"saving-a-model-instance",level:2},{value:"Accessing Document ids",id:"accessing-document-ids",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"philosophy",children:"Philosophy"}),"\n",(0,t.jsx)(n.p,{children:"Models are objects that aim to manage a single document in a collection, it also provides multiple ways of creating, updating, deleting and fetching documents as utilities."}),"\n",(0,t.jsx)(n.h2,{id:"what-is-a-model",children:"What is a model?"}),"\n",(0,t.jsx)(n.p,{children:"A model basically is a class that represents a document in a collection, this helps us to manage the document in a more object oriented way."}),"\n",(0,t.jsx)(n.h2,{id:"why-not-dealing-with-documents-directly",children:"Why not dealing with documents directly?"}),"\n",(0,t.jsxs)(n.p,{children:["Because when your application grows, you'd need to do more complex operations over documents, let's take an example, when we save a new model it automatically creates a new unique ",(0,t.jsx)(n.code,{children:"id"})," for that document, and we can access that id using the ",(0,t.jsx)(n.code,{children:"id"})," property, you would need to do this manually each time you create a new document, and this is just a simple example, there are many other things that you'd need to do manually if you don't use models."]}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-model",children:"Creating a model"}),"\n",(0,t.jsxs)(n.p,{children:["To create a model, you need to extend the ",(0,t.jsx)(n.code,{children:"Model"})," class and define the ",(0,t.jsx)(n.code,{children:"collection"})," property."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/models/user.ts"',children:'import { Model } from "@warlock.js/cascade";\r\n\r\nexport class User extends Model {\r\n    /**\r\n    * The collection name\r\n    */\r\n    public static collection = "users";\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This is the bare minimum to create a model, but we can do more, we'll see that as long as we go."}),"\n",(0,t.jsx)(n.h2,{id:"how-to-use-a-model",children:"How to use a model?"}),"\n",(0,t.jsxs)(n.p,{children:["When creating a new model instance, you optionally pass an object of the data that will be saved (",(0,t.jsx)(n.strong,{children:"created"}),")."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/app.ts"',children:'import { User } from "./models/user";\r\n\r\nconst user = new User({\r\n    name: "Hasan Zohdy",\r\n    email: "hassanzohdy@gmail.com",\r\n    isActive: true,\r\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"This only creates an instance of the model, but the data is not saved yet, now let's see how to save the data."}),"\n",(0,t.jsx)(n.h2,{id:"saving-a-model-instance",children:"Saving a model instance"}),"\n",(0,t.jsxs)(n.p,{children:["To save a model instance, you need to call the ",(0,t.jsx)(n.code,{children:"save"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/app.ts"',children:'import { User } from "./models/user";\r\n\r\nasync function main() {\r\n    const user = new User({\r\n        name: "Hasan Zohdy",\r\n        email: "hassanzohdy@gmail.com",\r\n        isActive: true,\r\n    });\r\n\r\n    await user.save();\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Once the model is successfully saved, a new ",(0,t.jsx)(n.code,{children:"id"})," is assigned to the model instance."]}),"\n",(0,t.jsx)(n.h2,{id:"accessing-document-ids",children:"Accessing Document ids"}),"\n",(0,t.jsxs)(n.p,{children:["By default, MongoDB generates ",(0,t.jsx)(n.code,{children:"_id"})," for each document, and it's a unique identifier for each document in the collection, we can access the document id using the ",(0,t.jsx)(n.code,{children:"_id"})," property."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/app.ts"',children:'import { User } from "./models/user";\r\n\r\nasync function main() {\r\n    const user = new User({\r\n        name: "Hasan Zohdy",\r\n        email: "hassanzohdy@gmail.com",\r\n        isActive: true,\r\n    });\r\n\r\n    await user.save();\r\n\r\n    const _id = user._id;\r\n\r\n    console.log(_id); // ObjectId("5f9b2b3b3f3b9a0b3c3b9a0b")\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This is good, but honestly i prefer ids as numbers, so we can use the good benefit of the auto generated id."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/models/user.ts"',children:'\r\nimport { User } from "./models/user";\r\n\r\nasync function main() {\r\n    const user = new User({\r\n        name: "Hasan Zohdy",\r\n        email: "hassanzohdy@gmail.com",\r\n        isActive: true,\r\n    });\r\n\r\n    await user.save();\r\n\r\n    const id = user.id;\r\n\r\n    console.log(id); // 1424151\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Any generated id is randomly generated by default, later we'll see how to generate ids in a sequential way on all models or on a specific model."})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>r});var t=s(6540);const o={},a=t.createContext(o);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);