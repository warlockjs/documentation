"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1400],{5409:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>n,metadata:()=>a,toc:()=>u});var s=t(4848),o=t(8453);const n={sidebar_position:3},i="Auth Middleware",a={id:"warlock/auth/auth-middleware",title:"Auth Middleware",description:"Auth middleware is used to verify the user identity, it's used to protect routes from unauthorized access.",source:"@site/docs/warlock/auth/auth-middleware.mdx",sourceDirName:"warlock/auth",slug:"/warlock/auth/auth-middleware",permalink:"/docs/warlock/auth/auth-middleware",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"warlock",previous:{title:"Introduction",permalink:"/docs/warlock/auth/introduction"},next:{title:"Auth configurations",permalink:"/docs/warlock/auth/configurations"}},d={},u=[{value:"Usage",id:"usage",level:2},{value:"Protected Routes for user type",id:"protected-routes-for-user-type",level:2}];function c(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"auth-middleware",children:"Auth Middleware"}),"\n",(0,s.jsx)(r.p,{children:"Auth middleware is used to verify the user identity, it's used to protect routes from unauthorized access."}),"\n",(0,s.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(r.p,{children:["Import ",(0,s.jsx)(r.code,{children:"auth"})," middleware from ",(0,s.jsx)(r.code,{children:"@warlock.js/core"})," and use it in the route definition."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/users/routes.ts"',children:'import { router, authMiddleware } from "@warlock.js/core";\r\nimport { listUsers } from "./controllers/list-users";\r\n\r\nrouter.get("/users", listUsers, {\r\n  middleware: authMiddleware(),\r\n});\n'})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"authMiddleware"})," will authenticate the current request by verifying the ",(0,s.jsx)(r.code,{children:"JWT"})," token sent with the request."]}),"\n",(0,s.jsx)(r.h2,{id:"protected-routes-for-user-type",children:"Protected Routes for user type"}),"\n",(0,s.jsxs)(r.p,{children:["The previous example works for any type of users either an actual user or a ",(0,s.jsx)(r.a,{href:"./guests",children:"Guest"})," user."]}),"\n",(0,s.jsx)(r.p,{children:"Now what if we want to protect a route for a specific user type?"}),"\n",(0,s.jsxs)(r.p,{children:["For example, the ",(0,s.jsx)(r.code,{children:"update profile"})," api requires an actual user not a guest user, in this case we can use the ",(0,s.jsx)(r.code,{children:"authMiddleware"})," and pass to it the user type defined in ",(0,s.jsx)(r.a,{href:"./configurations",children:"Auth configurations"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/users/routes.ts"',children:'import { router, authMiddleware } from "@warlock.js/core";\r\nimport { updateProfile } from "./controllers/update-profile";\r\n\r\nrouter.post("/users/profile", updateProfile, {\r\n  middleware: authMiddleware("user"),\r\n});\n'})}),"\n",(0,s.jsxs)(r.p,{children:["This will allow only the user with ",(0,s.jsx)(r.code,{children:"userType"})," equals to ",(0,s.jsx)(r.strong,{children:"user"})," to access this route."]}),"\n",(0,s.jsxs)(r.p,{children:["We can also use it for reverse guarded, for example, a logged in user can not make a login, create account or forget password request, so we can use the ",(0,s.jsx)(r.code,{children:"authMiddleware"})," to guard these routes for guests only."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/users/routes.ts"',children:'import { router, authMiddleware } from "@warlock.js/core";\r\nimport { login } from "./controllers/login";\r\nimport { createAccount } from "./controllers/create-account";\r\nimport { forgetPassword } from "./controllers/forget-password";\r\n\r\nrouter.group(\r\n  {\r\n    middleware: [authMiddleware("guest")],\r\n  },\r\n  () => {\r\n    router.post("/login", login);\r\n    router.post("/create-account", createAccount);\r\n    router.post("/forget-password", forgetPassword);\r\n  }\r\n);\n'})}),"\n",(0,s.jsxs)(r.p,{children:["We used the router group method to add the ",(0,s.jsx)(r.code,{children:"authMiddleware"})," to all routes inside the group."]}),"\n",(0,s.jsx)(r.admonition,{type:"tip",children:(0,s.jsxs)(r.p,{children:["All of these groups are already stored in ",(0,s.jsx)(r.code,{children:"src/app/utils/router.ts"}),"."]})})]})}function l(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>a});var s=t(6540);const o={},n=s.createContext(o);function i(e){const r=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(n.Provider,{value:r},e.children)}}}]);