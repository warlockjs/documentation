"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[161],{6761:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>r});var i=s(4848),d=s(8453);const a={sidebar_position:6},t="Model Data",l={id:"cascade/models/model-data",title:"Model Data",description:"Introduction",source:"@site/docs/cascade/models/model-data.mdx",sourceDirName:"cascade/models",slug:"/cascade/models/model-data",permalink:"/docs/cascade/models/model-data",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"mongodb",previous:{title:"Default values",permalink:"/docs/cascade/models/default-values"},next:{title:"Embedded documents",permalink:"/docs/cascade/models/embedded-documents"}},c={},r=[{value:"Introduction",id:"introduction",level:2},{value:"Getting all data",id:"getting-all-data",level:2},{value:"Getting model id",id:"getting-model-id",level:2},{value:"Getting model _id",id:"getting-model-_id",level:2},{value:"Getting a specified field",id:"getting-a-specified-field",level:2},{value:"Check if field exists",id:"check-if-field-exists",level:2},{value:"Get all data except specific fields",id:"get-all-data-except-specific-fields",level:2},{value:"Get only specific fields",id:"get-only-specific-fields",level:2},{value:"Set a specified field",id:"set-a-specified-field",level:2},{value:"Adding multiple fields",id:"adding-multiple-fields",level:2},{value:"Unset fields",id:"unset-fields",level:2},{value:"Increment a field",id:"increment-a-field",level:2},{value:"Decrement a field",id:"decrement-a-field",level:2},{value:"Original Data",id:"original-data",level:2}];function o(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"model-data",children:"Model Data"}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"As mentioned earlier, each model instance represents a document in the database, in this section we'll see how to manage and access the data of the model."}),"\n",(0,i.jsx)(n.h2,{id:"getting-all-data",children:"Getting all data"}),"\n",(0,i.jsx)(n.p,{children:"Let's take a simple example of a user model:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="src/models/user.ts"',children:'import { Model, Casts } from "@warlock.js/cascade";\r\n\r\nexport class User extends Model {\r\n\r\n  /**\r\n   * Collection name\r\n   */\r\n  public static collection = "users";\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected casts: Casts = {\r\n    name: "string",\r\n    email: "string",\r\n    password: "string",\r\n    age: "number",\r\n    isActive: "boolean",\r\n  };\r\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="src/app.ts"',children:'import { User } from "./models/user";\r\n\r\nasync function main() {\r\n    const user = await User.create({\r\n        name: "Hasan Zohdy",\r\n        email: "hassanzohdy@gmail.com",\r\n        age: 25,\r\n        isActive: true,\r\n        birthDate: new Date("1995-01-01"),\r\n    });\r\n\r\n    console.log(user.data);\r\n}\r\n\r\nmain();\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This will create a new user, and the ",(0,i.jsx)(n.code,{children:"user.data"})," will be something like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\r\n    "id": 512312,\r\n    "_id": "5f9b1b3c1b9c4e0b4c7b23a1",\r\n    "name": "Hasan Zohdy",\r\n    "email": "hassanzohdy@gmail.com",\r\n    "age": 25,\r\n    "isActive": true,\r\n    "birthDate": "1995-01-01T00:00:00.000Z",\r\n    "createdAt": "2020-10-30T12:00:00.000Z",\r\n    "updatedAt": "2020-10-30T12:00:00.000Z"\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"getting-model-id",children:"Getting model id"}),"\n",(0,i.jsxs)(n.p,{children:["To get model id, you can use the ",(0,i.jsx)(n.code,{children:"id"})," property:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"console.log(user.id); // 512312\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Be aware",type:"warning",children:(0,i.jsxs)(n.p,{children:["If you're creating a new user using the new operator, the ",(0,i.jsx)(n.strong,{children:"id"})," will be ",(0,i.jsx)(n.code,{children:"undefined"})," until you save the model."]})}),"\n",(0,i.jsx)(n.p,{children:"This id is auto generated when the model is saved for the first time, and it's a unique number for each document in the database."}),"\n",(0,i.jsx)(n.h2,{id:"getting-model-_id",children:"Getting model _id"}),"\n",(0,i.jsx)(n.p,{children:"This is the builtin MongoDB id, it's a unique string for each document in the database."}),"\n",(0,i.jsxs)(n.p,{children:["To get model _id, you can use the ",(0,i.jsx)(n.code,{children:"_id"})," property:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'console.log(user._id); // ObjectId("5f9b1b3c1b9c4e0b4c7b23a1")\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"Be aware",type:"warning",children:(0,i.jsxs)(n.p,{children:["If you're creating a new user using the new operator, the ",(0,i.jsx)(n.strong,{children:"_id"})," will be ",(0,i.jsx)(n.code,{children:"undefined"})," until you save the model."]})}),"\n",(0,i.jsx)(n.h2,{id:"getting-a-specified-field",children:"Getting a specified field"}),"\n",(0,i.jsxs)(n.p,{children:["To get a specified field, you can use the ",(0,i.jsx)(n.code,{children:"get"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'console.log(user.get("name")); // Hasan Zohdy\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If the field doesn't exist, it will return ",(0,i.jsx)(n.code,{children:"undefined"}),", you can then pass a default value as a second argument:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'console.log(user.get("name", "John Doe")); // Hasan Zohdy\r\nconsole.log(user.get("address", "John Doe")); // John Doe\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can also get the field using the dot notation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'console.log(user.get("address.city")); // Cairo\n'})}),"\n",(0,i.jsx)(n.h2,{id:"check-if-field-exists",children:"Check if field exists"}),"\n",(0,i.jsxs)(n.p,{children:["To check if a field exists, you can use the ",(0,i.jsx)(n.code,{children:"has"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'console.log(user.has("name")); // true\r\nconsole.log(user.has("address.city")); // false\n'})}),"\n",(0,i.jsx)(n.h2,{id:"get-all-data-except-specific-fields",children:"Get all data except specific fields"}),"\n",(0,i.jsxs)(n.p,{children:["To get all data except specific fields, you can use the ",(0,i.jsx)(n.code,{children:"except"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'console.log(user.except(["name", "age"]));\n'})}),"\n",(0,i.jsx)(n.p,{children:"This will return all data except the name and age fields."}),"\n",(0,i.jsx)(n.h2,{id:"get-only-specific-fields",children:"Get only specific fields"}),"\n",(0,i.jsxs)(n.p,{children:["To get only specific fields, you can use the ",(0,i.jsx)(n.code,{children:"only"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'console.log(user.only(["name", "age"]));\n'})}),"\n",(0,i.jsx)(n.h2,{id:"set-a-specified-field",children:"Set a specified field"}),"\n",(0,i.jsxs)(n.p,{children:["To set a specified field, you can use the ",(0,i.jsx)(n.code,{children:"set"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'user.set("name", "John Doe");\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can also set a field using the dot notation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'user.set("address.city", "Cairo");\n'})}),"\n",(0,i.jsx)(n.h2,{id:"adding-multiple-fields",children:"Adding multiple fields"}),"\n",(0,i.jsxs)(n.p,{children:["If you want to set multiple fields at once use ",(0,i.jsx)(n.code,{children:"merge"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'user.merge({\r\n    name: "John Doe",\r\n    age: 25,\r\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:"This will set or update the name and age fields."}),"\n",(0,i.jsx)(n.h2,{id:"unset-fields",children:"Unset fields"}),"\n",(0,i.jsxs)(n.p,{children:["To unset a field, you can use the ",(0,i.jsx)(n.code,{children:"unset"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'user.unset("name");\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can also unset a field using the dot notation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'user.unset("address.city");\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can pass as many fields as you want:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'user.unset("name", "age", "address.city");\n'})}),"\n",(0,i.jsx)(n.h2,{id:"increment-a-field",children:"Increment a field"}),"\n",(0,i.jsxs)(n.p,{children:["To increment a field, you can use the ",(0,i.jsx)(n.code,{children:"increment"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'user.increment("age");\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can also increment a field using the dot notation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'user.increment("address.apartment.number");\n'})}),"\n",(0,i.jsx)(n.p,{children:"You may also set the amount of increment:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'user.increment("age", 5);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"decrement-a-field",children:"Decrement a field"}),"\n",(0,i.jsxs)(n.p,{children:["To decrement a field, you can use the ",(0,i.jsx)(n.code,{children:"decrement"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'user.decrement("age");\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can also decrement a field using the dot notation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'user.decrement("address.apartment.number");\n'})}),"\n",(0,i.jsx)(n.p,{children:"You may also set the amount of decrement:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'user.decrement("age", 5);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"original-data",children:"Original Data"}),"\n",(0,i.jsxs)(n.p,{children:["As data is mutated during the usage of the model, the updated data are accessible via the ",(0,i.jsx)(n.code,{children:"data"})," property."]}),"\n",(0,i.jsxs)(n.p,{children:["Original data are the data that were fetched from the database or the onces that was passed to the model constructor, these data are kept untouched, and you can access them using the ",(0,i.jsx)(n.code,{children:"original"})," property:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"console.log(user.original);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var i=s(6540);const d={},a=i.createContext(d);function t(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);