"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5946],{3308:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>a});var t=n(4848),r=n(8453);const l={sidebar_position:3},o="Uploading Files",s={id:"warlock/upload/uploading-files",title:"Uploading Files",description:"Warlock has two ways to upload files, either uploading a one or more files, or uploading a chunked file.",source:"@site/docs/warlock/upload/uploading-files.mdx",sourceDirName:"warlock/upload",slug:"/warlock/upload/uploading-files",permalink:"/docs/warlock/upload/uploading-files",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"warlock",previous:{title:"Uploads configurations",permalink:"/docs/warlock/upload/configurations"},next:{title:"Deleting Files",permalink:"/docs/warlock/upload/deleting-files"}},d={},a=[{value:"Uploading Files Directly",id:"uploading-files-directly",level:3},{value:"Multipart Form Data",id:"multipart-form-data",level:3},{value:"Uploading Chunked Files",id:"uploading-chunked-files",level:2},{value:"Reuploading Chunks",id:"reuploading-chunks",level:2}];function h(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"uploading-files",children:"Uploading Files"}),"\n",(0,t.jsx)(i.p,{children:"Warlock has two ways to upload files, either uploading a one or more files, or uploading a chunked file."}),"\n",(0,t.jsx)(i.h3,{id:"uploading-files-directly",children:"Uploading Files Directly"}),"\n",(0,t.jsx)(i.p,{children:"Let's start with uploading files directly, this is the most common way to upload files, it's used to upload images, videos, documents, and other types of files."}),"\n",(0,t.jsx)(i.p,{children:"This request accepts the following request body:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"type UploadRequestBody = {\r\n  /**\r\n   * List of uploaded files\r\n   */\r\n  uploads: UploadedFile[];\r\n  /**\r\n   * Directory to upload the file to\r\n   *\r\n   * @default Current date in the format of `DD-MM-YYYY`\r\n   */\r\n  directory?: string;\r\n  /**\r\n   * Whether to generate a random name for the file or not\r\n   *\r\n   * @default false\r\n   */\r\n  random?: boolean;\r\n};\n"})}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"uploads"})," must be an array of uploaded files (Usually from the ",(0,t.jsx)(i.code,{children:"FormData"})," object)."]}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"uploads"})," input is validated using ",(0,t.jsx)(i.a,{href:"./../validation/rules/required",children:"required"})," and ",(0,t.jsx)(i.a,{href:"./../validation/rules/file",children:"file"})," rules, make sure to import them in the ",(0,t.jsx)(i.a,{href:"./../validation/configurations",children:"Validation configurations"}),"."]})}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"directory"})," input is optional, it's used to specify the directory where the file will be uploaded to, if it's not specified, the directory will be the current date in the format of ",(0,t.jsx)(i.code,{children:"DD-MM-YYYY"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["Whether ",(0,t.jsx)(i.code,{children:"directory"})," is specified or not, the file will be uploaded to the ",(0,t.jsx)(i.code,{children:"uploads"})," inside the ",(0,t.jsx)(i.strong,{children:"storage directory"}),"."]}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["For each upload request, the upload directory will be extended with ",(0,t.jsx)(i.code,{children:"hash"})," with length ",(0,t.jsx)(i.strong,{children:"64"})," directory to avoid conflicts between files with the same name."]})}),"\n",(0,t.jsx)(i.p,{children:"An example of storing the uploaded file will be:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",metastring:"{1}",children:"15 - 12 - 2023 / aDKOPQWEFVdskfwqpork312ewqdasq324aADADSF / my - image.png;\n"})}),"\n",(0,t.jsxs)(i.p,{children:["If the ",(0,t.jsx)(i.code,{children:"random"})," input is set to ",(0,t.jsx)(i.code,{children:"true"}),", the file name will be generated randomly but the file extension will be preserved."]}),"\n",(0,t.jsx)(i.h3,{id:"multipart-form-data",children:"Multipart Form Data"}),"\n",(0,t.jsxs)(i.p,{children:["Please note that for time being, this request accepts only ",(0,t.jsx)(i.code,{children:"multipart/form-data"})," content type."]}),"\n",(0,t.jsx)(i.h2,{id:"uploading-chunked-files",children:"Uploading Chunked Files"}),"\n",(0,t.jsx)(i.p,{children:"Chunked files are used to upload large files, it's used to upload videos, audio files, and other large files."}),"\n",(0,t.jsx)(i.p,{children:"The scenario here is a little bit different than the previous one, the client will send a request to upload the file."}),"\n",(0,t.jsx)(i.p,{children:"Let's see what data should be sent to the server for every chunk:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"type ChunkedUploadRequestBody = {\r\n  fileId: string;\r\n  chunkNumber: number;\r\n  chunk: UploadedFile;\r\n  fileName: string;\r\n  totalChunks: number;\r\n  currentChunkSize: number;\r\n  fileType: string;\r\n};\n"})}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"fileId"})," is a unique identifier for the file, it's generated by the client and sent with the first chunk, it's used to identify the file and store it in a temporary memory buffer."]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"chunkNumber"})," is the current chunk number, it's used to identify the chunk and store it in the correct order."]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"chunk"})," is the uploaded file chunk content itself (Uploaded file)."]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"fileName"})," is the file name, it's used to store the file in the correct order."]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"totalChunks"})," is the total number of chunks, it's used to identify the last chunk and store it in the correct order."]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"currentChunkSize"})," is the current chunk size, it's used to identify the last chunk and store it in the correct order."]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"fileType"})," is the mime type of the file."]}),"\n",(0,t.jsxs)(i.p,{children:["The server will store the file in a temporary memory buffer, and when the last chunk is uploaded, the file will be moved to the storage directory and stored in the ",(0,t.jsx)(i.code,{children:"Uploads"})," collection."]}),"\n",(0,t.jsxs)(i.p,{children:["In the last chunk, the ",(0,t.jsx)(i.a,{href:"./upload-model#upload-output",children:"Upload output"})," will be returned to the client, otherwise, it will return the chunk number."]}),"\n",(0,t.jsx)(i.h2,{id:"reuploading-chunks",children:"Reuploading Chunks"}),"\n",(0,t.jsx)(i.p,{children:"Another great feature of using chunk uploads is the ability to reupload a chunk, this is useful when the client lost the internet connection or the server is down."}),"\n",(0,t.jsx)(i.p,{children:"For each chunk uploaded file (Marked by fileId), it will be preserved from being deleted from the server for 24 hours, in simple words, the client has 24 hours to upload the entire file chunks."}),"\n",(0,t.jsxs)(i.p,{children:["Once the client uploads a chunk, the server will check if the chunk is already uploaded or not, if it's already uploaded, it will return the ",(0,t.jsx)(i.a,{href:"./upload-model#upload-output",children:"Upload output"})," to the client, otherwise, it will return the chunk number."]}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["Any chunked file that is stored in the uploads collection, it will has ",(0,t.jsx)(i.code,{children:"chunked"})," field with ",(0,t.jsx)(i.code,{children:"true"})," to indicate that this file is uploaded using chunked upload."]})})]})}function c(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>s});var t=n(6540);const r={},l=t.createContext(r);function o(e){const i=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(l.Provider,{value:i},e.children)}}}]);