"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7138],{3428:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>l,toc:()=>i});var s=n(4848),r=n(8453);const d={sidebar_position:9},o="Destroying Models",l={id:"cascade/models/destroying-models",title:"Destroying Models",description:"There are two ways to destroy a model, one when we have an instance of the model and the other when we don't.",source:"@site/docs/cascade/models/destroying-models.mdx",sourceDirName:"cascade/models",slug:"/cascade/models/destroying-models",permalink:"/docs/cascade/models/destroying-models",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"mongodb",previous:{title:"Saving Models",permalink:"/docs/cascade/models/saving-models"},next:{title:"Fetching Documents",permalink:"/docs/cascade/models/fetching-documents"}},c={},i=[{value:"Delete documents",id:"delete-documents",level:2},{value:"Destroy model",id:"destroy-model",level:2},{value:"Recycle bin",id:"recycle-bin",level:2},{value:"Restoring documents",id:"restoring-documents",level:2},{value:"Restoring multiple documents",id:"restoring-multiple-documents",level:2},{value:"Model Delete Strategies",id:"model-delete-strategies",level:2},{value:"hardDelete strategy",id:"harddelete-strategy",level:3},{value:"softDelete strategy",id:"softdelete-strategy",level:3}];function a(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"destroying-models",children:"Destroying Models"}),"\n",(0,s.jsx)(t.p,{children:"There are two ways to destroy a model, one when we have an instance of the model and the other when we don't."}),"\n",(0,s.jsx)(t.h2,{id:"delete-documents",children:"Delete documents"}),"\n",(0,s.jsxs)(t.p,{children:["If we don't care of having an instance of the model, we can use the ",(0,s.jsx)(t.code,{children:"delete"})," method to delete documents from the database."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'await User.delete({ name: "John" });\n'})}),"\n",(0,s.jsx)(t.p,{children:"This will delete all the documents that match the query and return the number of documents deleted."}),"\n",(0,s.jsxs)(t.p,{children:["If we want to delete a document using ",(0,s.jsx)(t.code,{children:"id"})," or ",(0,s.jsx)(t.code,{children:"_id"}),", simply pass the value directly to the ",(0,s.jsx)(t.code,{children:"delete"})," method."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"await User.delete(1);\n"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["Please note that ",(0,s.jsx)(t.code,{children:"_id"})," must be a string or an instance of ",(0,s.jsx)(t.code,{children:"ObjectId"})," class."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"destroy-model",children:"Destroy model"}),"\n",(0,s.jsxs)(t.p,{children:["If we already have an instance of the model we can use ",(0,s.jsx)(t.code,{children:"destroy"})," method."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import { User } from "./models/User";\r\n\r\nconst user = await User.find(1);\r\n\r\nawait user.destroy();\n'})}),"\n",(0,s.jsx)(t.p,{children:"This will delete the document from the database but you still can work with the instance of the model."}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:"If you tried to save the model after destroying it, it will throw an error."})}),"\n",(0,s.jsx)(t.h2,{id:"recycle-bin",children:"Recycle bin"}),"\n",(0,s.jsxs)(t.p,{children:["When using the ",(0,s.jsx)(t.code,{children:"destroy"})," model, by default the model is actually deleted but before that a copy of the model document is taken and moved to the trash collection. This is done to prevent accidental deletion of documents."]}),"\n",(0,s.jsxs)(t.p,{children:["The trash collection name is the model's collection name suffixed with ",(0,s.jsx)(t.code,{children:"Trash"}),". For example, if the model's collection name is ",(0,s.jsx)(t.code,{children:"users"}),", the trash collection name will be ",(0,s.jsx)(t.code,{children:"usersTrash"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"restoring-documents",children:"Restoring documents"}),"\n",(0,s.jsxs)(t.p,{children:["If documents are deleted using Recycle bin ",(0,s.jsx)(t.code,{children:"destroy"})," method, you can restore them using the ",(0,s.jsx)(t.code,{children:"restore"})," method."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"await User.restore(1);\n"})}),"\n",(0,s.jsx)(t.p,{children:"This will restore the document with the given id and return the restored document."}),"\n",(0,s.jsx)(t.h2,{id:"restoring-multiple-documents",children:"Restoring multiple documents"}),"\n",(0,s.jsxs)(t.p,{children:["If you want to restore all the documents in the trash collection, you can use the ",(0,s.jsx)(t.code,{children:"restoreAll"})," method."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const restoredUsers = await User.restoreAll();\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If you want to restore specific documents, you can pass a query to the ",(0,s.jsx)(t.code,{children:"restoreAll"})," method."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'const restoredUsers = await User.restoreAll({ name: "John" });\n'})}),"\n",(0,s.jsx)(t.h2,{id:"model-delete-strategies",children:"Model Delete Strategies"}),"\n",(0,s.jsxs)(t.p,{children:["We saw earlier the ",(0,s.jsx)(t.code,{children:"moveToTrash"})," strategy which is the default strategy. There are two other strategies that you can use."]}),"\n",(0,s.jsxs)(t.p,{children:["You can override the model's default delete strategy by setting the ",(0,s.jsx)(t.code,{children:"deleteStrategy"})," property on the model."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import { Model, ModelDeleteStrategy } from "@warlock.js/cascade";\r\n\r\nexport class User extends Model {\r\n  /**\r\n   * The collection name\r\n   */\r\n  public static collection = "users";\r\n\r\n  /**\r\n   * The delete strategy\r\n   * Delete the documents forever.\r\n   */\r\n  public static deleteStrategy = ModelDeleteStrategy.hardDelete;\r\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"harddelete-strategy",children:"hardDelete strategy"}),"\n",(0,s.jsx)(t.p,{children:"This strategy will delete the document without moving it to the trash collection, so it's gone forever."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import { Model, ModelDeleteStrategy } from "@warlock.js/cascade";\r\n\r\nexport class User extends Model {\r\n  /**\r\n   * The collection name\r\n   */\r\n  public static collection = "users";\r\n\r\n  /**\r\n   * The delete strategy\r\n   * Delete the documents forever.\r\n   */\r\n  public static deleteStrategy = ModelDeleteStrategy.hardDelete;\r\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Now whenever you call the ",(0,s.jsx)(t.code,{children:"destroy"})," method, the document will be deleted forever."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"await User.find(1).destroy();\n"})}),"\n",(0,s.jsx)(t.h3,{id:"softdelete-strategy",children:"softDelete strategy"}),"\n",(0,s.jsxs)(t.p,{children:["This strategy will add a ",(0,s.jsx)(t.code,{children:"deletedAt"})," field to the document and set it to the current date and time. This field will be used to determine if the document is deleted or not."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import { Model, ModelDeleteStrategy } from "@warlock.js/cascade";\r\n\r\nexport class User extends Model {\r\n  /**\r\n   * The collection name\r\n   */\r\n  public static collection = "users";\r\n\r\n  /**\r\n   * The delete strategy\r\n   * Delete the documents forever.\r\n   */\r\n  public static deleteStrategy = ModelDeleteStrategy.softDelete;\r\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Now whenever you call the ",(0,s.jsx)(t.code,{children:"destroy"})," method, the document will be soft deleted."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["You can use the ",(0,s.jsx)(t.code,{children:"restore"})," and ",(0,s.jsx)(t.code,{children:"restoreAll"})," methods to restore the documents, this will remove the ",(0,s.jsx)(t.code,{children:"deletedAt"})," field from the documents."]})}),"\n",(0,s.jsxs)(t.p,{children:["Now whenever you use any ",(0,s.jsx)(t.a,{href:"./fetching-documents",children:"listing method"})," the soft deleted documents will be excluded from the results."]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["If you want to include the deleted documents in your results, pass ",(0,s.jsx)(t.code,{children:"withDeleted"})," option to the listing filters with ",(0,s.jsx)(t.code,{children:"true"})," value."]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"// fetch all users including the deleted ones\r\nawait User.list({ withDeleted: true });\r\n\r\n// fetch all users excluding the deleted ones\r\nawait User.list();\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var s=n(6540);const r={},d=s.createContext(r);function o(e){const t=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(d.Provider,{value:t},e.children)}}}]);