"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[2472],{2719:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>i});var r=n(4848),s=n(5680);const o={sidebar_position:7},d="Embedded documents",a={id:"cascade/models/embedded-documents",title:"Embedded documents",description:"Introduction",source:"@site/docs/cascade/models/embedded-documents.mdx",sourceDirName:"cascade/models",slug:"/cascade/models/embedded-documents",permalink:"/docs/cascade/models/embedded-documents",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"mongodb",previous:{title:"Model Data",permalink:"/docs/cascade/models/model-data"},next:{title:"Saving Models",permalink:"/docs/cascade/models/saving-models"}},c={},i=[{value:"Introduction",id:"introduction",level:2},{value:"Embedded data",id:"embedded-data",level:2},{value:"Defining what data to be embedded",id:"defining-what-data-to-be-embedded",level:2},{value:"Using embedded property.",id:"using-embedded-property",level:2},{value:"Embed documents except timestamps",id:"embed-documents-except-timestamps",level:2},{value:"Embed all data except",id:"embed-all-data-except",level:2},{value:"Default embedded data",id:"default-embedded-data",level:2},{value:"Documents Association",id:"documents-association",level:2},{value:"Re-associate documents",id:"re-associate-documents",level:2},{value:"Disassociate documents",id:"disassociate-documents",level:2}];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.RP)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"embedded-documents",children:"Embedded documents"}),"\n",(0,r.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(t.p,{children:"MongoDB flexibility allows us to store documents inside other documents. This is called embedded documents. In this section, we will learn how to use embedded documents using Cascade."}),"\n",(0,r.jsx)(t.h2,{id:"embedded-data",children:"Embedded data"}),"\n",(0,r.jsx)(t.p,{children:"Let's take a simple example of a category model:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/models/category.ts"',children:'import { Model, Casts } from "@warlock.js/cascade";\r\n\r\nexport class Category extends Model {\r\n\r\n  /**\r\n   * Collection name\r\n   */\r\n  public static collection = "categories";\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected casts: Casts = {\r\n    name: "string",\r\n    isActive: "boolean",\r\n  };\r\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"This category model has a simple structure, let's create a new category:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/app.ts"',children:'import { Category } from "./models/category";\r\n\r\nasync function main() {\r\n    const category = await Category.create({\r\n        name: "Sports",\r\n        isActive: true,\r\n    });\r\n\r\n    console.log(category.data);\r\n}\r\n\r\nmain();\n'})}),"\n",(0,r.jsxs)(t.p,{children:["This will create a new category, and the ",(0,r.jsx)(t.code,{children:"category.data"})," will be something like this:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\r\n    "id": 512312,\r\n    "_id": "5f9b1b3c1b9c4e0b4c7b23a1",\r\n    "name": "Sports",\r\n    "isActive": true,\r\n    "createdAt": "2020-10-30T12:00:00.000Z",\r\n    "updatedAt": "2020-10-30T12:00:00.000Z"\r\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"The category that we created we need to embed it into our post model."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/models/post.ts"',children:'import { Model, Casts, castModel } from "@warlock.js/cascade";\r\nimport { Category } from "./category";\r\n\r\nexport class Post extends Model {\r\n\r\n  /**\r\n   * Collection name\r\n   */\r\n  public static collection = "posts";\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected casts: Casts = {\r\n    title: "string",\r\n    content: "string",\r\n    category: castModel(Category),\r\n  };\r\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Now we can create a new post and embed the category into it:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/app.ts"',children:'import { Post } from "./models/post";\r\n\r\nasync function main() {\r\n    const post = await Post.create({\r\n        title: "Hello world",\r\n        content: "This is my first post",\r\n        category: 512312,\r\n    });\r\n\r\n    console.log(post.data);\r\n}\r\n\r\nmain();\n'})}),"\n",(0,r.jsx)(t.p,{children:"The output will be something like this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\r\n    "id": 512312,\r\n    "_id": "5f9b1b3c1b9c4e0b4c7b23a1",\r\n    "title": "Hello world",\r\n    "content": "This is my first post",\r\n    "category": {\r\n        "id": 512312,\r\n        "_id": "5f9b1b3c1b9c4e0b4c7b23a1",\r\n        "name": "Sports",\r\n        "isActive": true,\r\n        "createdAt": "2020-10-30T12:00:00.000Z",\r\n        "updatedAt": "2020-10-30T12:00:00.000Z"\r\n    },\r\n    "createdAt": "2020-10-30T12:00:00.000Z",\r\n    "updatedAt": "2020-10-30T12:00:00.000Z"\r\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The data of the injected category has some redundant fields such as ",(0,r.jsx)(t.code,{children:"_id"}),", ",(0,r.jsx)(t.code,{children:"createdAt"}),", and ",(0,r.jsx)(t.code,{children:"updatedAt"}),". In that sense, we can specify what data to be embedded from the category model:"]}),"\n",(0,r.jsx)(t.h2,{id:"defining-what-data-to-be-embedded",children:"Defining what data to be embedded"}),"\n",(0,r.jsxs)(t.p,{children:["Now we illustrated the problem, let's see how to solve it, when we want to specify what data to be embedded when the model is going to be embedded in another document, we can define the getter property ",(0,r.jsx)(t.code,{children:"embeddedData"})," in the category model:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/models/category.ts" ',children:'import { Model, Casts } from "@warlock.js/cascade";\r\n\r\nexport class Category extends Model {\r\n\r\n  /**\r\n   * Collection name\r\n   */\r\n  public static collection = "categories";\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected casts: Casts = {\r\n    name: "string",\r\n    isActive: "boolean",\r\n  };\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  public get embeddedData() {\r\n    return this.only([\'id\', \'name\']);\r\n  }\r\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Now when we create a new post, the category data will be something like this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\r\n    "id": 512312,\r\n    "_id": "5f9b1b3c1b9c4e0b4c7b23a1",\r\n    "title": "Hello world",\r\n    "content": "This is my first post",\r\n    "category": {\r\n        "id": 512312,\r\n        "name": "Sports",\r\n    },\r\n    "createdAt": "2020-10-30T12:00:00.000Z",\r\n    "updatedAt": "2020-10-30T12:00:00.000Z"\r\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"This makes the data more clean and readable and most important we added only what we need."}),"\n",(0,r.jsx)(t.h2,{id:"using-embedded-property",children:"Using embedded property."}),"\n",(0,r.jsxs)(t.p,{children:["Mongez ",(0,r.jsx)(t.code,{children:"Model"})," class already implemented the ",(0,r.jsx)(t.code,{children:"embeddedData"})," for you, to make it easier we can define the ",(0,r.jsx)(t.code,{children:"embedded"})," property that receives the array of fields that we need to embed:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/models/category.ts"',children:'import { Model, Casts } from "@warlock.js/cascade";\r\n\r\nexport class Category extends Model {\r\n\r\n  /**\r\n   * Collection name\r\n   */\r\n  public static collection = "categories";\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected casts: Casts = {\r\n    name: "string",\r\n    isActive: "boolean",\r\n  };\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  public embedded = [\'id\', \'name\'];\r\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["This is the same as defining the ",(0,r.jsx)(t.code,{children:"embeddedData"})," getter property but in a more readable and simpler way."]}),"\n",(0,r.jsx)(t.h2,{id:"embed-documents-except-timestamps",children:"Embed documents except timestamps"}),"\n",(0,r.jsxs)(t.p,{children:["When we embed a document, we don't need to embed the timestamps,  To exclude the timestamps from the embedded document, we can use the ",(0,r.jsx)(t.code,{children:"embedAllExceptTimestampsAndUserColumns"})," property:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/models/category.ts"',children:'import { Model, Casts } from "@warlock.js/cascade";\r\n\r\nexport class Category extends Model {\r\n\r\n  /**\r\n   * Collection name\r\n   */\r\n  public static collection = "categories";\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected casts: Casts = {\r\n    name: "string",\r\n    isActive: "boolean",\r\n  };\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  public embedAllExceptTimestampsAndUserColumns = true;\r\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"embed-all-data-except",children:"Embed all data except"}),"\n",(0,r.jsxs)(t.p,{children:["We can also exclude only some fields from the embedded document, to do that we can use the ",(0,r.jsx)(t.code,{children:"embedAllExcept"})," property:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/models/category.ts"',children:'import { Model, Casts } from "@warlock.js/cascade";\r\n\r\nexport class Category extends Model {\r\n\r\n  /**\r\n   * Collection name\r\n   */\r\n  public static collection = "categories";\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected casts: Casts = {\r\n    name: "string",\r\n    isActive: "boolean",\r\n  };\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  public embedAllExcept = [\'isActive\'];\r\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"default-embedded-data",children:"Default embedded data"}),"\n",(0,r.jsx)(t.p,{children:"If none of the above embedded data properties are defined, then the default embedded data will be the entire document data."}),"\n",(0,r.jsx)(t.admonition,{title:"DO NOT DO THIS",type:"warning",children:(0,r.jsx)(t.p,{children:"It's highly recommended to define the embedded data to avoid embedding the entire document data, this will cause a huge performance issue and the database size will increase dramatically."})}),"\n",(0,r.jsx)(t.h2,{id:"documents-association",children:"Documents Association"}),"\n",(0,r.jsxs)(t.p,{children:["Let's say we have a post, with list of comments, we need to add the comment to the post's comments list, we can do this using ",(0,r.jsx)(t.code,{children:"associate"})," method."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/app.ts"',children:'import { Post } from "./models/post";\r\nimport { Comment } from "./models/comment";\r\n\r\nconst post = await Post.first();\r\n\r\nconst comment = await Comment.create({\r\n    content: "This is my first comment",\r\n    post: post.only([\'id\']),\r\n});\r\n\r\npost.associate(\'comments\', comment);\r\n\r\nawait post.save();\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"associate"})," method will add the comment to the post's comments list, and save the post."]}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["If the second argument is an instance of model, then the ",(0,r.jsx)(t.code,{children:"associate"})," method will use the ",(0,r.jsx)(t.code,{children:"embeddedData"})," property to embed the document."]})}),"\n",(0,r.jsx)(t.p,{children:"To add certain fields, you must pass a plain object instead:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/app.ts"',children:"post.associate('comments', comment.only(['id', 'content']));\r\n\r\n// or using plain object\r\npost.associate('comments', comment.embedToPost); // you need to define it in the comment model\n"})}),"\n",(0,r.jsx)(t.h2,{id:"re-associate-documents",children:"Re-associate documents"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"associate"})," method works only when we need to add new document to the list, but what if we need to update the comment inside the post's comments list? we can use the ",(0,r.jsx)(t.code,{children:"reAssociate"})," method:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/app.ts"',children:"const comment = await Comment.first();\r\n\r\npost.reassociate('comments', comment);\r\n\r\nawait post.save();\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["You can use the ",(0,r.jsx)(t.code,{children:"reassociate"})," method to add new document to the list, but it's recommended to use the ",(0,r.jsx)(t.code,{children:"associate"})," method instead."]})}),"\n",(0,r.jsx)(t.h2,{id:"disassociate-documents",children:"Disassociate documents"}),"\n",(0,r.jsxs)(t.p,{children:["If you want to pull a document from the list, you can use the ",(0,r.jsx)(t.code,{children:"disassociate"})," method:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/app.ts"',children:"const comment = await Comment.first();\r\n\r\npost.disassociate('comments', comment);\r\n\r\nawait post.save();\n"})})]})}function m(e={}){const{wrapper:t}={...(0,s.RP)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},5680:(e,t,n)=>{n.d(t,{RP:()=>i});var r=n(6540);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),p=i(n),h=s,u=p["".concat(c,".").concat(h)]||p[h]||l[h]||o;return n?r.createElement(u,d(d({ref:t},m),{},{components:n})):r.createElement(u,d({ref:t},m))}));m.displayName="MDXCreateElement"}}]);