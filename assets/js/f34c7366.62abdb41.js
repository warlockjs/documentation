"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[5810],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=i,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6169:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:3},l="Validation Rules",o={unversionedId:"warlock/validation/validation-rules",id:"warlock/validation/validation-rules",title:"Validation Rules",description:"Validation rules are used to validate the request input, it's used to validate the request body, query, and params.",source:"@site/docs/warlock/validation/validation-rules.mdx",sourceDirName:"warlock/validation",slug:"/warlock/validation/validation-rules",permalink:"/docs/warlock/validation/validation-rules",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"warlock",previous:{title:"Validation Configurations",permalink:"/docs/warlock/validation/configurations"},next:{title:"Validation Schema",permalink:"/docs/warlock/validation/validation-schema"}},s={},u=[{value:"How it works",id:"how-it-works",level:2},{value:"Example",id:"example",level:2},{value:"Defining Validation Rules",id:"defining-validation-rules",level:2},{value:"Using Rule Object",id:"using-rule-object",level:2},{value:"Validation Rules List",id:"validation-rules-list",level:2},{value:"Create Your Own Validation Rule",id:"create-your-own-validation-rule",level:2},{value:"Passing options to validation rules",id:"passing-options-to-validation-rules",level:2},{value:"Validation error messages",id:"validation-error-messages",level:2},{value:"]Default error messages",id:"default-error-messages",level:3},{value:"Translated input names",id:"translated-input-names",level:2}],p={toc:u},d="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"validation-rules"},"Validation Rules"),(0,i.kt)("p",null,"Validation rules are used to validate the request input, it's used to validate the request body, query, and params."),(0,i.kt)("h2",{id:"how-it-works"},"How it works"),(0,i.kt)("p",null,"Each handler can have special property called ",(0,i.kt)("inlineCode",{parentName:"p"},"validation"),", this property is an object that has two keys:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rules"),": An object of validation rules."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"validate"),": ",(0,i.kt)("a",{parentName:"li",href:"./custom-validator"},"A Custom validator"))),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's take an example of validating the login request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/auth/login.ts"',title:'"src/app/users/controllers/auth/login.ts"'},'import { Request, Response } from "@warlock.js/core";\nimport { User } from "app/users/models/user";\n\nexport default async function login(request: Request, response: Response) {\n  // do logic here\n}\n\nlogin.validation = {\n  rules: {\n    email: ["required", "email"],\n    password: ["required", "string"],\n  },\n};\n')),(0,i.kt)("p",null,"In our previous handler, we added ",(0,i.kt)("inlineCode",{parentName:"p"},"login.validation"),", the validator object with ",(0,i.kt)("inlineCode",{parentName:"p"},"rules")," object."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"rules")," object has two keys ",(0,i.kt)("strong",{parentName:"p"},"email")," and ",(0,i.kt)("strong",{parentName:"p"},"password"),", each key has an array of validation rules."),(0,i.kt)("h2",{id:"defining-validation-rules"},"Defining Validation Rules"),(0,i.kt)("p",null,"There are two ways to use validation rules, either by passing the validation rule name as a string, or by passing a rule object."),(0,i.kt)("p",null,"All validation rules has its own name, but it must be defined in the ",(0,i.kt)("a",{parentName:"p",href:"./configurations"},"Validation configurations"),". under the rules object."),(0,i.kt)("p",null,"Each key inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"rules")," object will be used as the rule name indicator, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  EmailRule,\n  InRule,\n  LengthRule,\n  MaxLengthRule,\n  MinLengthRule,\n  RequiredRule,\n  StringRule,\n  ValidationConfigurations,\n} from "@warlock.js/core";\n\nconst validationConfigurations: ValidationConfigurations = {\n  rules: {\n    required: RequiredRule,\n    string: StringRule,\n    in: InRule,\n    minLength: MinLengthRule,\n    length: LengthRule,\n    maxLength: MaxLengthRule,\n    email: EmailRule,\n  },\n  // ...\n};\n\nexport default validationConfigurations;\n')),(0,i.kt)("p",null,"In the previous example, we defined the validation rules that we will use in our application."),(0,i.kt)("p",null,"So to use the Email rule for instance, it is mapped with ",(0,i.kt)("inlineCode",{parentName:"p"},"email")," key, so we can use it as a string:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{3}","{3}":!0},'login.validation = {\n  rules: {\n    email: ["required", "email"],\n    password: ["required", "string"],\n  },\n};\n')),(0,i.kt)("h2",{id:"using-rule-object"},"Using Rule Object"),(0,i.kt)("p",null,"Another way to use the validation rules is by passing the rule object instead of the rule name, mostly this is used with ",(0,i.kt)("a",{parentName:"p",href:"./rules/unique"},"UniqueRule")," and ",(0,i.kt)("a",{parentName:"p",href:"./rules/exists"},"ExistsRule"),"."),(0,i.kt)("p",null,"For example, let's consider the following example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { ExistsRule } from "@warlock.js/core";\nimport { User } from "app/users/models/user";\n\nlogin.validation = {\n  rules: {\n    email: ["required", "email", new ExistsRule(User)],\n    password: ["required", "string"],\n  },\n};\n')),(0,i.kt)("p",null,"In the previous example, we used the ",(0,i.kt)("inlineCode",{parentName:"p"},"ExistsRule")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model, so the rule will check if the user exists in the database or not."),(0,i.kt)("h2",{id:"validation-rules-list"},"Validation Rules List"),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"Warlock")," is shipped with ",(0,i.kt)("inlineCode",{parentName:"p"},"+30")," validation rules."),(0,i.kt)("p",null,"To see the full list of validation rules, please head to ",(0,i.kt)("a",{parentName:"p",href:"./rules/rules-list"},"Validation Rules List"),"."),(0,i.kt)("h2",{id:"create-your-own-validation-rule"},"Create Your Own Validation Rule"),(0,i.kt)("p",null,"You can create your own validation rule, please head to ",(0,i.kt)("a",{parentName:"p",href:"./rules/create-your-own-rule"},"Create Your Own Validation Rule"),"."),(0,i.kt)("h2",{id:"passing-options-to-validation-rules"},"Passing options to validation rules"),(0,i.kt)("p",null,"Any validation rule can receive options (if the rule requires that) by adding ",(0,i.kt)("inlineCode",{parentName:"p"},":")," after the rule name, and passing the options as a string."),(0,i.kt)("p",null,"For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"minLength")," requires a value to be passed, so we can pass it like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'login.validation = {\n  rules: {\n    email: ["required", "email"],\n    password: ["required", "string", "minLength:8"],\n  },\n};\n')),(0,i.kt)("p",null,"To set the options using Rule object,pass an array of options to ",(0,i.kt)("inlineCode",{parentName:"p"},"setOptions")," method."),(0,i.kt)("p",null,"For example, let's consider the following example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { MinLengthRule } from "@warlock.js/core";\n\nlogin.validation = {\n  rules: {\n    email: ["required", "email"],\n    password: ["required", "string", new MinLengthRule().setOptions([8])],\n  },\n};\n')),(0,i.kt)("h2",{id:"validation-error-messages"},"Validation error messages"),(0,i.kt)("p",null,"All validation rules are stored under ",(0,i.kt)("inlineCode",{parentName:"p"},"validation")," group name, by default it supports ",(0,i.kt)("inlineCode",{parentName:"p"},"English")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Arabic")," languages, you can however add your own language."),(0,i.kt)("h3",{id:"default-error-messages"},"]Default error messages"),(0,i.kt)("p",null,"To override an error message from the default messages, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"groupedTranslations")," function, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/general/utils/locales.ts"',title:'"src/app/general/utils/locales.ts"'},'import { groupedTranslation } from "@mongez/localization";\n\ngroupedTranslation("validation", {\n  required: {\n    en: ":input is mandatory",\n    ar: "\u064a\u062c\u0628 \u0627\u0646 \u064a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0642\u064a\u0645\u0629 :input",\n  },\n});\n')),(0,i.kt)("h2",{id:"translated-input-names"},"Translated input names"),(0,i.kt)("p",null,"Let's say our current app locale code is ",(0,i.kt)("inlineCode",{parentName:"p"},"ar")," which is Arabic, now we want to return an error for ",(0,i.kt)("inlineCode",{parentName:"p"},"firstName")," that indicates it is required which is defined in the validation as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'groupedTranslation("validation", {\n  required: {\n    en: ":input is required",\n    ar: "\u0645\u0637\u0644\u0648\u0628 :input",\n  },\n});\n')))}c.isMDXComponent=!0}}]);