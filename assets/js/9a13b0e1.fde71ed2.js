"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[2148],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=d(n),u=l,g=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(g,r(r({ref:t},p),{},{components:n})):a.createElement(g,r({ref:t},p))}));function g(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:l,r[1]=i;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8636:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=n(7462),l=(n(7294),n(3905));const o={sidebar_position:3,title:"Model Events"},r=void 0,i={unversionedId:"monpulse/events/model-events",id:"monpulse/events/model-events",title:"Model Events",description:"Introduction",source:"@site/docs/monpulse/events/model-events.mdx",sourceDirName:"monpulse/events",slug:"/monpulse/events/model-events",permalink:"/mongez/docs/monpulse/events/model-events",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Model Events"},sidebar:"mongodb",previous:{title:"Query Events",permalink:"/mongez/docs/monpulse/events/query-events"},next:{title:"Aggregate Events",permalink:"/mongez/docs/monpulse/events/aggregate-events"}},s={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Accessing Model Events",id:"accessing-model-events",level:2},{value:"Types of Events",id:"types-of-events",level:2},{value:"Scopes of Events",id:"scopes-of-events",level:2},{value:"Self Events",id:"self-events",level:2},{value:"Model Events",id:"model-events",level:2},{value:"Global Events",id:"global-events",level:2},{value:"The Events Manager",id:"the-events-manager",level:2},{value:"Event Payload",id:"event-payload",level:2}],p={toc:d},m="wrapper";function c(e){let{components:t,...n}=e;return(0,l.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"Model events are crucial in any application or complex package as they help manage the flow of your application and make your code more readable and maintainable."),(0,l.kt)("h2",{id:"accessing-model-events"},"Accessing Model Events"),(0,l.kt)("p",null,"To access the Model events manager, call the ",(0,l.kt)("inlineCode",{parentName:"p"},"events()")," method on the Model class ",(0,l.kt)("inlineCode",{parentName:"p"},"(not the instance)"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app.ts"',title:'"src/app.ts"'},'import { User } from "./models/user";\n\nUser.events().onSaving((user) => {\n  // do something\n});\n')),(0,l.kt)("h2",{id:"types-of-events"},"Types of Events"),(0,l.kt)("p",null,"There are ",(0,l.kt)("strong",{parentName:"p"},"8")," types of events that could be triggered for a model:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onCreating(model: Model)"),": Called before creating a new document."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onCreated(model: Model)"),": Called after creating a new document."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onUpdating(model: Model, oldModel: Model)"),": Called before updating a document."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onUpdated(model: Model, oldModel: Model)"),": Called after updating a document."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onSaving(model: Model, oldModel?: Model)"),": Called before saving a document, this event is triggered before creating or updating a document."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onSaved(model: Model, oldModel?: Model)"),": Called after saving a document, this event is triggered after creating or updating a document."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onDeleting(model: Model)"),": Called before deleting a document."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onDeleted(model: Model)"),": Called after deleting a document.")),(0,l.kt)("p",null,"These ",(0,l.kt)("strong",{parentName:"p"},"8")," events are triggered in three scopes."),(0,l.kt)("p",null,"All scopes has the same method name."),(0,l.kt)("h2",{id:"scopes-of-events"},"Scopes of Events"),(0,l.kt)("p",null,"There are three scopes of events in Monpulse ",(0,l.kt)("strong",{parentName:"p"},"(Ordered by the order of triggering)")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Self Events"),": These events are callbacks that being called inside the model itself."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Model Events"),": These events are triggered for a specific model."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Global Events"),": These events are triggered for all models.")),(0,l.kt)("h2",{id:"self-events"},"Self Events"),(0,l.kt)("p",null,"The self events are ",(0,l.kt)("inlineCode",{parentName:"p"},"methods")," inside the model itself that can be called, in real world apps, they are not that much of usage, but they could be handy in some situations."),(0,l.kt)("p",null,"Here are the available self events:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onCreating"),": Called before creating a new document."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onCreated"),": Called after creating a new document."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onUpdating"),": Called before updating a document."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onUpdated"),": Called after updating a document."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onSaving"),": Called before saving a document, this event is triggered before creating or updating a document."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onSaved"),": Called after saving a document, this event is triggered after creating or updating a document."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onDeleting"),": Called before deleting a document."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onDeleted"),": Called after deleting a document.")),(0,l.kt)("p",null,"These events are the first events triggered before the other scopes."),(0,l.kt)("p",null,"An example of usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/models/user.ts"',title:'"src/models/user.ts"'},'import { Model } from "@mongez/monpulse";\n\nexport class User extends Model {\n  // ...\n\n  /**\n   * {@inheritdoc}\n   */\n  protected onCreating() {\n    // do something\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  protected onCreated() {\n    // do something\n  }\n}\n')),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Please note that all of these methods should be ",(0,l.kt)("inlineCode",{parentName:"p"},"protected")," methods.")),(0,l.kt)("h2",{id:"model-events"},"Model Events"),(0,l.kt)("p",null,"Model events are triggered whenever a model is triggering the event, their order of the trigger are the second ones to be triggered."),(0,l.kt)("p",null,"This second type is mainly the most used one, as it is the most common one to be used in real world apps."),(0,l.kt)("p",null,"An example of usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app.ts"',title:'"src/app.ts"'},'import { User } from "./models/user";\n\nUser.events()\n  .onCreating((user) => {\n    // do something\n  })\n  .onCreated((user) => {\n    // do something\n  });\n')),(0,l.kt)("p",null,"All events methods are chainable, so you can chain as many events as you want."),(0,l.kt)("h2",{id:"global-events"},"Global Events"),(0,l.kt)("p",null,"Global events are triggered whenever a model is triggering the event, their order of the trigger are the last ones to be triggered."),(0,l.kt)("p",null,"This also could be a good one as well for real world apps."),(0,l.kt)("p",null,"An example of usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app.ts"',title:'"src/app.ts"'},'import { Model } from "@mongez/monpulse";\n\nModel.events()\n  .onCreating((model) => {\n    // do something\n  })\n  .onCreated((model) => {\n    // do something\n  });\n')),(0,l.kt)("p",null,"All events methods are chainable, so you can chain as many events as you want."),(0,l.kt)("h2",{id:"the-events-manager"},"The Events Manager"),(0,l.kt)("p",null,"The second and third scopes have a ",(0,l.kt)("inlineCode",{parentName:"p"},"EventManager"),", each ",(0,l.kt)("inlineCode",{parentName:"p"},"Model")," or even the ",(0,l.kt)("inlineCode",{parentName:"p"},"Model")," class itself has its own ",(0,l.kt)("inlineCode",{parentName:"p"},"EventManager")," and they are all singletons, so you can call them multiple times with no worries."),(0,l.kt)("h2",{id:"event-payload"},"Event Payload"),(0,l.kt)("p",null,"Let's take a quick look about what data are passed into the event callback."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onCreating"),": this event receives the model instance."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onCreated"),": this event receives the model instance."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onUpdating"),": this event receives the model instance and a clone of model instance with ",(0,l.kt)("inlineCode",{parentName:"li"},"old data"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onUpdated"),": this event receives the model instance and a clone of model instance with ",(0,l.kt)("inlineCode",{parentName:"li"},"old data"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onSaving"),": this event receives the model instance and, optionally, a clone of model instance with ",(0,l.kt)("inlineCode",{parentName:"li"},"old data"),", if the second parameter is passed, it means that the model is being updated, otherwise it is being created."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onSaved"),": this event receives the model instance and, optionally, a clone of model instance with ",(0,l.kt)("inlineCode",{parentName:"li"},"old data"),", if the second parameter is passed, it means that the model is being updated, otherwise it is being created."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onDeleting"),": this event receives the model instance."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"onDeleted"),": this event receives the model instance.")))}c.isMDXComponent=!0}}]);