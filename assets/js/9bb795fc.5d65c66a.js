"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[8738],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:o,a[1]=i;for(var u=2;u<s;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8871:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const s={sidebar_position:4},a="Auth Model",i={unversionedId:"warlock/auth/auth-model",id:"warlock/auth/auth-model",title:"Auth Model",description:"Auth model is an abstract class that is used for generating and validating access tokens.",source:"@site/docs/warlock/auth/auth-model.mdx",sourceDirName:"warlock/auth",slug:"/warlock/auth/auth-model",permalink:"/documentation/docs/warlock/auth/auth-model",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"warlock",previous:{title:"Auth configurations",permalink:"/documentation/docs/warlock/auth/configurations"},next:{title:"Guests",permalink:"/documentation/docs/warlock/auth/guests"}},l={},u=[{value:"Extending Auth Model",id:"extending-auth-model",level:2},{value:"Generate Access Token",id:"generate-access-token",level:2},{value:"Verifying user credentials",id:"verifying-user-credentials",level:2},{value:"Login Example",id:"login-example",level:2},{value:"Removing Access Token",id:"removing-access-token",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"auth-model"},"Auth Model"),(0,o.kt)("p",null,"Auth model is an ",(0,o.kt)("inlineCode",{parentName:"p"},"abstract")," class that is used for generating and validating access tokens."),(0,o.kt)("h2",{id:"extending-auth-model"},"Extending Auth Model"),(0,o.kt)("p",null,"The primary use case for extending the auth model is to manage access tokens and password."),(0,o.kt)("h2",{id:"generate-access-token"},"Generate Access Token"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model that extends the ",(0,o.kt)("inlineCode",{parentName:"p"},"Auth")," model can use ",(0,o.kt)("inlineCode",{parentName:"p"},"generateAccessToken")," when the user logs in."),(0,o.kt)("h2",{id:"verifying-user-credentials"},"Verifying user credentials"),(0,o.kt)("p",null,"To verify the user credentials, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"attempt")," method from ",(0,o.kt)("inlineCode",{parentName:"p"},"Auth")," model."),(0,o.kt)("p",null,"This method accepts an object that will be used to fetch the user from the database, the only required key in the object is the ",(0,o.kt)("inlineCode",{parentName:"p"},"password")," that will not be used to fetch the user, but will be used to verify the user password."),(0,o.kt)("h2",{id:"login-example"},"Login Example"),(0,o.kt)("p",null,"Consider the following example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{7,24} title="src/app/users/controllers/login.ts"',"{7,24}":!0,title:'"src/app/users/controllers/login.ts"'},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport default async function login(request: Request, response: Response) {\n  const user: User = request.user;\n\n  const token = await user.generateAccessToken();\n\n  return response.success({\n    user: {\n      accessToken: token,\n      ...(await user.toJSON()),\n    },\n  });\n}\n\nlogin.validation = {\n  rules: {\n    email: ["required", "email"],\n    password: ["required"],\n  },\n  validate: async (request: Request, response: Response) => {\n    // verify the user credentials\n    const user = await User.attempt(request.only(["email", "password"]));\n\n    if (!user) {\n      return response.badRequest({\n        error: "Invalid credentials",\n      });\n    }\n\n    if (!user.isActive) {\n      return response.badRequest({\n        error: "Your account is not active",\n      });\n    }\n\n    request.user = user;\n  },\n};\n')),(0,o.kt)("p",null,"We started the ",(0,o.kt)("inlineCode",{parentName:"p"},"validate")," method by verifying the user credentials using ",(0,o.kt)("inlineCode",{parentName:"p"},"User.attempt")," method, this method will return ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," if the user is not found or the password is incorrect."),(0,o.kt)("p",null,"If the user is found, we check if the user is active, if not, we return an error."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This is an optional step based on your application logic.")),(0,o.kt)("h2",{id:"removing-access-token"},"Removing Access Token"),(0,o.kt)("p",null,"This will be handy in the ",(0,o.kt)("inlineCode",{parentName:"p"},"logout")," request, so we can remove the access token from the database."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{7} title="src/app/users/controllers/logout.ts"',"{7}":!0,title:'"src/app/users/controllers/logout.ts"'},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport default async function logout(\n  request: Request<User>,\n  response: Response\n) {\n  const user: User = request.user;\n\n  await user.removeAccessToken();\n\n  delete request.user;\n\n  return response.success();\n}\n')))}d.isMDXComponent=!0}}]);