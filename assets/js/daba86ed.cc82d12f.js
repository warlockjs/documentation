"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7448],{2117:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>u});var n=t(4848),r=t(8453);const i={sidebar_position:1},o="Introduction",a={id:"cascade/queries/introduction",title:"Introduction",description:"Queries over MongoDB has many types, but in this section we will work with the most common ones.",source:"@site/docs/cascade/queries/introduction.mdx",sourceDirName:"cascade/queries",slug:"/cascade/queries/introduction",permalink:"/docs/cascade/queries/introduction",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"mongodb",previous:{title:"Queries",permalink:"/docs/category/queries"},next:{title:"Listing Documents",permalink:"/docs/cascade/queries/listing-documents"}},c={},u=[{value:"Query Manager",id:"query-manager",level:2},{value:"Basic Usage",id:"basic-usage",level:2}];function l(e){const s={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsx)(s.p,{children:"Queries over MongoDB has many types, but in this section we will work with the most common ones."}),"\n",(0,n.jsx)(s.h2,{id:"query-manager",children:"Query Manager"}),"\n",(0,n.jsx)(s.p,{children:"This is basically the underlying class for other higher levels such as Models and Aggregate framework, so let's see how this work in a nutshell."}),"\n",(0,n.jsx)(s.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,n.jsx)(s.p,{children:"By default Cascade is shipped with an instance of the query manager, you can import it directly from the package."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app.ts"',children:'import { query } from "@warlock.js/cascade";\r\n\r\nconst users = await query.list("users");\n'})}),"\n",(0,n.jsx)(s.p,{children:"This will return all users in the database, but you can pass a query object to filter the results."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app.ts"',children:'import { query } from "@warlock.js/cascade";\r\n\r\nconst users = await query.list("users", {\r\n    name: "John",\r\n});\n'})}),"\n",(0,n.jsx)(s.p,{children:"In that sense we can conclude that any query you want to use receives the first argument as the collection name, and rest of arguments depends on the method arguments itself."}),"\n",(0,n.jsxs)(s.p,{children:["In the next sections, we will see each operation of the ",(0,n.jsx)(s.code,{children:"CRUD"})," operations in details."]})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>a});var n=t(6540);const r={},i=n.createContext(r);function o(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);