"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[6278],{4785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var o=n(4848),i=n(5680);const s={sidebar_position:1},r="Introduction",d={id:"cascade/relationships/introduction",title:"Introduction",description:"Embedding documents inside another documents is a core feature of MongoDB, and it is very useful when you want to store related data in the same document. This is a very common practice in MongoDB, and it is called Embedded Relationships.",source:"@site/docs/cascade/relationships/introduction.mdx",sourceDirName:"cascade/relationships",slug:"/cascade/relationships/introduction",permalink:"/docs/cascade/relationships/introduction",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"mongodb",previous:{title:"Relationships",permalink:"/docs/category/relationships"},next:{title:"Embedded Documents",permalink:"/docs/cascade/relationships/embedded-documents"}},a={},c=[{value:"Embedding Documents",id:"embedding-documents",level:2},{value:"Syncing Models",id:"syncing-models",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",...(0,i.RP)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(t.p,{children:["Embedding documents inside another documents is a core feature of MongoDB, and it is very useful when you want to store related data in the same document. This is a very common practice in MongoDB, and it is called ",(0,o.jsx)(t.strong,{children:"Embedded Relationships"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"The main purpose of embedded documents is to reduce the number of queries to the database, and to make faster queries."}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["Please note that this section covers how embedded and syncing documents work only with ",(0,o.jsx)(t.a,{href:"./../models/introduction",children:"Models"}),"."]})}),"\n",(0,o.jsx)(t.h2,{id:"embedding-documents",children:"Embedding Documents"}),"\n",(0,o.jsxs)(t.p,{children:["Assume that we have a ",(0,o.jsx)(t.code,{children:"posts"})," collection where we want to add the ",(0,o.jsx)(t.code,{children:"author"})," of the post, this could be done by two scenarios:"]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"Embedding the author's data inside the post document like the id, name, and image."}),"\n",(0,o.jsxs)(t.li,{children:["Embedding the author's id inside the post document, and then query the ",(0,o.jsx)(t.code,{children:"users"})," collection to get the author's data."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Each one of them has its own ups and downs, for example if we added only the author id, each time we want to fetch the post or list of posts we want to lookup (join) the ",(0,o.jsx)(t.code,{children:"users"})," collection to get the author's data, this will increase the number of queries to the database, and it will make it slower."]}),"\n",(0,o.jsxs)(t.p,{children:["So second solution here is to embed the author's data inside the post document, this will make the query faster because when we fetch the post we don't have to lookup the ",(0,o.jsx)(t.code,{children:"users"})," collection to get the author's data, it is already there."]}),"\n",(0,o.jsxs)(t.p,{children:["This is where ",(0,o.jsx)(t.a,{href:"./embedded-documents",children:"Embedded Documents"})," comes in handy."]}),"\n",(0,o.jsx)(t.h2,{id:"syncing-models",children:"Syncing Models"}),"\n",(0,o.jsx)(t.p,{children:"The previous solution is great when we need to reduce the number of queries over database, but it has a downside, the embedded documents need to be updated whenever the original document is updated."}),"\n",(0,o.jsxs)(t.p,{children:["Here the ",(0,o.jsx)(t.a,{href:"./syncing-models",children:"Syncing Model Concept"})," shines, as it auto updates the embedded documents whenever the original document is updated."]})]})}function h(e={}){const{wrapper:t}={...(0,i.RP)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},5680:(e,t,n)=>{n.d(t,{RP:()=>c});var o=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=o.createContext({}),c=function(e){var t=o.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,a=e.parentName,h=d(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,p=u["".concat(a,".").concat(m)]||u[m]||l[m]||s;return n?o.createElement(p,r(r({ref:t},h),{},{components:n})):o.createElement(p,r({ref:t},h))}));h.displayName="MDXCreateElement"}}]);