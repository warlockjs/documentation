"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[9561],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=s.createContext({}),i=function(e){var t=s.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=i(e.components);return s.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=i(n),d=r,h=c["".concat(u,".").concat(d)]||c[d]||m[d]||a;return n?s.createElement(h,o(o({ref:t},p),{},{components:n})):s.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var i=2;i<a;i++)o[i]=n[i];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var s=n(7462),r=(n(7294),n(3905));const a={sidebar_position:3},o="Request",l={unversionedId:"warlock/http/request",id:"warlock/http/request",title:"Request",description:"Warlock Request is the incoming request object, it contains all the information about the request, and it is used to get the request body, query string, headers, and more.",source:"@site/docs/warlock/http/request.mdx",sourceDirName:"warlock/http",slug:"/warlock/http/request",permalink:"/docs/warlock/http/request",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"warlock",previous:{title:"Http configurations",permalink:"/docs/warlock/http/configurations"},next:{title:"Uploaded Files",permalink:"/docs/warlock/http/uploaded-files"}},u={},i=[{value:"Request params",id:"request-params",level:2},{value:"Request query string",id:"request-query-string",level:2},{value:"Request body",id:"request-body",level:2},{value:"Json and Form Data Requests",id:"json-and-form-data-requests",level:2},{value:"Dot Notation Support",id:"dot-notation-support",level:3},{value:"Int Values",id:"int-values",level:2},{value:"Float Values",id:"float-values",level:2},{value:"Number Values",id:"number-values",level:2},{value:"Boolean Values",id:"boolean-values",level:2},{value:"Check if request has a value",id:"check-if-request-has-a-value",level:2},{value:"Set value to request payload",id:"set-value-to-request-payload",level:2},{value:"Unset values from request",id:"unset-values-from-request",level:2},{value:"Get entire request payload",id:"get-entire-request-payload",level:2},{value:"Get certain values from request",id:"get-certain-values-from-request",level:2},{value:"Get all values except certain values",id:"get-all-values-except-certain-values",level:2},{value:"Get heavy inputs",id:"get-heavy-inputs",level:2},{value:"Request files",id:"request-files",level:2},{value:"Validation",id:"validation",level:2},{value:"Get validated inputs only",id:"get-validated-inputs-only",level:2},{value:"Request headers",id:"request-headers",level:2},{value:"Request Authorization value",id:"request-authorization-value",level:2},{value:"Authorization Value",id:"authorization-value",level:3},{value:"Request path",id:"request-path",level:2},{value:"Request url",id:"request-url",level:2},{value:"Get full url",id:"get-full-url",level:3},{value:"Request Ip",id:"request-ip",level:2},{value:"User Agent",id:"user-agent",level:2},{value:"Request Referer",id:"request-referer",level:2},{value:"Request Method",id:"request-method",level:2},{value:"Request hostname",id:"request-hostname",level:2},{value:"Request Protocol",id:"request-protocol",level:2},{value:"Request Locale Code",id:"request-locale-code",level:2}],p={toc:i},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,s.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"request"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Warlock Request")," is the incoming request object, it contains all the information about the request, and it is used to get the request body, query string, headers, and more."),(0,r.kt)("h2",{id:"request-params"},"Request params"),(0,r.kt)("p",null,"Request params are the dynamic segments in the request path, for example in the following route:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/routes.ts"',title:'"src/app/users/routes.ts"'},'import { router } from "@mongez/warlock";\n\nrouter.get("/users/:id", getUser);\n')),(0,r.kt)("p",null,"In this example, when the user requests ",(0,r.kt)("inlineCode",{parentName:"p"},"/users/1"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," param will be ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,r.kt)("p",null,"Let's see how to access it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-user.ts"',title:'"src/app/users/controllers/get-user.ts"'},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "./../models/user";\n\nexport async function getUser(request: Request, response: Response) {\n  const user = await User.find(request.params.id);\n  response.success({\n    user,\n  });\n}\n')),(0,r.kt)("h2",{id:"request-query-string"},"Request query string"),(0,r.kt)("p",null,"Query string is the part of the URL after the ",(0,r.kt)("inlineCode",{parentName:"p"},"?")," character, for example in the following URL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"https://example.com/users?name=John&age=20\n")),(0,r.kt)("p",null,"The query string is ",(0,r.kt)("inlineCode",{parentName:"p"},"name=John&age=20"),"."),(0,r.kt)("p",null,"Let's see how to access it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "./../models/user";\n\nexport async function getUsers(request: Request, response: Response) {\n  const users = await User.find({\n    name: request.query.name,\n    age: request.query.name,\n  });\n\n  response.success({\n    users,\n  });\n}\n')),(0,r.kt)("p",null,"If the query params has a ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," as a key suffix, then it will be treated as an array, for example:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sitename.com/products?brands[]=1&brands[]=2&brands[]=3")," will be parsed as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"//...\nconst brands = request.query.brands; // [1, 2, 3]\n")),(0,r.kt)("h2",{id:"request-body"},"Request body"),(0,r.kt)("p",null,"Request body are the payload data that is being sent in ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," ",(0,r.kt)("inlineCode",{parentName:"p"},"PUT")," ",(0,r.kt)("inlineCode",{parentName:"p"},"PATCH")," requests, for example in the following request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',title:'"src/app/users/controllers/create-user.ts"'},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "./../models/user";\n\nexport async function createUser(request: Request, response: Response) {\n  const user = await User.create({\n    name: request.body.name,\n    age: request.body.age,\n  });\n\n  response.success({\n    user,\n  });\n}\n')),(0,r.kt)("p",null,"As mentioned in the request query, if the request body input has a ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," as a key suffix, then it will be treated as an array, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',title:'"src/app/users/controllers/create-user.ts"'},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "./../models/user";\n\nexport async function createUser(request: Request, response: Response) {\n  const user = await User.create({\n    name: request.body.name,\n    age: request.body.age,\n    brands: request.body.brands, // [1, 2, 3]\n  });\n\n  response.success({\n    user,\n  });\n}\n')),(0,r.kt)("h2",{id:"json-and-form-data-requests"},"Json and Form Data Requests"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"Warlock")," parses both types out of the box, so you don't need to add additional work, it will parse the request body and make it available in ",(0,r.kt)("inlineCode",{parentName:"p"},"request.body")," property."),(0,r.kt)("h1",{id:"request-input"},"Request Input"),(0,r.kt)("p",null,"This is the recommended way to access any type of data from request wether it is from ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"body"),"."),(0,r.kt)("p",null,"To access any value from the request, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"input()")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',title:'"src/app/users/controllers/create-user.ts"'},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "./../models/user";\n\nexport async function createUser(request: Request, response: Response) {\n  const user = await User.create({\n    name: request.input("name"),\n    age: request.input("age"),\n  });\n\n  response.success({\n    user,\n  });\n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"input()")," method accepts a default value as a second argument if the input is missing.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"input()")," method is the recommended way to access request payload regardless of the request method.")),(0,r.kt)("h3",{id:"dot-notation-support"},"Dot Notation Support"),(0,r.kt)("p",null,"When sending a json request, you can use the dot notation to access nested values, for example in the following request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "user": {\n    "name": "John",\n    "age": 20\n  }\n}\n')),(0,r.kt)("p",null,"To get the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," value, use the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',title:'"src/app/users/controllers/create-user.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function createUser(request: Request, response: Response) {\n  const name = request.input("user.name");\n\n  response.success({\n    name,\n  });\n}\n')),(0,r.kt)("h2",{id:"int-values"},"Int Values"),(0,r.kt)("p",null,"As you already know, any value from the request is a string, but sometimes we need to get an integer value, for example in the following request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "./../models/user";\n\nexport async function getUsers(request: Request, response: Response) {\n  const users = await User.find({\n    age: request.int("age"),\n  });\n\n  response.success({\n    users,\n  });\n}\n')),(0,r.kt)("p",null,"This will convert the ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," value to an integer, if the input is missing or not an integer, it will return ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You can of course pass the second argument to the ",(0,r.kt)("inlineCode",{parentName:"p"},"int()")," method to set a default value.")),(0,r.kt)("h2",{id:"float-values"},"Float Values"),(0,r.kt)("p",null,"Similar to the ",(0,r.kt)("inlineCode",{parentName:"p"},"int()")," method, the ",(0,r.kt)("inlineCode",{parentName:"p"},"float()")," method converts the input value to a float number, if the input is missing or not a float number, it will return ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h2",{id:"number-values"},"Number Values"),(0,r.kt)("p",null,"This method is a combination of ",(0,r.kt)("inlineCode",{parentName:"p"},"int()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"float()")," methods, it converts the input value to a number, if the input is missing or not a number, it will return ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h2",{id:"boolean-values"},"Boolean Values"),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"request.bool()")," method, If the request input is present, then all values will be marked as ",(0,r.kt)("strong",{parentName:"p"},"true")," except for ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," value."),(0,r.kt)("p",null,"::info\nWhen using ",(0,r.kt)("inlineCode",{parentName:"p"},"bool")," method, if the input's value is ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," as a string, it will be converted to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," as boolean value.\n:::"),(0,r.kt)("h2",{id:"check-if-request-has-a-value"},"Check if request has a value"),(0,r.kt)("p",null,"To check if the request has a value in any payload type, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"has()")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "./../models/user";\n\nexport async function getUsers(request: Request, response: Response) {\n  const hasAge = request.has("age");\n\n  response.success({\n    hasAge,\n  });\n}\n')),(0,r.kt)("h2",{id:"set-value-to-request-payload"},"Set value to request payload"),(0,r.kt)("p",null,"Sometimes we need to update the request payload with additional data, this usually happens in ",(0,r.kt)("inlineCode",{parentName:"p"},"middleware"),", to do so, use ",(0,r.kt)("inlineCode",{parentName:"p"},"request.set")," method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/middleware/auth.ts"',title:'"src/app/users/middleware/auth.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function auth(request: Request, response: Response) {\n  const authorizationHeader = request.header("Authorization");\n\n  if (!authorizationHeader) {\n    return response.unauthorized();\n  }\n\n  const user = await User.find(request.input("id"));\n\n  request.set("email", user.get("email"));\n}\n')),(0,r.kt)("h2",{id:"unset-values-from-request"},"Unset values from request"),(0,r.kt)("p",null,"To unset multiple values from the request, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"unset()")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/middleware/auth.ts"',title:'"src/app/users/middleware/auth.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function auth(request: Request, response: Response) {\n  const authorizationHeader = request.header("Authorization");\n\n  if (!authorizationHeader) {\n    return response.unauthorized();\n  }\n\n  request.unset(["id", "name"]);\n}\n')),(0,r.kt)("h2",{id:"get-entire-request-payload"},"Get entire request payload"),(0,r.kt)("p",null,"To get the entire request payload, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"all()")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',title:'"src/app/users/controllers/create-user.ts"'},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "./../models/user";\n\nexport async function createUser(request: Request, response: Response) {\n  const user = await User.create(request.all());\n\n  response.success({\n    user,\n  });\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Please note that this method will return the entire request payload, including the ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"body")," but not including request files.")),(0,r.kt)("p",null,"In some situations, you don't want to get the request params, you need only the request query and body, in this case use ",(0,r.kt)("inlineCode",{parentName:"p"},"allExceptParams")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',title:'"src/app/users/controllers/create-user.ts"'},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "./../models/user";\n\nexport async function createUser(request: Request, response: Response) {\n  const user = await User.create(request.allExceptParams());\n\n  response.success({\n    user,\n  });\n}\n')),(0,r.kt)("h2",{id:"get-certain-values-from-request"},"Get certain values from request"),(0,r.kt)("p",null,"To get certain values from the request payload, use ",(0,r.kt)("inlineCode",{parentName:"p"},"only")," method, it accepts an array of keys that you want to get from the request payload and returns an object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',title:'"src/app/users/controllers/create-user.ts"'},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "./../models/user";\n\nexport async function createUser(request: Request, response: Response) {\n  const user = await User.create(request.only(["name", "age"])); // { name: "John", age: 20 }\n\n  response.success({\n    user,\n  });\n}\n')),(0,r.kt)("h2",{id:"get-all-values-except-certain-values"},"Get all values except certain values"),(0,r.kt)("p",null,"To get all values from the request payload except certain values, use ",(0,r.kt)("inlineCode",{parentName:"p"},"except")," method, it accepts an array of keys that you want to exclude from the request payload and returns an object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',title:'"src/app/users/controllers/create-user.ts"'},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "./../models/user";\n\nexport async function createUser(request: Request, response: Response) {\n  const user = await User.create(\n    request.except(["id", "createdAt", "updatedAt"])\n  ); // { name: "John", age: 20 }\n\n  response.success({\n    user,\n  });\n}\n')),(0,r.kt)("h2",{id:"get-heavy-inputs"},"Get heavy inputs"),(0,r.kt)("p",null,"Sometimes, a request payload may contain inputs but with empty strings, consider the following request url"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"example.com/users/1?name=&age=20")),(0,r.kt)("p",null,"If we use ",(0,r.kt)("inlineCode",{parentName:"p"},"request.all()")," method, it will return the following object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 1,\n  "name": "",\n  "age": 20\n}\n')),(0,r.kt)("p",null,"To get the heavy inputs, use ",(0,r.kt)("inlineCode",{parentName:"p"},"request.heavy()")," method, it will return the following object:"),(0,r.kt)("p",null,"This will return the following data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 1,\n  "age": 20\n}\n')),(0,r.kt)("p",null,"This will return all data from ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"body"),"."),(0,r.kt)("p",null,"To get all heavy data except the params data, use ",(0,r.kt)("inlineCode",{parentName:"p"},"request.heavyExceptParams()")," method, it will return the following object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "age": 20\n}\n')),(0,r.kt)("h2",{id:"request-files"},"Request files"),(0,r.kt)("p",null,"When send a ",(0,r.kt)("inlineCode",{parentName:"p"},"multipart/form-data")," request, you can access the files using the ",(0,r.kt)("inlineCode",{parentName:"p"},"file")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',title:'"src/app/users/controllers/create-user.ts"'},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "./../models/user";\n\nexport async function createUser(request: Request, response: Response) {\n  const image = request.file("image");\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"file")," method may return a ",(0,r.kt)("inlineCode",{parentName:"p"},"UploadedFile")," instance, or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if the file is missing."),(0,r.kt)("p",null,"If the request contains multiple files with the same name, then the ",(0,r.kt)("inlineCode",{parentName:"p"},"file")," method will return an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"UploadedFile")," instances."),(0,r.kt)("p",null,"For more details about uploaded files, check it in the ",(0,r.kt)("a",{parentName:"p",href:"./uploaded-files"},"Uploaded Files Section"),"."),(0,r.kt)("h2",{id:"validation"},"Validation"),(0,r.kt)("p",null,"Sometimes you want to ",(0,r.kt)("a",{parentName:"p",href:"./../validation/introduction"},"validate")," some inputs on a middleware, or in ",(0,r.kt)("inlineCode",{parentName:"p"},"validation.validate")," method, in this case, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"request.validate")," method, which accepts an object of rules or a ",(0,r.kt)("a",{parentName:"p",href:"./../validation/validation-schema"},"Validation Schema"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "./../models/user";\n\nexport default async function login(request: Request, response: Response) {\n  //\n}\n\nlogin.validation = {\n  validate: async (request: Request, response: Response) => {\n    const user = await User.findBy("email", request.input("email"));\n\n    if (!user) {\n      return response.badRequest({\n        email: "Email is not found",\n      });\n    }\n\n    if (user.get("isAdmin")) {\n      const validator = await request.validate({\n        superPassword: ["required", "minLength:8"],\n      });\n\n      // if validation fails, then return the validation by passing the validator to the response\n      if (validator.fails()) {\n        return response.validationFailed(validator);\n      }\n    }\n  },\n};\n')),(0,r.kt)("p",null,"This case we have to first fetch the user from the database then perform validation, if the user is not found, then we return a bad request response, if the user is found, then we check if the user is an admin, if the user is an admin, then we validate the ",(0,r.kt)("inlineCode",{parentName:"p"},"superPassword")," input, if the validation fails, then we return a validation failed response."),(0,r.kt)("h2",{id:"get-validated-inputs-only"},"Get validated inputs only"),(0,r.kt)("p",null,"To get only the validated inputs that are listed in ",(0,r.kt)("inlineCode",{parentName:"p"},"validation.rules")," object, use ",(0,r.kt)("inlineCode",{parentName:"p"},"request.validated()")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Request, Response } from "@mongez/warlock";\nimport { User } from "./../models/user";\n\nexport default async function login(request: Request, response: Response) {\n  const { email, password } = request.validated(); // will return only the email and password\n}\n\nlogin.validation = {\n  rules: {\n    email: ["required", "email"],\n    password: ["required"],\n  },\n};\n')),(0,r.kt)("p",null,"If an input is listed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"rules")," object but not required and missing, then it will not be returned, for example if we added ",(0,r.kt)("inlineCode",{parentName:"p"},"gender: in:male,female")," in this case, the gender input is optional, if not present in the request payload, it will be ignored."),(0,r.kt)("h2",{id:"request-headers"},"Request headers"),(0,r.kt)("p",null,"Request headers are the HTTP headers sent with the request, for example the ",(0,r.kt)("inlineCode",{parentName:"p"},"Accept")," header, ",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Type")," header, and more."),(0,r.kt)("p",null,"To get a single header, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"header()")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function getUsers(request: Request, response: Response) {\n  const acceptHeader = request.header("Accept");\n\n  response.success({\n    acceptHeader,\n  });\n}\n')),(0,r.kt)("p",null,"It may accept a default value for second argument if the header is missing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function getUsers(request: Request, response: Response) {\n  const acceptHeader = request.header("Accept", "application/json");\n\n  response.success({\n    acceptHeader,\n  });\n}\n')),(0,r.kt)("p",null,"To get all headers, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"headers")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function getUsers(request: Request, response: Response) {\n  const headers = request.headers;\n\n  response.success({\n    headers,\n  });\n}\n')),(0,r.kt)("h2",{id:"request-authorization-value"},"Request Authorization value"),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header is present in the request, you can get its value using the ",(0,r.kt)("inlineCode",{parentName:"p"},"authorization")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function getUsers(request: Request, response: Response) {\n  const authorization = request.authorization;\n\n  response.success({\n    authorization,\n  });\n}\n')),(0,r.kt)("p",null,"It will return the value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header, if the header is not present, it will return ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,r.kt)("h3",{id:"authorization-value"},"Authorization Value"),(0,r.kt)("p",null,"To get the authorization value use ",(0,r.kt)("inlineCode",{parentName:"p"},"authorizationValue")," property instead, for example if teh request Authorization header is:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Authorization: key apiKey")),(0,r.kt)("p",null,"Then the ",(0,r.kt)("inlineCode",{parentName:"p"},"authorizationValue")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"apiKey"),"."),(0,r.kt)("p",null,"If it contains a ",(0,r.kt)("inlineCode",{parentName:"p"},"Bearer Token")," then the token will be returned directly without the ",(0,r.kt)("inlineCode",{parentName:"p"},"Bearer")," prefix."),(0,r.kt)("h2",{id:"request-path"},"Request path"),(0,r.kt)("p",null,"Get current request path using the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function getUsers(request: Request, response: Response) {\n  const path = request.path;\n\n  response.success({\n    path,\n  });\n}\n')),(0,r.kt)("h2",{id:"request-url"},"Request url"),(0,r.kt)("p",null,"Get current request url using the ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function getUsers(request: Request, response: Response) {\n  const url = request.url;\n\n  response.success({\n    url,\n  });\n}\n')),(0,r.kt)("h3",{id:"get-full-url"},"Get full url"),(0,r.kt)("p",null,"To get the full url (not including the query string) use ",(0,r.kt)("inlineCode",{parentName:"p"},"fullUrl")," property instead:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{7} title="src/app/users/controllers/get-users.ts"',"{7}":!0,title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function getUsers(request: Request, response: Response) {\n  const fullUrl = request.fullUrl;\n\n  response.success({\n    fullUrl, // https://example.com/users\n  });\n}\n')),(0,r.kt)("h2",{id:"request-ip"},"Request Ip"),(0,r.kt)("p",null,"To get the request IP, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ip")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function getUsers(request: Request, response: Response) {\n  const ip = request.ip;\n\n  response.success({\n    ip,\n  });\n}\n')),(0,r.kt)("p",null,"This will work as it will return the current ip address, however, if the app is running under a proxy, it will return the proxy ip address, to get the real ip address, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"realIp")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function getUsers(request: Request, response: Response) {\n  const ip = request.realIp;\n\n  response.success({\n    ip,\n  });\n}\n')),(0,r.kt)("p",null,"This works by trying to get the ip from the ",(0,r.kt)("inlineCode",{parentName:"p"},"x-real-ip"),", if the header is not found, then a ",(0,r.kt)("inlineCode",{parentName:"p"},"x-forwarded-for")," header is used, if the header is not found, then the default ip will be returned."),(0,r.kt)("h2",{id:"user-agent"},"User Agent"),(0,r.kt)("p",null,"To get the user agent, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"userAgent")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function getUsers(request: Request, response: Response) {\n  const userAgent = request.userAgent;\n\n  response.success({\n    userAgent,\n  });\n}\n')),(0,r.kt)("h2",{id:"request-referer"},"Request Referer"),(0,r.kt)("p",null,"To get the request referer, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"referer")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function getUsers(request: Request, response: Response) {\n  const referer = request.referer;\n\n  response.success({\n    referer,\n  });\n}\n')),(0,r.kt)("h2",{id:"request-method"},"Request Method"),(0,r.kt)("p",null,"To get the request method, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"method")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function getUsers(request: Request, response: Response) {\n  const method = request.method;\n\n  response.success({\n    method,\n  });\n}\n')),(0,r.kt)("h2",{id:"request-hostname"},"Request hostname"),(0,r.kt)("p",null,"Request ",(0,r.kt)("inlineCode",{parentName:"p"},"hostname")," property returns the hostname of the request, for example in the following request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"https://example.com/users\n")),(0,r.kt)("p",null,"The hostname is ",(0,r.kt)("inlineCode",{parentName:"p"},"example.com"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"request.domain")," is an alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"request.hostname"),".")),(0,r.kt)("p",null,"If the application is running under a proxy, then use ",(0,r.kt)("inlineCode",{parentName:"p"},"originalDomain")," instead."),(0,r.kt)("h2",{id:"request-protocol"},"Request Protocol"),(0,r.kt)("p",null,"Request ",(0,r.kt)("inlineCode",{parentName:"p"},"protocol")," property returns the protocol of the request, for example in the following request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"https://example.com/users\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"console.log(request.protocol); // https\n")),(0,r.kt)("h2",{id:"request-locale-code"},"Request Locale Code"),(0,r.kt)("p",null,"When dealing with a multilingual apps, its important to know the current locale code, to get the current locale code, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"locale")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@mongez/warlock";\n\nexport async function getLocale(request: Request, response: Response) {\n  const locale = request.locale;\n\n  response.success({\n    locale,\n  });\n}\n')),(0,r.kt)("p",null,"The locale property will try to find one of the following headers in the incoming request to fetch the locale code from"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"translation-locale-code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"locale-code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"locale"))),(0,r.kt)("p",null,"If none of the headers is found, then it will return the default locale code from ",(0,r.kt)("a",{parentName:"p",href:"./../getting-started/configurations#localeCode"},"Application default Locale Code Configuration"),"."))}m.isMDXComponent=!0}}]);