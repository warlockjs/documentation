"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3618],{1776:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var t=s(4848),n=s(8453);const o={sidebar_position:2},i="Routes",a={id:"warlock/http/routes",title:"Routes",description:"Routes are the way to map which request is going to be handled with which handler (controller).",source:"@site/docs/warlock/http/routes.mdx",sourceDirName:"warlock/http",slug:"/warlock/http/routes",permalink:"/docs/warlock/http/routes",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"warlock",previous:{title:"Introduction",permalink:"/docs/warlock/http/introduction"},next:{title:"Http configurations",permalink:"/docs/warlock/http/configurations"}},l={},d=[{value:"How it works",id:"how-it-works",level:2},{value:"Defining a route",id:"defining-a-route",level:2},{value:"Route parameters",id:"route-parameters",level:2},{value:"Adding middleware",id:"adding-middleware",level:2},{value:"Request Methods",id:"request-methods",level:2},{value:"Multiple routes with same handler",id:"multiple-routes-with-same-handler",level:2},{value:"Named Routes",id:"named-routes",level:2},{value:"Grouped Route",id:"grouped-route",level:2},{value:"Prefix routes",id:"prefix-routes",level:2},{value:"List of routes",id:"list-of-routes",level:2}];function c(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"routes",children:"Routes"}),"\n",(0,t.jsx)(r.p,{children:"Routes are the way to map which request is going to be handled with which handler (controller)."}),"\n",(0,t.jsx)(r.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,t.jsxs)(r.p,{children:["Each module inside ",(0,t.jsx)(r.code,{children:"src/app"})," is a module, for this module to have routes, create a ",(0,t.jsx)(r.code,{children:"routes.ts"})," file inside it and it will be automatically loaded."]}),"\n",(0,t.jsx)(r.h2,{id:"defining-a-route",children:"Defining a route"}),"\n",(0,t.jsxs)(r.p,{children:["Creating routes is super easy, it has mostly the same signature as the ",(0,t.jsx)(r.code,{children:"express"})," and ",(0,t.jsx)(r.code,{children:"fastify"})," router, but with some extra features."]}),"\n",(0,t.jsx)(r.p,{children:"Let's create a simple route file and see how it works."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/users/routes.ts"',children:'import { router } from "@warlock.js/core";\r\nimport { getUsers } from "./controllers/get-users";\r\n\r\nrouter.get("/users", getUsers);\n'})}),"\n",(0,t.jsxs)(r.p,{children:["We defined a route that will handle ",(0,t.jsx)(r.code,{children:"GET"})," requests to ",(0,t.jsx)(r.code,{children:"/users"})," path, and will be handled by the ",(0,t.jsx)(r.code,{children:"getUsers"})," controller."]}),"\n",(0,t.jsx)(r.p,{children:"Now let's create the controller:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const usersList = await User.list();\r\n  response.success({\r\n    users: usersList,\r\n  });\r\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"The controller is a simple function that accepts the request and response objects, and returns a response."}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"User.list()"})," method returns a list of users, and we return it as a response body."]}),"\n",(0,t.jsx)(r.admonition,{type:"tip",children:(0,t.jsxs)(r.p,{children:["To get better understanding of database models, please check ",(0,t.jsx)(r.a,{href:"/docs/cascade/models/introduction",children:"Cascade Documentation"})]})}),"\n",(0,t.jsx)(r.h2,{id:"route-parameters",children:"Route parameters"}),"\n",(0,t.jsx)(r.p,{children:"In the previous example we saw how to return list of users, but what if we want to return a specific user?"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'{3,6} title="src/app/users/routes.ts"',children:'import { router } from "@warlock.js/core";\r\nimport { getUsers } from "./controllers/get-users";\r\nimport { getUser } from "./controllers/get-user";\r\n\r\nrouter.get("/users", getUsers);\r\nrouter.get("/users/:id", getUser);\n'})}),"\n",(0,t.jsx)(r.p,{children:"We added a new route to fetch a single user, let's create the controller:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-user.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport async function getUser(request: Request, response: Response) {\r\n  const user = await User.find(request.input("id"));\r\n  response.success({\r\n    user,\r\n  });\r\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["In this example we used the ",(0,t.jsx)(r.code,{children:"request.input()"})," method to get the route parameter ",(0,t.jsx)(r.code,{children:"id"}),", and we used it to fetch the user."]}),"\n",(0,t.jsx)(r.h2,{id:"adding-middleware",children:"Adding middleware"}),"\n",(0,t.jsx)(r.p,{children:"Sometimes we need to add a middleware to a specific route, for example to check if the user is authenticated or not."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'{3,6} title="src/app/users/routes.ts"',children:'import { router } from "@warlock.js/core";\r\nimport { getUsers } from "./controllers/get-users";\r\nimport { getUser } from "./controllers/get-user";\r\nimport { auth } from "./../middleware/auth";\r\n\r\nrouter.get("/users", getUsers, {\r\n  middleware: [auth],\r\n});\r\nrouter.get("/users/:id", getUser, {\r\n  middleware: [auth],\r\n});\n'})}),"\n",(0,t.jsxs)(r.p,{children:["We added the ",(0,t.jsx)(r.code,{children:"auth"})," middleware to both routes, now let's create the middleware:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/users/middleware/auth.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function auth(request: Request, response: Response) {\r\n  const authorizationHeader = request.header("Authorization");\r\n\r\n  if (!authorizationHeader) {\r\n    return response.unauthorized();\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"The middleware is a simple function that accepts the request and response objects, and returns a response."}),"\n",(0,t.jsx)(r.admonition,{type:"info",children:(0,t.jsx)(r.p,{children:"When a middleware returns a response, the route handler will not be executed, and the response will be returned directly."})}),"\n",(0,t.jsx)(r.h2,{id:"request-methods",children:"Request Methods"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"router"})," object has the following methods:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"router.get(path, handler, options?)"}),": Registers a route that handles ",(0,t.jsx)(r.code,{children:"GET"})," requests."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"router.post(path, handler, options?)"}),": Registers a route that handles ",(0,t.jsx)(r.code,{children:"POST"})," requests."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"router.put(path, handler, options?)"}),": Registers a route that handles ",(0,t.jsx)(r.code,{children:"PUT"})," requests."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"router.patch(path, handler, options?)"}),": Registers a route that handles ",(0,t.jsx)(r.code,{children:"PATCH"})," requests."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"router.delete(path, handler, options?)"}),": Registers a route that handles ",(0,t.jsx)(r.code,{children:"DELETE"})," requests."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"router.options(path, handler, options?)"}),": Registers a route that handles ",(0,t.jsx)(r.code,{children:"OPTIONS"})," requests."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"router.head(path, handler, options?)"}),": Registers a route that handles ",(0,t.jsx)(r.code,{children:"HEAD"})," requests."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"router.all(path, handler, options?)"}),": Registers a route that supports all request methods."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"multiple-routes-with-same-handler",children:"Multiple routes with same handler"}),"\n",(0,t.jsxs)(r.p,{children:["Sometimes we need to register multiple routes with the same handler, a good example for this use case is in the ",(0,t.jsx)(r.code,{children:"uploads"})," module where we need to upload files from the website and admin panel and they both have different routes but the same handler."]}),"\n",(0,t.jsxs)(r.p,{children:["To do this, we can pass an array of paths to the ",(0,t.jsx)(r.code,{children:"router"})," methods:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'{3,6} title="src/app/uploads/routes.ts"',children:'import { router } from "@warlock.js/core";\r\nimport { upload } from "./controllers/upload";\r\n\r\nrouter.post(["/uploads", "/admin/uploads"], upload);\n'})}),"\n",(0,t.jsx)(r.h2,{id:"named-routes",children:"Named Routes"}),"\n",(0,t.jsx)(r.p,{children:"Sometimes we need to generate a URL for a specific route, for example to redirect the user to a specific page after login."}),"\n",(0,t.jsx)(r.p,{children:"To do this, we can pass a name to the route options:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'{3,6} title="src/app/users/routes.ts"',children:'import { router } from "@warlock.js/core";\r\nimport { getUsers } from "./controllers/get-users";\r\n\r\nrouter.get("/users", getUsers, {\r\n  name: "users.list",\r\n});\n'})}),"\n",(0,t.jsxs)(r.p,{children:["By default if the route ",(0,t.jsx)(r.code,{children:"name"})," property is not defined, it will be the route path without the leading slash and each slash will be replaced with a dot, for example the route ",(0,t.jsx)(r.code,{children:"/users/:id"})," will have the name ",(0,t.jsx)(r.code,{children:"users.id"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["Now we can generate the URL for this route using the ",(0,t.jsx)(r.code,{children:"route()"})," helper function:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response, route } from "@warlock.js/core";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const usersList = await User.list();\r\n  response.success({\r\n    users: usersList,\r\n    nextPage: route("users.list"),\r\n  });\r\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"route()"})," function accepts the route name as the first argument, and the route parameters as the second argument."]}),"\n",(0,t.jsx)(r.p,{children:"An example for the second parameter is used with a single user route:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/users/routes.ts"',children:'import { router } from "@warlock.js/core";\r\nimport { getUser } from "./controllers/get-user";\r\n\r\nrouter.get("/users/:id", getUser, {\r\n  name: "users.single",\r\n});\n'})}),"\n",(0,t.jsxs)(r.p,{children:["Now we can generate the URL for this route using the ",(0,t.jsx)(r.code,{children:"route()"})," helper function:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-user.ts"',children:'import { Request, Response, route } from "@warlock.js/core";\r\n\r\nexport async function getUser(request: Request, response: Response) {\r\n  const user = await User.find(request.input("id"));\r\n  response.success({\r\n    user,\r\n    editPage: route("users.single", { id: user.id }),\r\n  });\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"grouped-route",children:"Grouped Route"}),"\n",(0,t.jsx)(r.p,{children:"As our applications grow, we need to make a more control over it, and one of the ways to do this is to group routes."}),"\n",(0,t.jsx)(r.p,{children:"For example, we can group all the routes that needs to be authorized before accessing them:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/users/routes.ts"',children:'import { router } from "@warlock.js/core";\r\nimport { getUsers } from "./controllers/get-users";\r\nimport { getUser } from "./controllers/get-user";\r\nimport { auth } from "./../middleware/auth";\r\n\r\nrouter.group(\r\n  {\r\n    middleware: [auth],\r\n  },\r\n  () => {\r\n    router.get("/users", getUsers);\r\n    router.get("/users/:id", getUser);\r\n  }\r\n);\n'})}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"router.group()"})," method accepts the following arguments:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"options"}),": The options object that will be passed to all routes inside the group."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"callback"}),": The callback function that will be executed to register the routes."]}),"\n"]}),"\n",(0,t.jsx)(r.admonition,{title:"Merged Middleware",type:"info",children:(0,t.jsx)(r.p,{children:"Please note that if the routes registered inside the group have a middleware, it will be merged with the group middleware, the group middleware will have precedence over the route middleware."})}),"\n",(0,t.jsxs)(r.p,{children:["We can also add same prefix for list of groups, i.e we can add ",(0,t.jsx)(r.code,{children:"/admin"})," prefix for all admin routes, we can make it more professional by creating a function called ",(0,t.jsx)(r.code,{children:"adminRoutes"})," that takes the callback function as an argument:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/admin/routes.ts"',children:'import { router } from "@warlock.js/core";\r\nimport { auth } from "./../middleware/auth";\r\n\r\nexport function adminRoutes(callback) {\r\n  router.group(\r\n    {\r\n      prefix: "/admin",\r\n      middleware: [auth],\r\n    },\r\n    callback\r\n  );\r\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"Now we can use it in our routes:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/users/routes.ts"',children:'import { router } from "@warlock.js/core";\r\nimport { getUsers } from "./controllers/get-users";\r\nimport { getUser } from "./controllers/get-user";\r\nimport { adminRoutes } from "./../admin/routes";\r\n\r\nadminRoutes(() => {\r\n  router.get("/users", getUsers);\r\n  router.get("/users/:id", getUser);\r\n});\n'})}),"\n",(0,t.jsx)(r.h2,{id:"prefix-routes",children:"Prefix routes"}),"\n",(0,t.jsxs)(r.p,{children:["A ",(0,t.jsx)(r.code,{children:"router.prefix"})," method is a syntactic sugar for ",(0,t.jsx)(r.code,{children:"router.group"})," method, it accepts the prefix as the first argument, and the callback function as the second argument:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/users/routes.ts"',children:'import { router } from "@warlock.js/core";\r\nimport { getUsers } from "./controllers/get-users";\r\n\r\nrouter.prefix("/admin", () => {\r\n  router.get("/users", getUsers);\r\n}); // route is: /admin/users\n'})}),"\n",(0,t.jsx)(r.h2,{id:"list-of-routes",children:"List of routes"}),"\n",(0,t.jsxs)(r.p,{children:["To list all registered routes, you can use the ",(0,t.jsx)(r.code,{children:"router.list()"})," method:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'title="src/app/users/routes.ts"',children:'import { router } from "@warlock.js/core";\r\n\r\nrouter.list();\n'})})]})}function u(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>a});var t=s(6540);const n={},o=t.createContext(n);function i(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);