"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1982],{1410:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>a});var t=n(4848),r=n(8453);const o={sidebar_position:9},c="Sorting",d={id:"cascade/aggregate/sort",title:"Sorting",description:"Sorting is the process of arranging documents in a collection in a specific order, The Aggregate class provides multiple methods to easily sort your documents.",source:"@site/docs/cascade/aggregate/sort.mdx",sourceDirName:"cascade/aggregate",slug:"/cascade/aggregate/sort",permalink:"/docs/cascade/aggregate/sort",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"mongodb",previous:{title:"Fetching Documents",permalink:"/docs/cascade/aggregate/fetching"},next:{title:"Data Update",permalink:"/docs/cascade/aggregate/update"}},i={},a=[{value:"Sort method",id:"sort-method",level:2},{value:"sortByDesc method",id:"sortbydesc-method",level:2},{value:"Sort By multiple fields",id:"sort-by-multiple-fields",level:2},{value:"Sort randomly",id:"sort-randomly",level:2},{value:"Sort by latest",id:"sort-by-latest",level:2},{value:"Sort by oldest",id:"sort-by-oldest",level:2}];function l(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"sorting",children:"Sorting"}),"\n",(0,t.jsxs)(s.p,{children:["Sorting is the process of arranging documents in a collection in a specific order, The ",(0,t.jsx)(s.code,{children:"Aggregate"})," class provides multiple methods to easily sort your documents."]}),"\n",(0,t.jsx)(s.h2,{id:"sort-method",children:"Sort method"}),"\n",(0,t.jsx)(s.p,{children:"This is the basic method to sort using a single field."}),"\n",(0,t.jsx)(s.p,{children:"Method Signature:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'public sort(field: string, order?: "asc" | "desc" = "asc"): this;\n'})}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'const users = await aggregate.sort("age", "desc").get();\n'})}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"orderBy"})," is an alias for ",(0,t.jsx)(s.code,{children:"sort"})," method."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"sortbydesc-method",children:"sortByDesc method"}),"\n",(0,t.jsxs)(s.p,{children:["This method is an alias for ",(0,t.jsx)(s.code,{children:"sort"})," method with ",(0,t.jsx)(s.code,{children:"desc"})," order."]}),"\n",(0,t.jsx)(s.p,{children:"Method Signature:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"public sortByDesc(field: string): this;\n"})}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'const users = await aggregate.sortByDesc("age").get();\n'})}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"orderByDesc"})," is an alias for ",(0,t.jsx)(s.code,{children:"sortByDesc"})," method."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"sort-by-multiple-fields",children:"Sort By multiple fields"}),"\n",(0,t.jsxs)(s.p,{children:["If we want to sort by multiple fields, we can use ",(0,t.jsx)(s.code,{children:"sortBy"})," method."]}),"\n",(0,t.jsx)(s.p,{children:"Method Signature:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'public sortBy(columns: Record<string, "desc" | "asc">): this;\n'})}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'const users = await aggregate\r\n  .sortBy({\r\n    age: "desc",\r\n    name: "asc",\r\n  })\r\n  .get();\n'})}),"\n",(0,t.jsxs)(s.p,{children:["This will update documents in the collection to be sorted by ",(0,t.jsx)(s.code,{children:"age"})," in descending order, then by ",(0,t.jsx)(s.code,{children:"name"})," in ascending order."]}),"\n",(0,t.jsx)(s.h2,{id:"sort-randomly",children:"Sort randomly"}),"\n",(0,t.jsxs)(s.p,{children:["If you want to sort documents randomly, you can use ",(0,t.jsx)(s.code,{children:"random"})," method, however, this method requires a ",(0,t.jsx)(s.code,{children:"limit"}),"."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["@see ",(0,t.jsx)(s.a,{href:"https://docs.mongodb.com/manual/reference/operator/aggregation/sample/",children:"Sample"})]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Method Signature:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"public random(limit: number): this;\n"})}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"const users = await aggregate.random(10).get();\n"})}),"\n",(0,t.jsx)(s.h2,{id:"sort-by-latest",children:"Sort by latest"}),"\n",(0,t.jsxs)(s.p,{children:["We can use ",(0,t.jsx)(s.code,{children:"latest"})," method to sort documents using ",(0,t.jsx)(s.code,{children:"createdAt"})," field."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["We can not rely on ",(0,t.jsx)(s.code,{children:"_id"})," as it would return unexpected results if we used ",(0,t.jsx)(s.code,{children:"_id"})]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Method Signature:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'public latest(column = "createdAt"): this;\n'})}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"const users = await aggregate.latest().get();\n"})}),"\n",(0,t.jsx)(s.p,{children:"If you want to sort by a different column, you can pass it as the first argument."}),"\n",(0,t.jsx)(s.h2,{id:"sort-by-oldest",children:"Sort by oldest"}),"\n",(0,t.jsxs)(s.p,{children:["Same thing applies here but this time we use ",(0,t.jsx)(s.code,{children:"oldest"})," method, If we need to sort documents by oldest documents first, we can use ",(0,t.jsx)(s.code,{children:"oldest"})," method."]}),"\n",(0,t.jsx)(s.p,{children:"Method Signature:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'public oldest(column = "createdAt"): this;\n'})}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"const users = await aggregate.oldest().get();\n"})})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>d});var t=n(6540);const r={},o=t.createContext(r);function c(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);