"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[6328],{2500:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=r(4848),s=r(5680);const a={sidebar_position:4},i="Filtering",l={id:"cascade/aggregate/filtering",title:"Filtering",description:"Perform filtering on your data using the where methods.",source:"@site/docs/cascade/aggregate/filtering.mdx",sourceDirName:"cascade/aggregate",slug:"/cascade/aggregate/filtering",permalink:"/docs/cascade/aggregate/filtering",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"mongodb",previous:{title:"Selecting Columns / Projecting",permalink:"/docs/cascade/aggregate/selecting-columns"},next:{title:"$agg",permalink:"/docs/cascade/aggregate/agg"}},h={},c=[{value:"where",id:"where",level:2},{value:"Simple where stage",id:"simple-where-stage",level:3},{value:"Where with operator",id:"where-with-operator",level:3},{value:"Where with object",id:"where-with-object",level:3},{value:"Where null",id:"where-null",level:2},{value:"Where not null",id:"where-not-null",level:2},{value:"Where in",id:"where-in",level:2},{value:"Where not in",id:"where-not-in",level:2},{value:"Where between",id:"where-between",level:2},{value:"Where not between",id:"where-not-between",level:2},{value:"Where like",id:"where-like",level:2},{value:"Where not like",id:"where-not-like",level:2},{value:"Where starts with",id:"where-starts-with",level:2},{value:"Where not starts with",id:"where-not-starts-with",level:2},{value:"Where ends with",id:"where-ends-with",level:2},{value:"Where not ends with",id:"where-not-ends-with",level:2},{value:"Where date between",id:"where-date-between",level:2},{value:"Where date not between",id:"where-date-not-between",level:2},{value:"Where exists",id:"where-exists",level:2},{value:"Where not exists",id:"where-not-exists",level:2},{value:"Where near",id:"where-near",level:2},{value:"Or Where",id:"or-where",level:2},{value:"Where Columns",id:"where-columns",level:2}];function o(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.RP)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"filtering",children:"Filtering"}),"\n",(0,t.jsxs)(n.p,{children:["Perform filtering on your data using the ",(0,t.jsx)(n.code,{children:"where"})," methods."]}),"\n",(0,t.jsx)(n.p,{children:"Mongez Aggregate class provides various methods to filter your data."}),"\n",(0,t.jsx)(n.h2,{id:"where",children:"where"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"where"})," method is used to filter documents based on a condition. It could take multiple forms:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"  /**\r\n   * Add where stage\r\n   */\r\n  public where(column: string, value: any): this;\r\n  public where(column: string, operator: WhereOperator, value: any): this;\r\n  public where(column: Record<string, any>): this;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let's have a look at each one of them:"}),"\n",(0,t.jsx)(n.h3,{id:"simple-where-stage",children:"Simple where stage"}),"\n",(0,t.jsx)(n.p,{children:"If you just want to filter documents based on a single value equality, you can do this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.where("id", 10).get();\n'})}),"\n",(0,t.jsx)(n.p,{children:"Just pass the column name and the value you want to filter by."}),"\n",(0,t.jsx)(n.h3,{id:"where-with-operator",children:"Where with operator"}),"\n",(0,t.jsx)(n.p,{children:"Alternatively, if you want to make more conditions, you can use the operator, here are the available operators:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const whereOperators = [\r\n  "=",\r\n  "!=",\r\n  "not",\r\n  ">",\r\n  ">=",\r\n  "<",\r\n  "<=",\r\n  "in",\r\n  "nin",\r\n  "notIn",\r\n  "all",\r\n  "exists",\r\n  "type",\r\n  "mod",\r\n  "regex",\r\n  "geoIntersects",\r\n  "geoWithin",\r\n  "near",\r\n  "between",\r\n  "notBetween",\r\n  "nearSphere",\r\n  "elemMatch",\r\n  "size",\r\n  "like",\r\n  "notLike",\r\n  "startsWith",\r\n  "endsWith",\r\n];\n'})}),"\n",(0,t.jsx)(n.p,{children:"It could be any of the previous operators, let's take some examples:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.where("id", ">", 10).get();\r\nconst users = await aggregate.where("id", "in", [1, 2, 3]).get();\r\nconst users = await aggregate.where("id", "between", [1, 10]).get();\n'})}),"\n",(0,t.jsx)(n.h3,{id:"where-with-object",children:"Where with object"}),"\n",(0,t.jsxs)(n.p,{children:["Another way to filter documents is to pass an object to the ",(0,t.jsx)(n.code,{children:"where"})," method, this object should have the column name as a key, and the value should be the value you want to filter by."]}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public where(column: Record<string, any>): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const users = await aggregate.where({ id: 10 }).get();\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can also use the built-in Mongodb operators:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const users = await aggregate.where({ id: { $gt: 10 } }).get();\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"Did you know?",type:"tip",children:(0,t.jsxs)(n.p,{children:["You can use ",(0,t.jsx)(n.a,{href:"./agg",children:"$agg utility"})," to easily use built-in operators directly."]})}),"\n",(0,t.jsx)(n.h2,{id:"where-null",children:"Where null"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to filter documents based on a null value, you can use the ",(0,t.jsx)(n.code,{children:"whereNull"})," method:"]}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereNull(column: string): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereNull("id").get();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This will return all users that have ",(0,t.jsx)(n.code,{children:"id = null"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"where-not-null",children:"Where not null"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to filter documents based on a not null value, you can use the ",(0,t.jsx)(n.code,{children:"whereNotNull"})," method:"]}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereNotNull(column: string): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereNotNull("id").get();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"where-in",children:"Where in"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to filter documents based on a list of values, you can use the ",(0,t.jsx)(n.code,{children:"whereIn"})," method:"]}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereIn(column: string, value: any[]): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereIn("id", [1, 2, 3]).get();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If the second argument is a string, then it will be treated as a ",(0,t.jsx)(n.code,{children:"column name"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"where-not-in",children:"Where not in"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to filter documents based on a list of values, you can use the ",(0,t.jsx)(n.code,{children:"whereNotIn"})," method:"]}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereNotIn(column: string, value: any[]): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereNotIn("id", [1, 2, 3]).get();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If the second argument is a string, then it will be treated as a ",(0,t.jsx)(n.code,{children:"column name"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"where-between",children:"Where between"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to filter documents based on a range of values, you can use the ",(0,t.jsx)(n.code,{children:"whereBetween"})," method:"]}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereBetween(column: string, value: [any, any]): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereBetween("id", [1, 10]).get();\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["The second argument is an array of two values, the first value is the ",(0,t.jsx)(n.code,{children:"min"})," value, and the second value is the ",(0,t.jsx)(n.code,{children:"max"})," value and they are both included in the range."]})}),"\n",(0,t.jsx)(n.h2,{id:"where-not-between",children:"Where not between"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to filter documents based on a range of values, you can use the ",(0,t.jsx)(n.code,{children:"whereNotBetween"})," method:"]}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereNotBetween(column: string, value: [any, any]): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereNotBetween("id", [1, 10]).get();\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["The second argument is an array of two values, the first value is the ",(0,t.jsx)(n.code,{children:"min"})," value, and the second value is the ",(0,t.jsx)(n.code,{children:"max"})," value and they are both included in the range."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"where-like",children:"Where like"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to filter documents based on a string pattern, you can use the ",(0,t.jsx)(n.code,{children:"whereLike"})," method:"]}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereLike(column: string, value: string): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereLike("name", "John").get();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This will return all users that have ",(0,t.jsx)(n.code,{children:"name"})," column that contains ",(0,t.jsx)(n.code,{children:"John"}),"."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"If the second argument is a string, the value will be case-insensitive."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["You can also pass a ",(0,t.jsx)(n.code,{children:"regex"})," object:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereLike("name", /John/i).get();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"where-not-like",children:"Where not like"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to filter documents based on a string pattern, you can use the ",(0,t.jsx)(n.code,{children:"whereNotLike"})," method:"]}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereNotLike(column: string, value: string): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereNotLike("name", "John").get();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This will return all users that have ",(0,t.jsx)(n.code,{children:"name"})," column that does not contain ",(0,t.jsx)(n.code,{children:"John"}),"."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"If the second argument is a string, the value will be case-insensitive."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"where-starts-with",children:"Where starts with"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to filter documents based on a string pattern, you can use the ",(0,t.jsx)(n.code,{children:"whereStartsWith"})," method:"]}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereStartsWith(column: string, value: string): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereStartsWith("name", "John").get();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This will return all users that have ",(0,t.jsx)(n.code,{children:"name"})," column that starts with ",(0,t.jsx)(n.code,{children:"John"}),"."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"The value will be case-sensitive."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"where-not-starts-with",children:"Where not starts with"}),"\n",(0,t.jsx)(n.p,{children:"Search for documents that a column does not start with a given value."}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereNotStartsWith(column: string, value: string): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereNotStartsWith("name", "John").get();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"where-ends-with",children:"Where ends with"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to filter documents based on a string pattern, you can use the ",(0,t.jsx)(n.code,{children:"whereEndsWith"})," method:"]}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereEndsWith(column: string, value: string): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereEndsWith("name", "John").get();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This will return all users that have ",(0,t.jsx)(n.code,{children:"name"})," column that ends with ",(0,t.jsx)(n.code,{children:"John"}),"."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"The value will be case-sensitive."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"where-not-ends-with",children:"Where not ends with"}),"\n",(0,t.jsx)(n.p,{children:"Search for documents that a column does not end with a given value."}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereNotEndsWith(column: string, value: string): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereNotEndsWith("name", "John").get();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"where-date-between",children:"Where date between"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to filter documents based on a date range, you can use the ",(0,t.jsx)(n.code,{children:"whereDateBetween"})," method:"]}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereDateBetween(column: string, value: [Date, Date]): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate\r\n  .whereDateBetween("createdAt", [\r\n    new Date("2020-01-01"),\r\n    new Date("2020-12-31"),\r\n  ])\r\n  .get();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"where-date-not-between",children:"Where date not between"}),"\n",(0,t.jsx)(n.p,{children:"Filter documents that are not between a date range."}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereDateNotBetween(column: string, value: [Date, Date]): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate\r\n  .whereDateNotBetween("createdAt", [\r\n    new Date("2020-01-01"),\r\n    new Date("2020-12-31"),\r\n  ])\r\n  .get();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"where-exists",children:"Where exists"}),"\n",(0,t.jsx)(n.p,{children:"This method will filter documents based on the existence of a column."}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereExists(column: string): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereExists("name").get();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"where-not-exists",children:"Where not exists"}),"\n",(0,t.jsx)(n.p,{children:"This method will filter documents based on the existence of a column."}),"\n",(0,t.jsx)(n.p,{children:"Method signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"public whereNotExists(column: string): this;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate.whereNotExists("name").get();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"where-near",children:"Where near"}),"\n",(0,t.jsx)(n.p,{children:"This method will filter documents based on the distance between two points."}),"\n",(0,t.jsx)(n.h2,{id:"or-where",children:"Or Where"}),"\n",(0,t.jsxs)(n.p,{children:["If we need to filter if any of the conditions is true, we can use ",(0,t.jsx)(n.code,{children:"orWhere"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate\r\n  .orWhere({\r\n    id: 10,\r\n    name: "John",\r\n  })\r\n  .get();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This will return all users that have either ",(0,t.jsx)(n.code,{children:"id = 10"})," or ",(0,t.jsx)(n.code,{children:"name = John"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["You can also use the ",(0,t.jsx)(n.a,{href:"./agg",children:"$agg utility"})," to use built-in operators:"]}),"\n",(0,t.jsx)(n.p,{children:"Before:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const users = await aggregate\r\n  .orWhere({\r\n    id: { $gt: 10 },\r\n    name: { $regex: /john/i },\r\n  })\r\n  .get();\n"})}),"\n",(0,t.jsx)(n.p,{children:"After:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { $agg } from "@warlock.js/cascade";\r\n\r\nconst users = await aggregate\r\n  .orWhere({\r\n    id: $agg.gt(10),\r\n    name: $agg.like("john"),\r\n  })\r\n  .get();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"where-columns",children:"Where Columns"}),"\n",(0,t.jsxs)(n.p,{children:["If we need to compare values between two columns or more, we can use ",(0,t.jsx)(n.code,{children:"whereColumns"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const users = await aggregate\r\n  .whereColumns("maxAddresses", ">", "addressesCount")\r\n  .get();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This will return all users that have ",(0,t.jsx)(n.code,{children:"maxAddresses"})," column greater than ",(0,t.jsx)(n.code,{children:"addressesCount"})," column."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["The second argument is the operator, it could be any of the ",(0,t.jsx)(n.a,{href:"#where-with-operator",children:"where operators"})," and it is always required."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.RP)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},5680:(e,n,r)=>{r.d(n,{RP:()=>c});var t=r(6540);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,s=function(e,n){if(null==e)return{};var r,t,s={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var h=t.createContext({}),c=function(e){var n=t.useContext(h),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},o={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,s=e.mdxType,a=e.originalType,h=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(r),g=s,w=u["".concat(h,".").concat(g)]||u[g]||o[g]||a;return r?t.createElement(w,i(i({ref:n},d),{},{components:r})):t.createElement(w,i({ref:n},d))}));d.displayName="MDXCreateElement"}}]);