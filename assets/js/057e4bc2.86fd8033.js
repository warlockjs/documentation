"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[203],{4740:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var i=s(4848),o=s(8453);const t={sidebar_position:8},r="Lookup (Joins)",l={id:"cascade/aggregate/lookup",title:"Lookup (Joins)",description:"Perform lookups (joins) on your collections.",source:"@site/docs/cascade/aggregate/lookup.mdx",sourceDirName:"cascade/aggregate",slug:"/cascade/aggregate/lookup",permalink:"/docs/cascade/aggregate/lookup",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"mongodb",previous:{title:"Group By",permalink:"/docs/cascade/aggregate/group-by"},next:{title:"Advanced Usage",permalink:"/docs/cascade/aggregate/advanced"}},a={},c=[{value:"Method Signature",id:"method-signature",level:2},{value:"Example",id:"example",level:2},{value:"Lookup with multiple documents",id:"lookup-with-multiple-documents",level:2},{value:"Lookup with pipeline",id:"lookup-with-pipeline",level:2},{value:"Calling MongoDB Aggregate stages",id:"calling-mongodb-aggregate-stages",level:2},{value:"Available stages to use",id:"available-stages-to-use",level:3},{value:"Lookup with let",id:"lookup-with-let",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"lookup-joins",children:"Lookup (Joins)"}),"\n",(0,i.jsx)(n.p,{children:"Perform lookups (joins) on your collections."}),"\n",(0,i.jsxs)(n.p,{children:["Before we get started, please review the ",(0,i.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/#lookup-pipeline",children:"Lookup Pipeline"})," documentation."]}),"\n",(0,i.jsx)(n.h2,{id:"method-signature",children:"Method Signature"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"public lookup(options: LookupPipelineOptions): this;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Where ",(0,i.jsx)(n.code,{children:"LookupOptions"})," is:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type LookupPipelineOptions = {\r\n  from: string;\r\n  localField?: string;\r\n  foreignField?: string;\r\n  as?: string;\r\n  single?: boolean;\r\n  pipeline?: (Pipeline | GenericObject)[];\r\n  let?: GenericObject;\r\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Let's see a basic example, let's see we need to load posts with the updated data of the authors from users collection."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const posts = await new Aggregate("posts")\r\n  .lookup({\r\n    from: "users",\r\n    localField: "author.id",\r\n    foreignField: "id",\r\n    as: "author",\r\n    single: true,\r\n  })\r\n  .get();\n'})}),"\n",(0,i.jsxs)(n.p,{children:["By adding ",(0,i.jsx)(n.code,{children:"single"})," option, it will return the first document in the array."]}),"\n",(0,i.jsx)(n.h2,{id:"lookup-with-multiple-documents",children:"Lookup with multiple documents"}),"\n",(0,i.jsx)(n.p,{children:"Let's load posts with their comments."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const posts = await new Aggregate("posts")\r\n  .lookup({\r\n    from: "comments",\r\n    localField: "id",\r\n    foreignField: "postId",\r\n    as: "comments",\r\n  })\r\n  .get();\n'})}),"\n",(0,i.jsx)(n.p,{children:"This will load with each post all the comments that belong to it."}),"\n",(0,i.jsx)(n.h2,{id:"lookup-with-pipeline",children:"Lookup with pipeline"}),"\n",(0,i.jsx)(n.p,{children:"Let's load posts with their comments, but we want to load only the comments that have more than 10 likes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const posts = await new Aggregate("posts")\r\n  .lookup({\r\n    from: "comments",\r\n    localField: "id",\r\n    foreignField: "postId",\r\n    as: "comments",\r\n    pipeline: [\r\n      {\r\n        $match: {\r\n          likes: {\r\n            $gt: 10,\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  })\r\n  .get();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"calling-mongodb-aggregate-stages",children:"Calling MongoDB Aggregate stages"}),"\n",(0,i.jsx)(n.p,{children:"Most of MongoDB Aggregate stages are exported separately, so we can use them directly in the pipelines."}),"\n",(0,i.jsx)(n.p,{children:"Let's load posts with their comments, but we want to load only the comments that have more than 10 likes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { wherePipeline, parsePipelines } from "@warlock.js/cascade";\r\n\r\nconst posts = await new Aggregate("posts")\r\n  .lookup({\r\n    from: "comments",\r\n    localField: "id",\r\n    foreignField: "postId",\r\n    as: "comments",\r\n    pipeline: parsePipelines([wherePipeline("likes", ">", 10)]),\r\n  })\r\n  .get();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"available-stages-to-use",children:"Available stages to use"}),"\n",(0,i.jsxs)(n.p,{children:["Here are the available stages to use with ",(0,i.jsx)(n.code,{children:"parsePipelines"})," function:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"wherePipeline"}),": Receives same arguments as ",(0,i.jsx)(n.code,{children:"where"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"limitPipeline"}),": Receives same arguments as ",(0,i.jsx)(n.code,{children:"limit"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skipPipeline"}),": Receives same arguments as ",(0,i.jsx)(n.code,{children:"skip"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sortPipeline"}),": Receives same arguments as ",(0,i.jsx)(n.code,{children:"sort"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sortByPipeline"}),": Receives same arguments as ",(0,i.jsx)(n.code,{children:"sortBy"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sortRandomPipeline"}),": Receives same arguments as ",(0,i.jsx)(n.code,{children:"random"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"selectPipeline"}),": Receives same arguments as ",(0,i.jsx)(n.code,{children:"select"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"deselectPipeline"}),": Receives same arguments as ",(0,i.jsx)(n.code,{children:"deselect"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"groupByPipeline"}),": Receives same arguments as ",(0,i.jsx)(n.code,{children:"groupBy"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"lookupPipeline"}),": Receives same arguments as ",(0,i.jsx)(n.code,{children:"lookup"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"orWherePipeline"}),": Receives same arguments as ",(0,i.jsx)(n.code,{children:"orWhere"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"unwindPipeline"}),": Receives same arguments as ",(0,i.jsx)(n.code,{children:"unwind"})," method."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"lookup-with-let",children:"Lookup with let"}),"\n",(0,i.jsx)(n.p,{children:"Let's load posts with their comments, but we want to load only the comments that have more than 10 likes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const posts = await new Aggregate("posts")\r\n  .lookup({\r\n    from: "comments",\r\n    localField: "id",\r\n    foreignField: "postId",\r\n    as: "comments",\r\n    let: {\r\n      postId: "$id",\r\n    },\r\n    pipeline: [\r\n      {\r\n        $match: {\r\n          $expr: {\r\n            $and: [\r\n              {\r\n                $eq: ["$postId", "$$postId"],\r\n              },\r\n              {\r\n                $gt: ["$likes", 10],\r\n              },\r\n            ],\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  })\r\n  .get();\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["This is just the native MongoDB syntax, you can use it directly in the ",(0,i.jsx)(n.code,{children:"pipeline"})," option."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var i=s(6540);const o={},t=i.createContext(o);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);