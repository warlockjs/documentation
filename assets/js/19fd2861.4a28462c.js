"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[3338],{4792:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=n(4848),i=n(5680);const o={sidebar_position:2},r="Road Map",s={id:"cascade/getting-started/roadmap",title:"Road Map",description:"This document will guide you where to start and what to do next.",source:"@site/docs/cascade/getting-started/roadmap.mdx",sourceDirName:"cascade/getting-started",slug:"/cascade/getting-started/roadmap",permalink:"/docs/cascade/getting-started/roadmap",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mongodb",previous:{title:"Introduction",permalink:"/docs/cascade/getting-started/introduction"},next:{title:"Installation",permalink:"/docs/cascade/getting-started/installation"}},c={},d=[{value:"Terminology",id:"terminology",level:2},{value:"1. Installation",id:"1-installation",level:2},{value:"2. Connecting To Database &amp; Configuration",id:"2-connecting-to-database--configuration",level:2},{value:"3. Basic CRUD Operations",id:"3-basic-crud-operations",level:2},{value:"4. Understanding Models",id:"4-understanding-models",level:2},{value:"5. Aggregate Framework",id:"5-aggregate-framework",level:2},{value:"7. Advanced Concepts",id:"7-advanced-concepts",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,i.RP)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"road-map",children:"Road Map"}),"\n",(0,a.jsx)(t.p,{children:"This document will guide you where to start and what to do next."}),"\n",(0,a.jsx)(t.h2,{id:"terminology",children:"Terminology"}),"\n",(0,a.jsx)(t.p,{children:"Before we get started with our Road Map, let's talk about some terminology that we will be using throughout the documentation."}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"collection"}),": A collection is set of documents in database, in SQL databases it is called ",(0,a.jsx)(t.code,{children:"table"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"document"}),": A document a set of data that combined in one object, you may visualize it like a json object, a document is a single record in the collection, in SQL databases it is called ",(0,a.jsx)(t.code,{children:"row"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"field"}),": A field is a single property of a document, in SQL databases it is called ",(0,a.jsx)(t.code,{children:"column"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"query"}),": A query is a request to the database to perform an action, in SQL databases it is called ",(0,a.jsx)(t.code,{children:"query"})," as well."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"model"}),": A model is a class that manages a collection's document."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"schema"}),": A schema is the blueprint of a collection in the database, it defines the fields and their types."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"aggregate"}),": An aggregate is a pipeline of stages that perform a set of operations on the documents in the collection."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"CRUD"}),": CRUD is an acronym for ",(0,a.jsx)(t.code,{children:"Create"}),", ",(0,a.jsx)(t.code,{children:"Read"}),", ",(0,a.jsx)(t.code,{children:"Update"}),", ",(0,a.jsx)(t.code,{children:"Delete"}),", it is a set of operations that can be performed on a document in a collection."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"pagination"}),": Pagination is a technique to split the results of a query into multiple pages, it is used to reduce the amount of data that is returned from the database, this is useful when you have a large amount of data."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"explain"}),": Explain is a method that returns information about the query execution, it is useful for debugging and optimizing queries."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"upsert"}),": Upsert is a method that updates a document if it exists, otherwise it creates a new document."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Now let's get started."}),"\n",(0,a.jsx)(t.h2,{id:"1-installation",children:"1. Installation"}),"\n",(0,a.jsxs)(t.p,{children:["Of course you would need to install the package first. You can do that by following the ",(0,a.jsx)(t.a,{href:"./installation",children:"installation guide"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"2-connecting-to-database--configuration",children:"2. Connecting To Database & Configuration"}),"\n",(0,a.jsxs)(t.p,{children:["Next, we need to establish our database connection and set the package configurations, you can do that by following the ",(0,a.jsx)(t.a,{href:"./connecting-to-database",children:"connecting to database guide"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"3-basic-crud-operations",children:"3. Basic CRUD Operations"}),"\n",(0,a.jsxs)(t.p,{children:["Now that we have our database connection established, we can start doing some basic CRUD operations. Let's start with the most basic one, ",(0,a.jsx)(t.a,{href:"./../queries/introduction",children:"creating a record"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"4-understanding-models",children:"4. Understanding Models"}),"\n",(0,a.jsxs)(t.p,{children:["Let's start with the most important part ",(0,a.jsx)(t.a,{href:"./../models/introduction",children:"models"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"5-aggregate-framework",children:"5. Aggregate Framework"}),"\n",(0,a.jsxs)(t.p,{children:["Now that we have a basic understanding of models, let's move on to the ",(0,a.jsx)(t.a,{href:"./../aggregate/introduction",children:"aggregate framework"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"7-advanced-concepts",children:"7. Advanced Concepts"}),"\n",(0,a.jsxs)(t.p,{children:["Dive deeply into the ",(0,a.jsx)(t.a,{href:"./../advanced/introduction",children:"advanced concepts"})," of the package."]})]})}function h(e={}){const{wrapper:t}={...(0,i.RP)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},5680:(e,t,n)=>{n.d(t,{RP:()=>d});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=d(n),p=i,g=u["".concat(c,".").concat(p)]||u[p]||l[p]||o;return n?a.createElement(g,r(r({ref:t},h),{},{components:n})):a.createElement(g,r({ref:t},h))}));h.displayName="MDXCreateElement"}}]);