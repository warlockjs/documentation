"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[9042],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,h=u["".concat(l,".").concat(c)]||u[c]||m[c]||o;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1183:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const o={sidebar_position:3},r="Repository Listing",s={unversionedId:"warlock/repositories/listing",id:"warlock/repositories/listing",title:"Repository Listing",description:"Probably the most common task that the repository is responsible for is listing the records. The RepositoryManager class provides a comprehensive set of methods that you can use to retrieve data from the database.",source:"@site/docs/warlock/repositories/listing.mdx",sourceDirName:"warlock/repositories",slug:"/warlock/repositories/listing",permalink:"/mongez/docs/warlock/repositories/listing",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"warlock",previous:{title:"Introduction",permalink:"/mongez/docs/warlock/repositories/introduction"},next:{title:"Repository Caching",permalink:"/mongez/docs/warlock/repositories/caching"}},l={},p=[{value:"Listing documents",id:"listing-documents",level:2},{value:"Pagination First Class Support",id:"pagination-first-class-support",level:2},{value:"List options",id:"list-options",level:2},{value:"Default options",id:"default-options",level:3},{value:"Pagination",id:"pagination",level:3},{value:"Filter By",id:"filter-by",level:2},{value:"Basic filters",id:"basic-filters",level:3},{value:"Using column names",id:"using-column-names",level:3},{value:"Using custom filters",id:"using-custom-filters",level:3},{value:"Perform option",id:"perform-option",level:3},{value:"Order By",id:"order-by",level:2},{value:"Order by single column",id:"order-by-single-column",level:3},{value:"Order by array",id:"order-by-array",level:3},{value:"Order by multiple columns (object)",id:"order-by-multiple-columns-object",level:3},{value:"Sort By And Sort Direction",id:"sort-by-and-sort-direction",level:3},{value:"Order By Randomly",id:"order-by-randomly",level:3},{value:"Overriding the order",id:"overriding-the-order",level:3},{value:"Select Option",id:"select-option",level:2},{value:"Deselect Option",id:"deselect-option",level:2},{value:"Default filters",id:"default-filters",level:2},{value:"Get all documents",id:"get-all-documents",level:2},{value:"Find a document",id:"find-a-document",level:2},{value:"Find by",id:"find-by",level:2},{value:"Get document",id:"get-document",level:2},{value:"Find first document",id:"find-first-document",level:2},{value:"Find last document",id:"find-last-document",level:2},{value:"Get latest documents",id:"get-latest-documents",level:2},{value:"Get oldest documents",id:"get-oldest-documents",level:2},{value:"Count documents",id:"count-documents",level:2},{value:"Chunks",id:"chunks",level:2},{value:"Active documents",id:"active-documents",level:2}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"repository-listing"},"Repository Listing"),(0,i.kt)("p",null,"Probably the most common task that the repository is responsible for is listing the records. The ",(0,i.kt)("inlineCode",{parentName:"p"},"RepositoryManager")," class provides a comprehensive set of methods that you can use to retrieve data from the database."),(0,i.kt)("h2",{id:"listing-documents"},"Listing documents"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method is used to fetch documents from the database. The ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method accepts a set of options that you can use to filter the results."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst { documents: users, paginationInfo } = await usersRepository.list({\n  name: "John",\n});\n')),(0,i.kt)("p",null,"As you can see, the ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method enables ",(0,i.kt)("inlineCode",{parentName:"p"},"pagination")," by default, well, this is going to be the most common method in the application to call, or any sub-method that internally calls it."),(0,i.kt)("h2",{id:"pagination-first-class-support"},"Pagination First Class Support"),(0,i.kt)("p",null,"As mentioned earlier, we ",(0,i.kt)("inlineCode",{parentName:"p"},"embraces")," pagination due to its importance in the application, so we made it the default behavior for the ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method."),(0,i.kt)("p",null,"The list method returns an object with two properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"documents"),": an array of documents."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"paginationInfo"),": an object that contains the pagination information.")),(0,i.kt)("p",null,"The documents returned from any repository method is the model of the repository itself."),(0,i.kt)("h2",{id:"list-options"},"List options"),(0,i.kt)("p",null,"The repository class has a ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultOptions")," which includes pagination information and ordering, the following type indicates the default options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'export type RepositoryOptions = {\n  /**\n   * Default limit for listing\n   *\n   * @default 15\n   */\n  defaultLimit?: number;\n  /**\n   * Whether to paginate the results or not\n   *\n   * @default true\n   */\n  paginate?: boolean;\n  /**\n   * If passed, it will be used instead of the default limit\n   *\n   * @default undefined\n   */\n  limit?: number;\n  /**\n   * Page number\n   *\n   * @default 1\n   */\n  page?: number;\n  /**\n   * Select only the passed columns, useful for performance\n   *\n   * @default *\n   */\n  select?: string[];\n  /**\n   * Deselect the given array of columns, useful when need to hide some columns\n   * especially when dealing with conditional data\n   */\n  deselect?: string[];\n  /**\n   * Whether to clear cache, works only when cache is enabled\n   */\n  purgeCache?: boolean;\n  /**\n   * Order the documents.\n   * It can be an object, the key is the column name and the value is the order direction it can be asc or desc\n   * It could also be an array, first item is the column name and the second is the order direction\n   * If set to `random` the documents will be ordered randomly\n   *\n   * @default {id: \'desc\'}\n   */\n  orderBy?:\n    | "random"\n    | [string, "asc" | "desc"]\n    | {\n        [key: string]: "asc" | "desc";\n      };\n  /**\n   * Perform a query by using the query aggregate, useful for advanced queries\n   */\n  perform?: (query: ModelAggregate<any>, options: RepositoryOptions) => void;\n  /**\n   * Any additional options to be passed to the list method\n   */\n  [key: string]: any;\n};\n')),(0,i.kt)("p",null,"So when this options are being called/executed? well, these are the ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method options that may be passed to the method, for example, if we want to get all documents up to 200 but without pagination, we can do the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst { documents: users, paginationInfo } = await usersRepository.list({\n  limit: 200,\n  paginate: false,\n});\n')),(0,i.kt)("h3",{id:"default-options"},"Default options"),(0,i.kt)("p",null,"Now let's see a basic repository with ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultOptions")," property:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{17} title="src/app/users/repositories/users.repository.ts"',"{17}":!0,title:'"src/app/users/repositories/users.repository.ts"'},'import {\n  FilterByOptions,\n  RepositoryManager,\n  RepositoryOptions,\n} from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport class UsersRepository extends RepositoryManager<User> {\n  /**\n   * {@inheritDoc}\n   */\n  public model = User;\n\n  /**\n   * List default options\n   */\n  protected defaultOptions: RepositoryOptions = {};\n\n  /**\n   * Filter By options\n   */\n  protected filterBy: FilterByOptions = {};\n}\n\nconst usersRepository = new UsersRepository();\n\nexport default usersRepository;\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultOptions")," here is an empty object which means there will no be default options assigned to the options when the ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method (or one of its siblings) being called."),(0,i.kt)("p",null,"To add the default options, wrap the object with ",(0,i.kt)("inlineCode",{parentName:"p"},"withDefaultOptions")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{17} title="src/app/users/repositories/users.repository.ts"',"{17}":!0,title:'"src/app/users/repositories/users.repository.ts"'},'import {\n  FilterByOptions,\n  RepositoryManager,\n  RepositoryOptions,\n} from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport class UsersRepository extends RepositoryManager<User> {\n  /**\n   * {@inheritDoc}\n   */\n  public model = User;\n\n  /**\n   * List default options\n   */\n  protected defaultOptions: RepositoryOptions = this.withDefaultOptions({\n    // override the default options here\n  });\n\n  /**\n   * Filter By options\n   */\n  protected filterBy: FilterByOptions = {};\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"withDefaultOptions")," method accepts an object of type ",(0,i.kt)("inlineCode",{parentName:"p"},"RepositoryOptions")," and returns the same object with the default options merged into it."),(0,i.kt)("p",null,"Default options that are shipped with the method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'export const defaultRepositoryOptions: RepositoryOptions = {\n  defaultLimit: 15,\n  paginate: true,\n  orderBy: {\n    id: "desc",\n  },\n};\n')),(0,i.kt)("h3",{id:"pagination"},"Pagination"),(0,i.kt)("p",null,"As mentioned earlier, pagination is enabled by default, you can either disable this behavior by overriding it from the repository ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultOptions")," property, or by passing ",(0,i.kt)("inlineCode",{parentName:"p"},"paginate: false")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method options."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst { documents: users } = await usersRepository.list({\n  paginate: false,\n});\n')),(0,i.kt)("p",null,"The output will remain the same, except that ",(0,i.kt)("a",{parentName:"p",href:"./../../monpulse/aggregate/fetching#pagination"},"paginationInfo")," object will not be returned."),(0,i.kt)("h2",{id:"filter-by"},"Filter By"),(0,i.kt)("p",null,"Now let's head to the big deal, the filters, that's what makes our repository shine in the sky, the ",(0,i.kt)("inlineCode",{parentName:"p"},"filterBy")," property is an object that contains the filters that you can use to filter the results."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"filterBy")," property is an object that contains the filters that you can use to filter the results."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{22} title="src/app/users/repositories/users.repository.ts"',"{22}":!0,title:'"src/app/users/repositories/users.repository.ts"'},'import {\n  FilterByOptions,\n  RepositoryManager,\n  RepositoryOptions,\n} from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport class UsersRepository extends RepositoryManager<User> {\n  /**\n   * {@inheritDoc}\n   */\n  public model = User;\n\n  /**\n   * List default options\n   */\n  protected defaultOptions: RepositoryOptions = this.withDefaultOptions();\n\n  /**\n   * Filter By options\n   */\n  protected filterBy: FilterByOptions = {};\n}\n')),(0,i.kt)("p",null,"So how this works exactly? Let's find out."),(0,i.kt)("h3",{id:"basic-filters"},"Basic filters"),(0,i.kt)("p",null,"Filters are listed in the ",(0,i.kt)("inlineCode",{parentName:"p"},"filterBy")," property, it is a key/value object, the key is the filter option that will be passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method, the value is how the repository going to handle this filter."),(0,i.kt)("p",null,"Let's take an example of usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{22} title="src/main.ts"',"{22}":!0,title:'"src/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst { documents: users } = await usersRepository.list({\n  name: "John",\n});\n')),(0,i.kt)("p",null,"Here we passed an option called ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", now we need to tell the repository listing manager how to deal with this option, so we need to add it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"filterBy")," property:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{22} title="src/app/users/repositories/users.repository.ts"',"{22}":!0,title:'"src/app/users/repositories/users.repository.ts"'},'import {\n  FilterByOptions,\n  RepositoryManager,\n  RepositoryOptions,\n} from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport class UsersRepository extends RepositoryManager<User> {\n  /**\n   * {@inheritDoc}\n   */\n  public model = User;\n\n  /**\n   * List default options\n   */\n  protected defaultOptions: RepositoryOptions = this.withDefaultOptions();\n\n  /**\n   * Filter By options\n   */\n  protected filterBy: FilterByOptions = {\n    name: "like",\n  };\n}\n')),(0,i.kt)("p",null,"Now the repository knows how to deal with the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," option, it will use the ",(0,i.kt)("inlineCode",{parentName:"p"},"like")," filter to filter the results."),(0,i.kt)("p",null,"If we want to transform it into a query it will look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'query.where("name", "like", "John");\n\n// OR\nquery.whereLike("name", "John");\n')),(0,i.kt)("p",null,"So what are the other types than ",(0,i.kt)("inlineCode",{parentName:"p"},"like")," that we can add to the ",(0,i.kt)("inlineCode",{parentName:"p"},"filterBy")," property? Well, its a tremendous list, let's see them all."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'export type FilterOptionType =\n  | "bool"\n  | "boolean"\n  | "number"\n  | "inNumber"\n  | "null"\n  | "notNull"\n  | "!null"\n  | "int"\n  | "int>"\n  | "int>="\n  | "int<"\n  | "int<="\n  | "in"\n  | "!int"\n  | "integer"\n  | "inInt"\n  | "float"\n  | "double"\n  | "inFloat"\n  | "date"\n  | "inDate"\n  | "date>"\n  | "date>="\n  | "date<"\n  | "date<="\n  | "dateBetween"\n  | "dateTime"\n  | "inDateTime"\n  | "dateTime>"\n  | "dateTime>="\n  | "dateTime<"\n  | "dateTime<="\n  | "dateTimeBetween"\n  | "location";\n')),(0,i.kt)("p",null,"Any of these values can be used as a filter, the key will be teh option name from the list method and also ",(0,i.kt)("strong",{parentName:"p"},"will be the column that we will search for")," and the filter value will be one of the above values."),(0,i.kt)("p",null,"Let's go through it one by one."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": the value will be converted to a boolean value, any value other than ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," will be converted to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"number"),": the value will be converted to a number, any value other than a number will be converted to ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"inNumber"),": the value will be converted to a number, any value other than a number will be converted to ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),", this will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},"query.whereIn(column, value)"),", the option's value can be a number or an array of number, the listing manager will handle it."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"null"),": the value will be converted to ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),", query will be ",(0,i.kt)("inlineCode",{parentName:"li"},"query.whereNull(column)"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"notNull")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"!null"),": the value will be converted to ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),", query will be ",(0,i.kt)("inlineCode",{parentName:"li"},"query.whereNotNull(column)"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"integer"),": the value will be converted to an integer, any value other than an integer will be converted to ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"!int"),": parse the value to integer, make a query to find results that has value not equal to the passed value, query will be ",(0,i.kt)("inlineCode",{parentName:"li"},'query.where(column, "!=", value)'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int>"),": parse the value to integer, make a query to find results that has value greater than the passed value, query will be ",(0,i.kt)("inlineCode",{parentName:"li"},'query.where(column, ">", value)'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int>="),": parse the value to integer, make a query to find results that has value greater than or equal to the passed value, query will be ",(0,i.kt)("inlineCode",{parentName:"li"},'query.where(column, ">=", value)'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int<"),": parse the value to integer, make a query to find results that has value less than the passed value, query will be ",(0,i.kt)("inlineCode",{parentName:"li"},'query.where(column, "<", value)'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int<="),": parse the value to integer, make a query to find results that has value less than or equal to the passed value, query will be ",(0,i.kt)("inlineCode",{parentName:"li"},'query.where(column, "<=", value)'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"in"),": make a query to find results that has value in the passed value, query will be ",(0,i.kt)("inlineCode",{parentName:"li"},"query.whereIn(column, value)"),", the option's value can be a single value or an array, the listing manager will handle it."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"double"),": the value will be converted to a float, any value other than a float will be converted to ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"inFloat"),": the value will be converted to a float, any value other than a float will be converted to ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),", this will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},"query.whereIn(column, value)"),", the option's value can be a float or an array of float, the listing manager will handle it."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"date"),": the value must be a ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," object or a value that the Date object can parse, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},"query.whereDate(column, value)"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"inDate"),": the value must be a ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," object or a value that the Date object can parse, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},"query.whereIn(column, value)"),", the option's value can be a single value or an array, the listing manager will handle it."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"date>"),": Find document(s) that the column's date value is greater than the given option's value, the value must be a ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," object or a value that the Date object can parse, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},'query.where(column, ">", value)'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"date>="),": Find document(s) that the column's date value is greater than or equal to the given option's value, the value must be a ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," object or a value that the Date object can parse, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},'query.where(column, ">=", value)'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"date<"),": Find document(s) that the column's date value is less than the given option's value, the value must be a ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," object or a value that the Date object can parse, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},'query.where(column, "<", value)'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"date<="),": Find document(s) that the column's date value is less than or equal to the given option's value, the value must be a ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," object or a value that the Date object can parse, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},'query.where(column, "<=", value)'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dateBetween"),": Find document(s) that the column's date value is between the given option's value, the value must be an array of two ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," objects or values that the Date object can parse, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},"query.whereBetween(column, value)"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dateTime"),": the value must be a ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," object or a value that the Date object can parse, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},"query.whereDateTime(column, value)"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"inDateTime"),": the value must be a ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," object or a value that the Date object can parse, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},"query.whereIn(column, value)"),", the option's value can be a single value or an array, the listing manager will handle it."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dateTime>"),": Find document(s) that the column's date time value is greater than the given option's value, the value must be a ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," object or a value that the Date object can parse, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},'query.where(column, ">", value)'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dateTime>="),": Find document(s) that the column's date time value is greater than or equal to the given option's value, the value must be a ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," object or a value that the Date object can parse, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},'query.where(column, ">=", value)'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dateTime<"),": Find document(s) that the column's date time value is less than the given option's value, the value must be a ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," object or a value that the Date object can parse, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},'query.where(column, "<", value)'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dateTime<="),": Find document(s) that the column's date time value is less than or equal to the given option's value, the value must be a ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," object or a value that the Date object can parse, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},'query.where(column, "<=", value)'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dateTimeBetween"),": Find document(s) that the column's date time value is between the given option's value, the value must be an array of two ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," objects or values that the Date object can parse, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},"query.whereBetween(column, value)"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"location"),": the value must be an object that contains ",(0,i.kt)("inlineCode",{parentName:"li"},"lat")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"lng")," properties, it will make a query ",(0,i.kt)("inlineCode",{parentName:"li"},"query.whereLocation(column, value)"),", the value can be an object or an array of objects, the listing manager will handle it.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If the filter is a date type or dateTime type and the passed value is a ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", make sure that to define the format of that string using ",(0,i.kt)("inlineCode",{parentName:"p"},"dateFormat")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"dateTimeFormat")," properties in the repository class.")),(0,i.kt)("h3",{id:"using-column-names"},"Using column names"),(0,i.kt)("p",null,"Sometimes the option key may differ from the column name, for example we can set an option ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," but the column will be ",(0,i.kt)("inlineCode",{parentName:"p"},"createdBy.id")," that we will look into, in this case, the filter's value will be an array, the first value will be the filter type and the second will be the column name."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{23} title="src/app/users/repositories/users.repository.ts"',"{23}":!0,title:'"src/app/users/repositories/users.repository.ts"'},'import {\n  FilterByOptions,\n  RepositoryManager,\n  RepositoryOptions,\n} from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport class UsersRepository extends RepositoryManager<User> {\n  /**\n   * {@inheritDoc}\n   */\n  public model = User;\n\n  /**\n   * List default options\n   */\n  protected defaultOptions: RepositoryOptions = this.withDefaultOptions();\n\n  /**\n   * Filter By options\n   */\n  protected filterBy: FilterByOptions = {\n    user: ["int", "createdBy.id"],\n  };\n}\n')),(0,i.kt)("p",null,"Now the ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method will be used like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst { documents: users } = await usersRepository.list({\n  user: 1,\n});\n')),(0,i.kt)("p",null,"Thi will be converted to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'query.where("createdBy.id", 1);\n')),(0,i.kt)("h3",{id:"using-custom-filters"},"Using custom filters"),(0,i.kt)("p",null,"Another use case is when a value is not that simple to query with, in this case we can ",(0,i.kt)("inlineCode",{parentName:"p"},"perform")," a query on the passed value, for example, a gender is passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"SessionsRepository")," the passed option is the current user gender, but in sessions, the session has a ",(0,i.kt)("inlineCode",{parentName:"p"},"gender")," column which value will be one of ",(0,i.kt)("inlineCode",{parentName:"p"},"male"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"female")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"both"),"."),(0,i.kt)("p",null,"In this case, we want to run a query to search for the gender of the user + the ",(0,i.kt)("inlineCode",{parentName:"p"},"both")," value as well, so an example of usage will be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { sessionsRepository } from "app/sessions/repositories/sessions.repository";\n\nconst { documents: sessions, paginationInfo } = await sessionsRepository.list({\n  gender: "male",\n});\n')),(0,i.kt)("p",null,"Now let's define the repository filter for the ",(0,i.kt)("inlineCode",{parentName:"p"},"gender")," option to search for the value and also for the ",(0,i.kt)("inlineCode",{parentName:"p"},"both")," value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{23,24,25} title="src/app/sessions/repositories/sessions.repository.ts"',"{23,24,25}":!0,title:'"src/app/sessions/repositories/sessions.repository.ts"'},'import {\n  FilterByOptions,\n  RepositoryManager,\n  RepositoryOptions,\n} from "@mongez/warlock";\nimport { Session } from "../models/session";\n\nexport class SessionsRepository extends RepositoryManager<Session> {\n  /**\n   * {@inheritDoc}\n   */\n  public model = Session;\n\n  /**\n   * List default options\n   */\n  protected defaultOptions: RepositoryOptions = this.withDefaultOptions();\n\n  /**\n   * Filter By options\n   */\n  protected filterBy: FilterByOptions = {\n    gender: (gender, query) => {\n      query.whereIn("gender", [gender, "both"]);\n    },\n  };\n}\n\n//...\n')),(0,i.kt)("p",null,"Here what we did is we added a custom function callback that receives the passed value which is in our case will be ",(0,i.kt)("inlineCode",{parentName:"p"},"male")," that will be passed as the first argument, and the second argument will be the ",(0,i.kt)("a",{parentName:"p",href:"./../../monpulse/aggregate/model-aggregate"},"Aggregate Query")," so we can perform a query on it."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The third argument to the callback is the entire object of the options passed to the list method.")),(0,i.kt)("h3",{id:"perform-option"},"Perform option"),(0,i.kt)("p",null,"In some situations, we may need to ",(0,i.kt)("inlineCode",{parentName:"p"},"perform")," a custom query on a particular ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method, this would not need an additional ",(0,i.kt)("inlineCode",{parentName:"p"},"filter")," to be added to, in this case, we can pass ",(0,i.kt)("inlineCode",{parentName:"p"},"perform")," callback that receives the ",(0,i.kt)("a",{parentName:"p",href:"./../../monpulse/aggregate/model-aggregate"},"Aggregate Query")," and the options object, this can be passed directly to the ",(0,i.kt)("inlineCode",{parentName:"p"},"list options"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{4,5,6} title="src/app/main.ts"',"{4,5,6}":!0,title:'"src/app/main.ts"'},'import { sessionsRepository } from "app/sessions/repositories/sessions.repository";\n\nconst { documents: sessions, paginationInfo } = await sessionsRepository.list({\n  perform: (query) => {\n    query.whereIn("gender", ["male", "both"]);\n  },\n});\n')),(0,i.kt)("h2",{id:"order-by"},"Order By"),(0,i.kt)("p",null,"As we saw in the ",(0,i.kt)("inlineCode",{parentName:"p"},"RepositoryOptions")," type, the ",(0,i.kt)("inlineCode",{parentName:"p"},"orderBy")," options has some nice features to use when ordering the results, let's see them all."),(0,i.kt)("h3",{id:"order-by-single-column"},"Order by single column"),(0,i.kt)("p",null,"To order documents by single column, we can do it in two ways: by passing an array or passing an objet:"),(0,i.kt)("h3",{id:"order-by-array"},"Order by array"),(0,i.kt)("p",null,"We can order documents by passing ",(0,i.kt)("inlineCode",{parentName:"p"},"orderBy")," with an array, the first item in the array is the column name and the second is the order direction:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst { documents: users, paginationInfo } = await usersRepository.list({\n  orderBy: ["name", "asc"],\n});\n')),(0,i.kt)("p",null,"This will order the documents by the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," column in ascending order."),(0,i.kt)("h3",{id:"order-by-multiple-columns-object"},"Order by multiple columns (object)"),(0,i.kt)("p",null,"If we want to order by multiple columns then pass an object to the ",(0,i.kt)("inlineCode",{parentName:"p"},"orderBy")," option, the key will be the column name, the value will be the order direction, either ",(0,i.kt)("inlineCode",{parentName:"p"},"asc")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"desc"),", let's order documents alphabetically by the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," column and by id descending:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst { documents: users, paginationInfo } = await usersRepository.list({\n  orderBy: {\n    name: "asc",\n    id: "desc",\n  },\n});\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Please note that the order of listed keys matter, as it will first order the user by name ascending, then by id descending.")),(0,i.kt)("h3",{id:"sort-by-and-sort-direction"},"Sort By And Sort Direction"),(0,i.kt)("p",null,"Another way to sort documents is by passing ",(0,i.kt)("inlineCode",{parentName:"p"},"sortBy")," that holds the column's name and ",(0,i.kt)("inlineCode",{parentName:"p"},"sortByDirection")," that holds the order direction, let's see an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst { documents: users, paginationInfo } = await usersRepository.list({\n  sortBy: "name",\n  sortByDirection: "asc",\n});\n')),(0,i.kt)("h3",{id:"order-by-randomly"},"Order By Randomly"),(0,i.kt)("p",null,"To order documents randomly, pass ",(0,i.kt)("inlineCode",{parentName:"p"},"random")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"orderBy")," option:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst { documents: users, paginationInfo } = await usersRepository.list({\n  orderBy: "random",\n});\n')),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Please note that the random order requires a ",(0,i.kt)("inlineCode",{parentName:"p"},"limit")," to be defined or `defaultLimit`` to be set, otherwise it will throw an error.")),(0,i.kt)("h3",{id:"overriding-the-order"},"Overriding the order"),(0,i.kt)("p",null,"You may have advanced ordering criteria, for example, we can give an order map for the frontend team with a meaningful words for ordering, for instance, orderBy value could be: ",(0,i.kt)("inlineCode",{parentName:"p"},"oldest")," ",(0,i.kt)("inlineCode",{parentName:"p"},"newest")," ",(0,i.kt)("inlineCode",{parentName:"p"},"bestSeller")," and so on, in this case, we can override the order by method in the repository list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{4,5,6,7,8,9,10,11,12,13,14,15,16,17,18} title="src/app/users/repositories/users.repository.ts"',"{4,5,6,7,8,9,10,11,12,13,14,15,16,17,18}":!0,title:'"src/app/users/repositories/users.repository.ts"'},'import {\n  FilterByOptions,\n  RepositoryManager,\n  RepositoryOptions,\n} from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport class UsersRepository extends RepositoryManager<User> {\n  /**\n   * {@inheritDoc}\n   */\n  public model = User;\n\n  /**\n   * List default options\n   */\n  protected defaultOptions: RepositoryOptions = this.withDefaultOptions();\n\n  /**\n   * Filter By options\n   */\n  protected filterBy: FilterByOptions = {};\n\n  /**\n   * {@inheritDoc}\n   */\n  protected orderBy(options: RepositoryOptions) {\n    const orderBy = options.orderBy;\n\n    if (! orderBy) {\n      return; // keep the default order\n    }\n\n    switch (orderBy) {\n      case "oldest":\n        return {\n          createdAt: "asc",\n        };\n      case "newest":\n        return {\n          createdAt: "desc",\n        };\n      case "bestSeller":\n        return {\n          sold: "desc",\n        };\n      default:\n        return orderBy;\n    }\n}\n')),(0,i.kt)("p",null,"In this case, we can pass ",(0,i.kt)("inlineCode",{parentName:"p"},"orderBy")," with the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"oldest"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"newest")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"bestSeller")," and it will be converted to the corresponding order."),(0,i.kt)("p",null,"If the method does not return anything, then the default order will be used."),(0,i.kt)("h2",{id:"select-option"},"Select Option"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"select")," option is used to select only the passed columns, useful for performance, for example, if we want to select only the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," columns from the ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," table, we can do the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst { documents: users, paginationInfo } = await usersRepository.list({\n  select: ["id", "name"],\n});\n')),(0,i.kt)("h2",{id:"deselect-option"},"Deselect Option"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"deselect")," option is used to deselect the passed columns, useful when need to hide some columns especially when dealing with conditional data, for example, if we want to hide the ",(0,i.kt)("inlineCode",{parentName:"p"},"password")," column from the ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," table, we can do the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst { documents: users, paginationInfo } = await usersRepository.list({\n  deselect: ["password"],\n});\n')),(0,i.kt)("h2",{id:"default-filters"},"Default filters"),(0,i.kt)("p",null,"As most collections have common filters, the repository manager can add some default filters to the ",(0,i.kt)("inlineCode",{parentName:"p"},"filterBy")," property, for example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"isActive")," column is a common column in most of the collections, in this case we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"withDefaultFilters")," method that receives same filters object, but defines multiple filters at once."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{22} title="src/app/users/repositories/users.repository.ts"',"{22}":!0,title:'"src/app/users/repositories/users.repository.ts"'},'import {\n  FilterByOptions,\n  RepositoryManager,\n  RepositoryOptions,\n} from "@mongez/warlock";\nimport { User } from "../models/user";\n\nexport class UsersRepository extends RepositoryManager<User> {\n  /**\n   * {@inheritDoc}\n   */\n  public model = User;\n\n  /**\n   * List default options\n   */\n  protected defaultOptions: RepositoryOptions = this.withDefaultOptions();\n\n  /**\n   * Filter By options\n   */\n  protected filterBy: FilterByOptions = this.withDefaultFilters({\n    email: "like",\n  });\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"withDefaultFilters")," will add the following filters:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'  /**\n   * Default filters list\n   */\n  protected defaultFilters: FilterByOptions = {\n    id: "int",\n    ids: ["inInt", "id"],\n    except: (id: any, query) => query.where("id", "!=", Number(id)),\n    createdBy: ["int", "createdBy.id"],\n    isActive: "boolean",\n  };\n')),(0,i.kt)("p",null,"So you don't need to define a filter for ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," or list of ",(0,i.kt)("inlineCode",{parentName:"p"},"ids"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"except"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"createdBy")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"isActive")," filters, you can of course use it, override it or simple ignore using the ",(0,i.kt)("inlineCode",{parentName:"p"},"withDefaultFilters")," method."),(0,i.kt)("h2",{id:"get-all-documents"},"Get all documents"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method is manly used with pagination, it always return an object that contains ",(0,i.kt)("inlineCode",{parentName:"p"},"documents")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"paginationInfo")," keys, unlike ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," method, it returns only the documents."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst users = await usersRepository.all();\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," methods takes the same options as ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Please note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," method is a syntactic sugar for ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method with ",(0,i.kt)("inlineCode",{parentName:"p"},"paginate")," option set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," and returns the ",(0,i.kt)("inlineCode",{parentName:"p"},"documents")," key from the returned object.")),(0,i.kt)("h2",{id:"find-a-document"},"Find a document"),(0,i.kt)("p",null,"To find a document by id, use ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst user = await usersRepository.find(1);\n')),(0,i.kt)("p",null,"The find method will return the document if found, otherwise it will return ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,i.kt)("h2",{id:"find-by"},"Find by"),(0,i.kt)("p",null,"To find a document by another column than the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," use ",(0,i.kt)("inlineCode",{parentName:"p"},"findBy")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst user = await usersRepository.findBy("name", "John");\n')),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Please note the ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"findBy")," methods do not call use the ",(0,i.kt)("inlineCode",{parentName:"p"},"repository")," options, for example if you passed ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," to find by it, it will make an exact match find and not using the ",(0,i.kt)("inlineCode",{parentName:"p"},"like")," filter in the repository, however it uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"first")," method though.")),(0,i.kt)("h2",{id:"get-document"},"Get document"),(0,i.kt)("p",null,"Another method called ",(0,i.kt)("inlineCode",{parentName:"p"},"get")," is used to find a document by ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", it may also receive an object of options as second argument, it uses under the hood the ",(0,i.kt)("inlineCode",{parentName:"p"},"first")," method."),(0,i.kt)("h2",{id:"find-first-document"},"Find first document"),(0,i.kt)("p",null,"To fetch only the first document, use ",(0,i.kt)("inlineCode",{parentName:"p"},"first")," method, it works by passing the same options as the ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method but it limits the result to one document only."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst user = await usersRepository.first({\n  name: "John",\n});\n')),(0,i.kt)("p",null,"If the document is not found, it will return ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Please note the ",(0,i.kt)("inlineCode",{parentName:"p"},"first")," method sets the order by to ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and the order direction is ",(0,i.kt)("inlineCode",{parentName:"p"},"desc"),", so the first document.")),(0,i.kt)("h2",{id:"find-last-document"},"Find last document"),(0,i.kt)("p",null,"Works exactly like ",(0,i.kt)("inlineCode",{parentName:"p"},"first")," but it reverses the documents order before returning the first document."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst user = await usersRepository.last({\n  name: "John",\n});\n')),(0,i.kt)("h2",{id:"get-latest-documents"},"Get latest documents"),(0,i.kt)("p",null,"To fetch the latest documents, use ",(0,i.kt)("inlineCode",{parentName:"p"},"latest")," method, it works by passing the same options as the ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method and returns the latest documents, the ",(0,i.kt)("inlineCode",{parentName:"p"},"orderBy")," option will be ignored."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst user = await usersRepository.latest({\n  name: "John",\n});\n')),(0,i.kt)("h2",{id:"get-oldest-documents"},"Get oldest documents"),(0,i.kt)("p",null,"Works exactly like ",(0,i.kt)("inlineCode",{parentName:"p"},"latest")," but it orders the documents in ascending order."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst user = await usersRepository.oldest({\n  name: "John",\n});\n')),(0,i.kt)("h2",{id:"count-documents"},"Count documents"),(0,i.kt)("p",null,"To count documents, use ",(0,i.kt)("inlineCode",{parentName:"p"},"count")," method, it works by passing the same options as the ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," method and returns the count of the documents."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nconst count = await usersRepository.count({\n  name: "John",\n});\n')),(0,i.kt)("h2",{id:"chunks"},"Chunks"),(0,i.kt)("p",null,"Sometimes it's best to works with the documents in chunks instead of fetching all of it in the memory, for example this is useful when we want to generate a sitemap or an excel sheet file from large collections, in this case we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"chunk")," method."),(0,i.kt)("p",null,"The chunk method receives the same ",(0,i.kt)("inlineCode",{parentName:"p"},"RepositoryOptions")," but it should have at least ",(0,i.kt)("inlineCode",{parentName:"p"},"limit")," or in the ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultOptions"),", if you're using ",(0,i.kt)("inlineCode",{parentName:"p"},"withDefaultOptions")," method, then you're good to go, otherwise define the limit or the function will throw an error, let's see an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nawait usersRepository.chunk({}, (users) => {\n  // handle the chunk\n});\n')),(0,i.kt)("p",null,"The first argument is the options, the second argument is a callback that will receive the chunked documents of users, you may also receive the second argument of the callback to get information about current pagination stats:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/main.ts"',title:'"src/app/main.ts"'},'import { usersRepository } from "app/users/repositories/users.repository";\n\nawait usersRepository.chunk({}, (users, pagination) => {\n  // handle the chunk\n  if (pagination.page === pagination.pages) {\n    // we are in the last chunk\n  }\n});\n')),(0,i.kt)("p",null,"If the callback returned ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", then it will be the last chunk and the loop will be stopped."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The chunk method will stop when the last chunk is reached, or when the callback returns ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", so if you're doing another processes after calling the chunk, don't forget to ",(0,i.kt)("inlineCode",{parentName:"p"},"await")," it.")),(0,i.kt)("h2",{id:"active-documents"},"Active documents"),(0,i.kt)("p",null,"A common usage in ",(0,i.kt)("inlineCode",{parentName:"p"},"Warlock")," is to define ",(0,i.kt)("inlineCode",{parentName:"p"},"isActive")," column in most of the models that need to be controlled by administrators, in this context, the repository manager defines many methods that is exactly the same as the previous ones but only for the active documents, therefore the repository manager is shipped with all previous methods but for ",(0,i.kt)("inlineCode",{parentName:"p"},"active")," documents only, just add ",(0,i.kt)("inlineCode",{parentName:"p"},"Active")," to the end of the method."),(0,i.kt)("p",null,"The methods are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"listActive")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allActive")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"findActive")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"findByActive")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getActive")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"firstActive")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lastActive")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"latestActive")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"oldestActive")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"countActive")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"chunkActive"))),(0,i.kt)("admonition",{title:"Active Cached",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"When ",(0,i.kt)("a",{parentName:"p",href:"./caching"},"Cache is enabled")," the corresponding cache methods for active documents will be enabled as well.")))}m.isMDXComponent=!0}}]);