"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[4250],{3300:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>h});var t=n(4848),c=n(5680);const i={sidebar_position:11},a="Make Your Own Cache Driver",s={id:"warlock/cache/make-your-own-cache-driver",title:"Make Your Own Cache Driver",description:"Warlock ships with a few cache drivers out of the box, but you can easily make your own. All you need to do is implement the CacheDriver interface.",source:"@site/docs/warlock/cache/make-your-own-cache-driver.mdx",sourceDirName:"warlock/cache",slug:"/warlock/cache/make-your-own-cache-driver",permalink:"/docs/warlock/cache/make-your-own-cache-driver",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"warlock",previous:{title:"Null Cache Driver",permalink:"/docs/warlock/cache/null"},next:{title:"Cache Utilities",permalink:"/docs/warlock/cache/utils"}},o={},h=[{value:"Example",id:"example",level:2},{value:"Setting the Options",id:"setting-the-options",level:2},{value:"Connecting to the Cache Driver",id:"connecting-to-the-cache-driver",level:2},{value:"Parsing the Key",id:"parsing-the-key",level:2},{value:"Setting a Value in the Cache",id:"setting-a-value-in-the-cache",level:2}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.RP)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"make-your-own-cache-driver",children:"Make Your Own Cache Driver"}),"\n",(0,t.jsxs)(r.p,{children:["Warlock ships with a few cache drivers out of the box, but you can easily make your own. All you need to do is implement the ",(0,t.jsx)(r.a,{href:"./cache-driver-interface",children:"CacheDriver interface"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(r.p,{children:["Let's say we want to implement the ",(0,t.jsx)(r.a,{href:"https://memcached.org/",children:"MemCached"})," cache driver. We'll start by creating a new file called ",(0,t.jsx)(r.code,{children:"memcached-cache-driver.ts"})," in your project's ",(0,t.jsx)(r.code,{children:"src/cache"})," directory."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'import { CacheDriver } from "@warlock.js/core";\r\nimport Memcached from "memcached";\r\n\r\n// first off let\'s define the options interface\r\n\r\nexport type MemCachedCacheDriverOptions = {\r\n  host: string;\r\n  port: number;\r\n};\r\n\r\n// now let\'s define our cache driver class\r\n\r\nexport class MemCachedCacheDriver\r\n  implements CacheDriver<Memcached, MemCachedCacheDriverOptions> {\r\n  //\r\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"Now let's see what we have done."}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"We have defined the options interface for our cache driver."}),"\n",(0,t.jsx)(r.li,{children:"We have defined the cache driver class."}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["Our driver must implement the ",(0,t.jsx)(r.a,{href:"./cache-driver-interface",children:"CacheDriver interface"}),", it takes two type parameters:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"The first one is the client type, this is the type of the client that the cache driver will be using."}),"\n",(0,t.jsx)(r.li,{children:"The second one is the options type, this is the type of the options that the cache driver will be using."}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"setting-the-options",children:"Setting the Options"}),"\n",(0,t.jsx)(r.p,{children:"Now let's define our options property, this property will hold the cache driver options."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"// ...\r\n\r\nexport class MemCachedCacheDriver\r\n  implements CacheDriver<Memcached, MemCachedCacheDriverOptions>\r\n{\r\n  /**\r\n   * The cache driver options\r\n   */\r\n  public options: MemCachedCacheDriverOptions = {} as any;\r\n\r\n  /**\r\n   * Set the cache driver options\r\n   */\r\n  public setOptions(options: MemCachedCacheDriverOptions) {\r\n    this.options = options;\r\n\r\n    return this;\r\n  }\r\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["We defined the ",(0,t.jsx)(r.code,{children:"options"})," property and set its type to ",(0,t.jsx)(r.code,{children:"MemCachedCacheDriverOptions"}),". We also defined the ",(0,t.jsx)(r.code,{children:"setOptions"})," method, this method will be used to set the cache driver options."]}),"\n",(0,t.jsx)(r.h2,{id:"connecting-to-the-cache-driver",children:"Connecting to the Cache Driver"}),"\n",(0,t.jsxs)(r.p,{children:["To make the driver connection established, we need to define the ",(0,t.jsx)(r.code,{children:"connect"})," method."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"// ...\r\n\r\nexport class MemCachedCacheDriver\r\n  implements CacheDriver<Memcached, MemCachedCacheDriverOptions>\r\n{\r\n  // ...\r\n\r\n  /**\r\n   * Connect to the cache driver\r\n   */\r\n  public async connect() {\r\n    this.client = new Memcached(`${this.options.host}:${this.options.port}`);\r\n\r\n    return this;\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"parsing-the-key",children:"Parsing the Key"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"parseKey"})," method is used to parse the key before it is used in the cache. This method is used to make sure that the key is in the correct format."]}),"\n",(0,t.jsxs)(r.p,{children:["We will use ",(0,t.jsx)(r.a,{href:"./utils#parse-cache-key",children:"Parse Cache Key utility"})," to parse the key."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'import { CacheDriver, parseCacheKey } from "@warlock.js/core";\r\nimport { GenericObject } from "@mongez/reinforcements";\r\n\r\n// ...\r\n\r\nexport class MemCachedCacheDriver\r\n  implements CacheDriver<Memcached, MemCachedCacheDriverOptions>\r\n{\r\n  // ...\r\n\r\n  /**\r\n   * Parse the key to be used in the cache\r\n   */\r\n  public parseKey(key: string | GenericObject) {\r\n    return parseCacheKey(key);\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"This function will make sure that the key is in the correct format."}),"\n",(0,t.jsx)(r.h2,{id:"setting-a-value-in-the-cache",children:"Setting a Value in the Cache"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"set"})," method is used to set a value in the cache. This method takes two parameters:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"The first one is the key that will be used to store the value in the cache."}),"\n",(0,t.jsx)(r.li,{children:"The second one is the value that will be stored in the cache."}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"// ...\r\n\r\nexport class MemCachedCacheDriver\r\n  implements CacheDriver<Memcached, MemCachedCacheDriverOptions>\r\n{\r\n  // ...\r\n\r\n  /**\r\n   * Set a value in the cache\r\n   */\r\n  public async set(key: string | GenericObject, value: any) {\r\n    const parsedKey = this.parseKey(key);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.client?.set(parsedKey, value, 0, (error) => {\r\n        if (error) {\r\n          return reject(error);\r\n        }\r\n\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n}\n"})})]})}function d(e={}){const{wrapper:r}={...(0,c.RP)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},5680:(e,r,n)=>{n.d(r,{RP:()=>h});var t=n(6540);function c(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){c(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,c=function(e,r){if(null==e)return{};var n,t,c={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(c[n]=e[n]);return c}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var o=t.createContext({}),h=function(e){var r=t.useContext(o),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},l={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,c=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=h(n),u=c,m=p["".concat(o,".").concat(u)]||p[u]||l[u]||i;return n?t.createElement(m,a(a({ref:r},d),{},{components:n})):t.createElement(m,a({ref:r},d))}));d.displayName="MDXCreateElement"}}]);