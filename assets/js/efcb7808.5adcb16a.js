"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[4780],{5698:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>g,toc:()=>l});var n=a(4848),t=a(5680);const s={sidebar_position:5},o="$agg",g={id:"cascade/aggregate/agg",title:"$agg",description:"The $agg utility is a helper that helps you build your aggregate query in a more readable way.",source:"@site/docs/cascade/aggregate/agg.mdx",sourceDirName:"cascade/aggregate",slug:"/cascade/aggregate/agg",permalink:"/docs/cascade/aggregate/agg",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"mongodb",previous:{title:"Filtering",permalink:"/docs/cascade/aggregate/filtering"},next:{title:"Skip",permalink:"/docs/cascade/aggregate/skip"}},c={},l=[{value:"Example of usage",id:"example-of-usage",level:2},{value:"Available methods",id:"available-methods",level:2},{value:"Count total documents",id:"count-total-documents",level:3},{value:"Sum field",id:"sum-field",level:3},{value:"Get Field Average",id:"get-field-average",level:3},{value:"Get Field Minimum Value",id:"get-field-minimum-value",level:3},{value:"Get Field Maximum Value",id:"get-field-maximum-value",level:3},{value:"Get Field First Value",id:"get-field-first-value",level:3},{value:"Get Field Last Value",id:"get-field-last-value",level:3},{value:"Greater than operator",id:"greater-than-operator",level:3},{value:"Greater than or equal operator",id:"greater-than-or-equal-operator",level:3},{value:"Less than operator",id:"less-than-operator",level:3},{value:"Less than or equal operator",id:"less-than-or-equal-operator",level:3},{value:"Equal operator",id:"equal-operator",level:3},{value:"Not equal operator",id:"not-equal-operator",level:3},{value:"In operator",id:"in-operator",level:3},{value:"In Array operator",id:"in-array-operator",level:3},{value:"Not in operator",id:"not-in-operator",level:3},{value:"Exists operator",id:"exists-operator",level:3},{value:"Not exists operator",id:"not-exists-operator",level:3},{value:"Regex operator",id:"regex-operator",level:3},{value:"Like operator",id:"like-operator",level:3},{value:"Not like operator",id:"not-like-operator",level:3},{value:"Not Null operator",id:"not-null-operator",level:2},{value:"Is Null operator",id:"is-null-operator",level:3},{value:"Between operator",id:"between-operator",level:3},{value:"Not between operator",id:"not-between-operator",level:3},{value:"Condition Operator",id:"condition-operator",level:3},{value:"Boolean Condition Operator",id:"boolean-condition-operator",level:3},{value:"Concat Operator",id:"concat-operator",level:3},{value:"Concat With Operator",id:"concat-with-operator",level:3},{value:"Year Operator",id:"year-operator",level:3},{value:"Month Operator",id:"month-operator",level:3},{value:"Day Of Month Operator",id:"day-of-month-operator",level:3},{value:"Day Of Week Operator",id:"day-of-week-operator",level:3},{value:"First Year Operator",id:"first-year-operator",level:3},{value:"Last Year Operator",id:"last-year-operator",level:3},{value:"First Month Operator",id:"first-month-operator",level:3},{value:"Last Month Operator",id:"last-month-operator",level:3},{value:"First Day Of Month Operator",id:"first-day-of-month-operator",level:3},{value:"Last Day Of Month Operator",id:"last-day-of-month-operator",level:3},{value:"Push operator",id:"push-operator",level:3},{value:"Columns Utility",id:"columns-utility",level:2},{value:"columnName utility",id:"columnname-utility",level:3}];function i(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,t.RP)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"agg",children:"$agg"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"$agg"})," utility is a helper that helps you build your aggregate query in a more readable way."]}),"\n",(0,n.jsx)(r.p,{children:"This would be used mostly with the group by stage to build the group by fields."}),"\n",(0,n.jsx)(r.p,{children:"Let's see an example"}),"\n",(0,n.jsx)(r.h2,{id:"example-of-usage",children:"Example of usage"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .groupBy("age", {\r\n    total: $agg.count(),\r\n    totalAges: $agg.sum("age"),\r\n    firstName: $agg.first("name"),\r\n    lastName: $agg.last("name"),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsx)(r.h2,{id:"available-methods",children:"Available methods"}),"\n",(0,n.jsx)(r.p,{children:"Here are the available methods:"}),"\n",(0,n.jsx)(r.h3,{id:"count-total-documents",children:"Count total documents"}),"\n",(0,n.jsx)(r.p,{children:"This method counts the total number of documents in the group."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .groupBy("gender", {\r\n    total: $agg.count(),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsx)(r.p,{children:"This will return something like this:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-json",children:'[\r\n  {\r\n    "_id": "male",\r\n    "total": 10\r\n  },\r\n  {\r\n    "_id": "female",\r\n    "total": 5\r\n  }\r\n]\n'})}),"\n",(0,n.jsx)(r.h3,{id:"sum-field",children:"Sum field"}),"\n",(0,n.jsxs)(r.p,{children:["To sum a column's value use ",(0,n.jsx)(r.code,{children:"$agg.sum"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .groupBy("gender", {\r\n    score: $agg.sum("score"),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsx)(r.h3,{id:"get-field-average",children:"Get Field Average"}),"\n",(0,n.jsxs)(r.p,{children:["To get the average of a column's value use ",(0,n.jsx)(r.code,{children:"$agg.avg"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .groupBy("gender", {\r\n    averageScore: $agg.avg("score"),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Alternatively, you can use ",(0,n.jsx)(r.code,{children:"average"})," method:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .groupBy("gender", {\r\n    averageScore: $agg.average("score"),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsx)(r.h3,{id:"get-field-minimum-value",children:"Get Field Minimum Value"}),"\n",(0,n.jsxs)(r.p,{children:["To get the minimum value of a column's value use ",(0,n.jsx)(r.code,{children:"$agg.min"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .groupBy(null, {\r\n    score: $agg.min("score"),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsx)(r.h3,{id:"get-field-maximum-value",children:"Get Field Maximum Value"}),"\n",(0,n.jsxs)(r.p,{children:["To get the maximum value of a column's value use ",(0,n.jsx)(r.code,{children:"$agg.max"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .groupBy(null, {\r\n    score: $agg.max("score"),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsx)(r.h3,{id:"get-field-first-value",children:"Get Field First Value"}),"\n",(0,n.jsxs)(r.p,{children:["As working with group by could be tricky, you may want to get the first value of a column, this is where ",(0,n.jsx)(r.code,{children:"$agg.first"})," method comes in handy."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .groupBy(null, {\r\n    firstName: $agg.first("name"),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:["Read more about ",(0,n.jsx)(r.a,{href:"https://docs.mongodb.com/manual/reference/operator/aggregation/first/",children:"first"})]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"get-field-last-value",children:"Get Field Last Value"}),"\n",(0,n.jsxs)(r.p,{children:["As working with group by could be tricky, you may want to get the last value of a column, this is where ",(0,n.jsx)(r.code,{children:"$agg.last"})," method comes in handy."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .groupBy(null, {\r\n    lastName: $agg.last("name"),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:["Read more about ",(0,n.jsx)(r.a,{href:"https://docs.mongodb.com/manual/reference/operator/aggregation/last/",children:"last"})]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"greater-than-operator",children:"Greater than operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the value of a field is greater than a specific value, use ",(0,n.jsx)(r.code,{children:"$agg.gt"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .where({\r\n    score: $agg.gt(10),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Alternatively, you can use ",(0,n.jsx)(r.code,{children:"greaterThan"})," method:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .where({\r\n    score: $agg.greaterThan(10),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsx)(r.h3,{id:"greater-than-or-equal-operator",children:"Greater than or equal operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the value of a field is greater than or equal a specific value, use ",(0,n.jsx)(r.code,{children:"$agg.gte"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .where({\r\n    score: $agg.gte(10),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Alternatively, you can use ",(0,n.jsx)(r.code,{children:"greaterThanOrEqual"})," method:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .where({\r\n    score: $agg.greaterThanOrEqual(10),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsx)(r.h3,{id:"less-than-operator",children:"Less than operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the value of a field is less than a specific value, use ",(0,n.jsx)(r.code,{children:"$agg.lt"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .where({\r\n    score: $agg.lt(10),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Alternatively, you can use ",(0,n.jsx)(r.code,{children:"lessThan"})," method:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .where({\r\n    score: $agg.lessThan(10),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsx)(r.h3,{id:"less-than-or-equal-operator",children:"Less than or equal operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the value of a field is less than or equal a specific value, use ",(0,n.jsx)(r.code,{children:"$agg.lte"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .where({\r\n    score: $agg.lte(10),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Alternatively, you can use ",(0,n.jsx)(r.code,{children:"lessThanOrEqual"})," method:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .where({\r\n    score: $agg.lessThanOrEqual(10),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsx)(r.h3,{id:"equal-operator",children:"Equal operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the value of a field is equal a specific value, use ",(0,n.jsx)(r.code,{children:"$agg.eq"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .where({\r\n    score: $agg.eq(10),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Alternatively, you can use ",(0,n.jsx)(r.code,{children:"$agg.equal"})," method:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .where({\r\n    score: $agg.equal(10),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsx)(r.h3,{id:"not-equal-operator",children:"Not equal operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the value of a field is not equal a specific value, use ",(0,n.jsx)(r.code,{children:"$agg.ne"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .where({\r\n    score: $agg.ne(10),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Alternatively, you can use ",(0,n.jsx)(r.code,{children:"$agg.notEqual"})," method:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .where({\r\n    score: $agg.notEqual(10),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsx)(r.h3,{id:"in-operator",children:"In operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the value of a field is in a specific array of values, use ",(0,n.jsx)(r.code,{children:"$agg.in"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate\r\n  .where({\r\n    score: $agg.in([10, 20, 30]),\r\n  })\r\n  .get();\n'})}),"\n",(0,n.jsx)(r.h3,{id:"in-array-operator",children:"In Array operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the value of a field is in a specific array of values, use ",(0,n.jsx)(r.code,{children:"$agg.inArray"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.where({\r\n  score: $agg.inArray([10, 20, 30]),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"not-in-operator",children:"Not in operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the value of a field is not in a specific array of values, use ",(0,n.jsx)(r.code,{children:"$agg.nin"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.where({\r\n  score: $agg.nin([10, 20, 30]),\r\n});\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Alternatively, you can use ",(0,n.jsx)(r.code,{children:"$agg.notIn"})," method:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.where({\r\n  score: $agg.notIn([10, 20, 30]),\r\n});\n'})}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:["Also ",(0,n.jsx)(r.code,{children:"$agg.notInArray"})," method is an alias for ",(0,n.jsx)(r.code,{children:"$agg.notIn"})," method."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"exists-operator",children:"Exists operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the field exists, use ",(0,n.jsx)(r.code,{children:"$agg.exists"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.where({\r\n  score: $agg.exists(),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"not-exists-operator",children:"Not exists operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the field does not exist, use ",(0,n.jsx)(r.code,{children:"$agg.notExists"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.where({\r\n  score: $agg.notExists(),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"regex-operator",children:"Regex operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the field matches a specific regular expression, use ",(0,n.jsx)(r.code,{children:"$agg.regex"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.where({\r\n  name: $agg.regex(/john/i),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"like-operator",children:"Like operator"}),"\n",(0,n.jsxs)(r.p,{children:["This is just a syntactic sugar for ",(0,n.jsx)(r.code,{children:"$agg.regex"})," method, to feel more comfortable with SQL syntax."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.where({\r\n  name: $agg.like(/john/i),\r\n});\n'})}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"like"})," operator will also make the search ignore the case of the given value if the given value is a string."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.where({\r\n  name: $agg.like("john"),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"not-like-operator",children:"Not like operator"}),"\n",(0,n.jsxs)(r.p,{children:["This is just a syntactic sugar for the ",(0,n.jsx)(r.strong,{children:"negate"})," of the given value of ",(0,n.jsx)(r.code,{children:"$agg.regex"})," method, to feel more comfortable with SQL syntax."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.where({\r\n  name: $agg.notLike(/john/i),\r\n});\n'})}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"notLike"})," operator will also make the search ignore the case of the given value if the given value is a string."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.where({\r\n  name: $agg.notLike("john"),\r\n});\n'})}),"\n",(0,n.jsx)(r.h2,{id:"not-null-operator",children:"Not Null operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the field is not null, use ",(0,n.jsx)(r.code,{children:"$agg.notNull"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.where({\r\n  name: $agg.notNull(),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"is-null-operator",children:"Is Null operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the field is null, use ",(0,n.jsx)(r.code,{children:"$agg.isNull"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.where({\r\n  name: $agg.isNull(),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"between-operator",children:"Between operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the field is between two values, use ",(0,n.jsx)(r.code,{children:"$agg.between"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.where({\r\n  score: $agg.between(10, 20),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"not-between-operator",children:"Not between operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the documents where the field is not between two values, use ",(0,n.jsx)(r.code,{children:"$agg.notBetween"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.where({\r\n  score: $agg.notBetween(10, 20),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"condition-operator",children:"Condition Operator"}),"\n",(0,n.jsx)(r.p,{children:"In some scenarios, you want to return a value if a condition is met, and return another value if the condition is not met."}),"\n",(0,n.jsxs)(r.p,{children:["To do so, you can use ",(0,n.jsx)(r.code,{children:"$agg.condition"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.select({\r\n  state: $agg.condition($agg.gte(90, "score"), "great", "bad"),\r\n});\n'})}),"\n",(0,n.jsxs)(r.p,{children:["This will return the value of the ",(0,n.jsx)(r.code,{children:"state"})," based on the users score, if it is greater than or equal 90, it will return ",(0,n.jsx)(r.code,{children:"great"}),", otherwise, it will return ",(0,n.jsx)(r.code,{children:"bad"}),"."]}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"$agg.cond"})," method is an alias for ",(0,n.jsx)(r.code,{children:"$agg.condition"})," method."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"boolean-condition-operator",children:"Boolean Condition Operator"}),"\n",(0,n.jsxs)(r.p,{children:["This is just a an easier way to return ",(0,n.jsx)(r.code,{children:"true"})," if condition is met, and ",(0,n.jsx)(r.code,{children:"false"})," if not."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.select({\r\n  isGoodUser: $agg.booleanCondition($agg.gte(90, "score")),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"concat-operator",children:"Concat Operator"}),"\n",(0,n.jsxs)(r.p,{children:["To concatenate two or more ",(0,n.jsx)(r.code,{children:"columns"}),", use ",(0,n.jsx)(r.code,{children:"$agg.concat"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.select({\r\n  fullName: $agg.concat("$firstName", " ", "$lastName"),\r\n});\n'})}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:["Please note that here if you want to concat columns, add ",(0,n.jsx)(r.code,{children:"$"})," sign before the column name, otherwise, it will be treated as a string."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"concat-with-operator",children:"Concat With Operator"}),"\n",(0,n.jsxs)(r.p,{children:["To concatenate two or more ",(0,n.jsx)(r.code,{children:"columns"})," with a separator, use ",(0,n.jsx)(r.code,{children:"$agg.concatWith"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.select({\r\n  fullName: $agg.concatWith(" ", "firstName", "lastName"),\r\n});\n'})}),"\n",(0,n.jsxs)(r.p,{children:["You can concatenate as many columns as you want, just pass them as arguments to the ",(0,n.jsx)(r.code,{children:"$agg.concat"})," method."]}),"\n",(0,n.jsxs)(r.p,{children:["Here, you don't need to add ",(0,n.jsx)(r.code,{children:"$"})," sign before the column name, because any value will be added after the first argument (",(0,n.jsx)(r.code,{children:"The separator"}),") will be treated as a column name."]}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"$agg.mergeWith"})," is an alias for ",(0,n.jsx)(r.code,{children:"$agg.concatWith"})," method."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"year-operator",children:"Year Operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the year of a date, use ",(0,n.jsx)(r.code,{children:"$agg.year"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.select({\r\n  year: $agg.year("createdAt"),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"month-operator",children:"Month Operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the month of a date, use ",(0,n.jsx)(r.code,{children:"$agg.month"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.select({\r\n  month: $agg.month("createdAt"),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"day-of-month-operator",children:"Day Of Month Operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the day of month of a date, use ",(0,n.jsx)(r.code,{children:"$agg.dayOfMonth"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.select({\r\n  dayOfMonth: $agg.dayOfMonth("createdAt"),\r\n});\n'})}),"\n",(0,n.jsxs)(r.p,{children:["This will return the day of month of the ",(0,n.jsx)(r.code,{children:"createdAt"})," column with ",(0,n.jsx)(r.code,{children:"integer"})," value that represents the day of month."]}),"\n",(0,n.jsx)(r.h3,{id:"day-of-week-operator",children:"Day Of Week Operator"}),"\n",(0,n.jsx)(r.p,{children:"Returns the day of the week for a date as a number between 1 (Sunday) and 7 (Saturday)."}),"\n",(0,n.jsxs)(r.p,{children:["To get the day of week of a date, use ",(0,n.jsx)(r.code,{children:"$agg.dayOfWeek"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.select({\r\n  dayOfWeek: $agg.dayOfWeek("createdAt"),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"first-year-operator",children:"First Year Operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the first year of a date, use ",(0,n.jsx)(r.code,{children:"$agg.firstYear"})," method, this is useful with ",(0,n.jsx)(r.code,{children:"group"})," stage."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.group(null, {\r\n  year: $agg.firstYear("createdAt"),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"last-year-operator",children:"Last Year Operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the last year of a date, use ",(0,n.jsx)(r.code,{children:"$agg.lastYear"})," method, this is useful with ",(0,n.jsx)(r.code,{children:"group"})," stage."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.group(null, {\r\n  year: $agg.lastYear("createdAt"),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"first-month-operator",children:"First Month Operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the first month of a date, use ",(0,n.jsx)(r.code,{children:"$agg.firstMonth"})," method, this is useful with ",(0,n.jsx)(r.code,{children:"group"})," stage."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.group(null, {\r\n  month: $agg.firstMonth("createdAt"),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"last-month-operator",children:"Last Month Operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the last month of a date, use ",(0,n.jsx)(r.code,{children:"$agg.lastMonth"})," method, this is useful with ",(0,n.jsx)(r.code,{children:"group"})," stage."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.group(null, {\r\n  month: $agg.lastMonth("createdAt"),\r\n});\n'})}),"\n",(0,n.jsx)(r.h3,{id:"first-day-of-month-operator",children:"First Day Of Month Operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the first day of month of a date, use ",(0,n.jsx)(r.code,{children:"$agg.firstDayOfMonth"})," method, this is useful with ",(0,n.jsx)(r.code,{children:"group"})," stage."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.group(null, {\r\n  dayOfMonth: $agg.firstDayOfMonth("createdAt"),\r\n});\n'})}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsx)(r.p,{children:"Please note that this utility return the first matched value of the day of month not the first day of month of the date."}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"last-day-of-month-operator",children:"Last Day Of Month Operator"}),"\n",(0,n.jsxs)(r.p,{children:["To get the last day of month of a date, use ",(0,n.jsx)(r.code,{children:"$agg.lastDayOfMonth"})," method, this is useful with ",(0,n.jsx)(r.code,{children:"group"})," stage."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.group(null, {\r\n  dayOfMonth: $agg.lastDayOfMonth("createdAt"),\r\n});\n'})}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsx)(r.p,{children:"Please note that this utility return the last matched value of the day of month not the last day of month of the date."}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"push-operator",children:"Push operator"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.a,{href:"https://docs.mongodb.com/manual/reference/operator/aggregation/push/",children:"Push Operator"})," is used to add a value to an array."]}),"\n",(0,n.jsxs)(r.p,{children:["To use it, use ",(0,n.jsx)(r.code,{children:"$agg.push"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.group(null, {\r\n  cities: $agg.push("city"),\r\n});\n'})}),"\n",(0,n.jsx)(r.h2,{id:"columns-utility",children:"Columns Utility"}),"\n",(0,n.jsxs)(r.p,{children:["If you want to add columns list in the ",(0,n.jsx)(r.code,{children:"group"})," stage, you can use ",(0,n.jsx)(r.code,{children:"$agg.columns"})," method, let's first see an example without using it."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.group(null, {\r\n  country: "$country",\r\n  city: "$city",\r\n});\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Using ",(0,n.jsx)(r.code,{children:"$agg.columns"})," method, you can write the above code as follows:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.group(null, $agg.columns("country", "city"));\n'})}),"\n",(0,n.jsx)(r.h3,{id:"columnname-utility",children:"columnName utility"}),"\n",(0,n.jsxs)(r.p,{children:["If you want to make sure that the column is written as it supposed to be ",(0,n.jsx)(r.code,{children:"making sure that it starts with $ sign"}),", you can use ",(0,n.jsx)(r.code,{children:"$agg.columnName"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { $agg, Aggregate } from "@warlock.js/cascade";\r\n\r\nconst aggregate = new Aggregate("users");\r\n\r\nconst users = await aggregate.project({\r\n  fullName: $agg.concat(\r\n    $agg.columnName("firstName"),\r\n    " ",\r\n    $agg.columnName("lastName")\r\n  ),\r\n});\n'})}),"\n",(0,n.jsx)(r.p,{children:"Although it is a little bit long, but could be useful with dynamic column names defined in variables."})]})}function d(e={}){const{wrapper:r}={...(0,t.RP)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(i,{...e})}):i(e)}},5680:(e,r,a)=>{a.d(r,{RP:()=>l});var n=a(6540);function t(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function s(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?s(Object(a),!0).forEach((function(r){t(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function g(e,r){if(null==e)return{};var a,n,t=function(e,r){if(null==e)return{};var a,n,t={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],r.indexOf(a)>=0||(t[a]=e[a]);return t}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var c=n.createContext({}),l=function(e){var r=n.useContext(c),a=r;return e&&(a="function"==typeof e?e(r):o(o({},r),e)),a},i={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var a=e.components,t=e.mdxType,s=e.originalType,c=e.parentName,d=g(e,["components","mdxType","originalType","parentName"]),h=l(a),u=t,m=h["".concat(c,".").concat(u)]||h[u]||i[u]||s;return a?n.createElement(m,o(o({ref:r},d),{},{components:a})):n.createElement(m,o({ref:r},d))}));d.displayName="MDXCreateElement"}}]);