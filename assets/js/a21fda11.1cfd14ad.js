"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[6948],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>h});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),d=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},p=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(a),m=r,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return a?t.createElement(h,l(l({ref:n},p),{},{components:a})):t.createElement(h,l({ref:n},p))}));function h(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8006:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var t=a(7462),r=(a(7294),a(3905));const i={sidebar_position:3},l="Validation Schema",o={unversionedId:"warlock/validation/validation-schema",id:"warlock/validation/validation-schema",title:"Validation Schema",description:"Added in v1.4.0.",source:"@site/docs/warlock/validation/validation-schema.mdx",sourceDirName:"warlock/validation",slug:"/warlock/validation/validation-schema",permalink:"/docs/warlock/validation/validation-schema",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"warlock",previous:{title:"Validation Rules",permalink:"/docs/warlock/validation/validation-rules"},next:{title:"Custom Validator",permalink:"/docs/warlock/validation/custom-validator"}},s={},d=[{value:"How it works",id:"how-it-works",level:2},{value:"Example",id:"example",level:2},{value:"Make all inputs required",id:"make-all-inputs-required",level:2},{value:"Array Schema",id:"array-schema",level:2},{value:"Apply rules to all inputs",id:"apply-rules-to-all-inputs",level:2}],p={toc:d},c="wrapper";function u(e){let{components:n,...a}=e;return(0,r.kt)(c,(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"validation-schema"},"Validation Schema"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Added in v1.4.0"),".")),(0,r.kt)("p",null,"Validation schema allows you to define the validation rules in but in more convenient way."),(0,r.kt)("h2",{id:"how-it-works"},"How it works"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"validate.rules")," accepts an object of inputs, each input has an array of validation rules, the key difference here is we will wrap that object in a new instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"ValidationSchema")," class:"),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Let's take an example of validating the login request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/auth/login.ts"',title:'"src/app/users/controllers/auth/login.ts"'},'import { Request, Response, ValidationSchema } from "@warlock.js/core";\nimport { User } from "app/users/models/user";\n\nexport default async function login(request: Request, response: Response) {\n  // do logic here\n}\n\nlogin.validation = {\n  rules: new ValidationSchema({\n    email: ["required", "email"],\n    password: ["required", "string"],\n  },\n});\n')),(0,r.kt)("p",null,"It works exactly the same with no more differences."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"For the current version the ",(0,r.kt)("inlineCode",{parentName:"p"},"validation.rules")," accepts a plain object or an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"ValidationSchema")," class, but in the next major version it will only accept an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"ValidationSchema")," class.")),(0,r.kt)("h2",{id:"make-all-inputs-required"},"Make all inputs required"),(0,r.kt)("p",null,"So instead of adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"required")," rule to each input, you can make all inputs required in the validation schema by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"requiredInputs")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'login.validation = {\n  rules: new ValidationSchema({\n    email: ["email"],\n    password: ["string"],\n  }).requiredInputs(),\n};\n')),(0,r.kt)("p",null,"This is equivalent to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'login.validation = {\n  rules: new ValidationSchema({\n    email: ["required", "email"],\n    password: ["required", "string"],\n  }),\n};\n')),(0,r.kt)("h2",{id:"array-schema"},"Array Schema"),(0,r.kt)("p",null,"Let's take a more complex example, let's say we want to validate the following request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  name: 'John Doe',\n  addresses: [\n    {\n      city: \"Cairo\",\n      address: 'Street 1',\n      buildingNo: 1,\n      flatNo: 1,\n    },\n    }\n  ]\n}\n")),(0,r.kt)("p",null,"This is an object that has ",(0,r.kt)("inlineCode",{parentName:"p"},"addresses")," which is an array of objects, each object has ",(0,r.kt)("inlineCode",{parentName:"p"},"city")," which is ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"address"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"buildingNo"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"flatNo")," which are strings."),(0,r.kt)("p",null,"So how can we validate array of objects? this is where the ",(0,r.kt)("inlineCode",{parentName:"p"},"ArraySchema")," class comes in handy:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  Request,\n  Response,\n  ValidationSchema,\n  ArraySchema,\n} from "@warlock.js/core";\nimport { User } from "app/users/models/user";\n\nexport default async function login(request: Request, response: Response) {\n  // do logic here\n}\n\nlogin.validation = {\n  rules: new ValidationSchema({\n    name: ["required", "string"],\n    addresses: new ArraySchema({\n      city: ["required", "string"],\n      address: ["required", "string"],\n      buildingNo: ["required", "string"],\n      flatNo: ["required", "string"],\n    }),\n  }),\n};\n')),(0,r.kt)("p",null,"Here we defined the ",(0,r.kt)("inlineCode",{parentName:"p"},"addresses")," as an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"ArraySchema")," class, and we passed the validation rules as an object to the constructor."),(0,r.kt)("p",null,"Now what if we want to validate the city as an object? we can do that by passing the validation rules as an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"ValidationSchema")," class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  Request,\n  Response,\n  ValidationSchema,\n  ArraySchema,\n} from "@warlock.js/core";\nimport { User } from "app/users/models/user";\n\nexport default async function login(request: Request, response: Response) {\n  // do logic here\n}\n\nlogin.validation = {\n  rules: new ValidationSchema({\n    name: ["required", "string"],\n    addresses: new ArraySchema({\n      city: new ValidationSchema({\n        name: ["required", "string"],\n      }),\n      address: ["required", "string"],\n      buildingNo: ["required", "string"],\n      flatNo: ["required", "string"],\n    }),\n  }),\n};\n')),(0,r.kt)("p",null,"Here we defined the ",(0,r.kt)("inlineCode",{parentName:"p"},"city")," as an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"ValidationSchema")," class, and we passed the validation rules as an object to the constructor."),(0,r.kt)("p",null,"So if the ",(0,r.kt)("inlineCode",{parentName:"p"},"addresses.city.name")," is missing, the validation will fai with a message like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "errors": {\n    "key": "addresses.0.city.name",\n    "message": "The addresses.0.city.name field is required."\n  }\n}\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If any of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ArraySchema")," inputs is required, the whole array will be required.")),(0,r.kt)("h2",{id:"apply-rules-to-all-inputs"},"Apply rules to all inputs"),(0,r.kt)("p",null,"If we checked the array schema, they all have the ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," rule, we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"rules")," method to add rules to all inputs at once:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  Request,\n  Response,\n  ValidationSchema,\n  ArraySchema,\n} from "@warlock.js/core";\nimport { User } from "app/users/models/user";\n\nexport default async function login(request: Request, response: Response) {\n  // do logic here\n}\n\nlogin.validation = {\n  rules: new ValidationSchema({\n    name: ["required", "string"],\n    addresses: new ArraySchema({\n      city: new ValidationSchema({\n        name: ["required"],\n      }),\n      address: ["required"],\n      buildingNo: ["required"],\n      flatNo: ["required"],\n    }).rules(["string"]),\n  }),\n};\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Please note if the input is a validation schema, the rules will be applied to it as well for all its nested inputs, for example all inputs in ",(0,r.kt)("inlineCode",{parentName:"p"},"city")," will have ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," rule as well.")))}u.isMDXComponent=!0}}]);