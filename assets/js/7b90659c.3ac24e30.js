"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[5787],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=s.createContext({}),i=function(e){var t=s.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=i(e.components);return s.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=i(n),m=r,h=d["".concat(p,".").concat(m)]||d[m]||c[m]||a;return n?s.createElement(h,o(o({ref:t},u),{},{components:n})):s.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var i=2;i<a;i++)o[i]=n[i];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9030:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var s=n(7462),r=(n(7294),n(3905));const a={sidebar_position:5},o="Response",l={unversionedId:"warlock/http/response",id:"warlock/http/response",title:"Response",description:"In Http Request Life Cycle, the last step is sending the response back to the client.",source:"@site/docs/warlock/http/response.mdx",sourceDirName:"warlock/http",slug:"/warlock/http/response",permalink:"/docs/warlock/http/response",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"warlock",previous:{title:"Middleware",permalink:"/docs/warlock/http/middleware"},next:{title:"Request Context",permalink:"/docs/warlock/http/request-context"}},p={},i=[{value:"How it works",id:"how-it-works",level:2},{value:"Sending response",id:"sending-response",level:2},{value:"Sending custom objects to response",id:"sending-custom-objects-to-response",level:2},{value:"Success Created",id:"success-created",level:2},{value:"Not found",id:"not-found",level:2},{value:"Unauthorized response",id:"unauthorized-response",level:2},{value:"Forbidden response",id:"forbidden-response",level:2},{value:"Bad request response",id:"bad-request-response",level:2},{value:"Server error response",id:"server-error-response",level:2},{value:"Send File",id:"send-file",level:2},{value:"Send xml response",id:"send-xml-response",level:2},{value:"Send text response",id:"send-text-response",level:2},{value:"Send html response",id:"send-html-response",level:2},{value:"Redirect",id:"redirect",level:2},{value:"Set Header",id:"set-header",level:2},{value:"Set multiple headers",id:"set-multiple-headers",level:2},{value:"Remove header",id:"remove-header",level:2},{value:"Get response headers",id:"get-response-headers",level:2},{value:"Get response header",id:"get-response-header",level:2},{value:"Set status code",id:"set-status-code",level:2},{value:"Set Content Type",id:"set-content-type",level:2},{value:"Stream file",id:"stream-file",level:2},{value:"Get response body",id:"get-response-body",level:2},{value:"Get response status code",id:"get-response-status-code",level:2},{value:"Response Events",id:"response-events",level:2},{value:"Listen to response events",id:"listen-to-response-events",level:3}],u={toc:i},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"response"},"Response"),(0,r.kt)("p",null,"In Http Request Life Cycle, the last step is sending the response back to the client."),(0,r.kt)("h2",{id:"how-it-works"},"How it works"),(0,r.kt)("p",null,"There are multiple types of responses, but mainly the heavy type will be The JSON response."),(0,r.kt)("h1",{id:"response-is-json-by-default"},"Response is json by default"),(0,r.kt)("p",null,"By default any of response object methods is used to handle the response body for json responses with different status code, for example ",(0,r.kt)("inlineCode",{parentName:"p"},"response.success(object)")," returns a success response with status code ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," and the object as the response body."),(0,r.kt)("h2",{id:"sending-response"},"Sending response"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Warlock response")," object is attached to every request handler/controller and middleware as well."),(0,r.kt)("p",null,"To send a success json response, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.success(data)")," which will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," status code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},'import { Request, Response } from "@warlock.js/core";\nimport { User } from "./../models/user";\n\nexport default async function getUsers(request: Request, response: Response) {\n  const users = await User.list();\n\n  return response.success({\n    users,\n  });\n}\n')),(0,r.kt)("p",null,"This will return all users in the database."),(0,r.kt)("h2",{id:"sending-custom-objects-to-response"},"Sending custom objects to response"),(0,r.kt)("p",null,"A good example of this case when we send list of users models or even a single model."),(0,r.kt)("p",null,"As a model is basically an open object, we can't send it directly to the response, we need to convert it to a plain object first."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Warlock response")," will parse every data returned in the response, if the value is a plain then it will be sent as-is, if it is an array it will be looped and parsed each value."),(0,r.kt)("p",null,"Now what about models or any custom classes?"),(0,r.kt)("p",null,"Let's make a custom class to see how this works"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-user.ts"',title:'"src/app/users/controllers/get-user.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nclass UserData {\n  public name: string;\n  public email: string;\n  public age: number;\n\n  public setAge(age: number) {\n    this.age = age;\n  }\n\n  public getAge() {\n    return this.age;\n  }\n\n  public setName(name: string) {\n    this.name = name;\n  }\n}\n\nexport default function getUser(request: Request, response: Response) {\n  const user = new UserData();\n\n  user.setName("John Doe");\n  user.setAge(30);\n\n  return response.success({\n    user,\n  });\n}\n')),(0,r.kt)("p",null,"In this scenario the ",(0,r.kt)("inlineCode",{parentName:"p"},"UserData")," class will not be parsed as the response parser does not know what will be sent to the final response body."),(0,r.kt)("p",null,"To determine which data will be sent, add ",(0,r.kt)("inlineCode",{parentName:"p"},"toJSON()")," method to the class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{20} title="src/app/users/controllers/get-user.ts"',"{20}":!0,title:'"src/app/users/controllers/get-user.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nclass UserData {\n  public name: string;\n  public email: string;\n  public age: number;\n\n  public setAge(age: number) {\n    this.age = age;\n  }\n\n  public getAge() {\n    return this.age;\n  }\n\n  public setName(name: string) {\n    this.name = name;\n  }\n\n  public toJSON() {\n    return {\n      name: this.name,\n      age: this.age,\n    };\n  }\n}\n\nexport default function getUser(request: Request, response: Response) {\n  const user = new UserData();\n\n  user.setName("John Doe");\n  user.setAge(30);\n\n  return response.success({\n    user,\n  });\n}\n')),(0,r.kt)("h2",{id:"success-created"},"Success Created"),(0,r.kt)("p",null,"To return a ",(0,r.kt)("inlineCode",{parentName:"p"},"201")," status code, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.successCreate(data)")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',title:'"src/app/users/controllers/create-user.ts"'},'import { Request, Response } from "@warlock.js/core";\nimport { User } from "./../models/user";\n\nexport default async function createUser(request: Request, response: Response) {\n  const user = await User.create(request.all());\n\n  return response.successCreate({\n    user,\n  });\n}\n')),(0,r.kt)("p",null,"In terms of REST standards, its better to send a ",(0,r.kt)("inlineCode",{parentName:"p"},"201")," status code when creating a new resource."),(0,r.kt)("h2",{id:"not-found"},"Not found"),(0,r.kt)("p",null,"To return a ",(0,r.kt)("inlineCode",{parentName:"p"},"404")," status code, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.notFound()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-user.ts"',title:'"src/app/users/controllers/get-user.ts"'},'import { Request, Response } from "@warlock.js/core";\nimport { User } from "./../models/user";\n\nexport default async function getUser(request: Request, response: Response) {\n  const user = await User.find(request.input("id"));\n\n  if (!user) {\n    return response.notFound();\n  }\n\n  return response.success({\n    user,\n  });\n}\n')),(0,r.kt)("p",null,"You can also send data with the response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-user.ts"',title:'"src/app/users/controllers/get-user.ts"'},'import { Request, Response } from "@warlock.js/core";\nimport { User } from "./../models/user";\n\nexport default async function getUser(request: Request, response: Response) {\n  const user = await User.find(request.input("id"));\n\n  if (!user) {\n    return response.notFound({\n      message: "User not found",\n    });\n  }\n\n  return response.success({\n    user,\n  });\n}\n')),(0,r.kt)("h2",{id:"unauthorized-response"},"Unauthorized response"),(0,r.kt)("p",null,"To return a ",(0,r.kt)("inlineCode",{parentName:"p"},"401")," status code, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.unauthorized()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/middleware/auth.ts"',title:'"src/app/users/middleware/auth.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport async function auth(request: Request, response: Response) {\n  const authorizationHeader = request.header("Authorization");\n\n  if (!authorizationHeader) {\n    return response.unauthorized();\n  }\n}\n')),(0,r.kt)("h2",{id:"forbidden-response"},"Forbidden response"),(0,r.kt)("p",null,"Forbidden response is used when the user is authenticated but not authorized to access the requested resource."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"response.forbidden()")," method returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"403")," status code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/middleware/auth.ts"',title:'"src/app/users/middleware/auth.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport async function auth(request: Request, response: Response) {\n  const authorizationHeader = request.header("Authorization");\n\n  if (!authorizationHeader) {\n    return response.unauthorized();\n  }\n\n  const user = await User.find(request.input("id"));\n\n  if (!user) {\n    return response.forbidden();\n  }\n}\n')),(0,r.kt)("p",null,"You may of course send data with the response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/middleware/auth.ts"',title:'"src/app/users/middleware/auth.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport async function auth(request: Request, response: Response) {\n  const authorizationHeader = request.header("Authorization");\n\n  if (!authorizationHeader) {\n    return response.unauthorized();\n  }\n\n  const user = await User.find(request.input("id"));\n\n  if (!user) {\n    return response.forbidden({\n      message: "You are not authorized to access this resource",\n    });\n  }\n}\n')),(0,r.kt)("h2",{id:"bad-request-response"},"Bad request response"),(0,r.kt)("p",null,"To return a ",(0,r.kt)("inlineCode",{parentName:"p"},"400")," status code, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.badRequest()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',title:'"src/app/users/controllers/create-user.ts"'},'import { Request, Response } from "@warlock.js/core";\nimport { User } from "./../models/user";\n\nexport default async function createUser(request: Request, response: Response) {\n  const name = request.input("name");\n\n  if (!name) {\n    return response.badRequest({\n      error: "Name is required",\n    });\n  }\n\n  const email = request.input("email");\n\n  if (!email) {\n    return response.badRequest({\n      error: "Email is required",\n    });\n  }\n\n  const user = await User.create(request.all());\n\n  return response.successCreate({\n    user,\n  });\n}\n')),(0,r.kt)("h2",{id:"server-error-response"},"Server error response"),(0,r.kt)("p",null,"To return a ",(0,r.kt)("inlineCode",{parentName:"p"},"500")," status code, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.serverError()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',title:'"src/app/users/controllers/create-user.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function createUser(request: Request, response: Response) {\n  try {\n    const database = await connectToDatabase();\n    //...\n  } catch (error) {\n    return response.serverError({\n      error: error.message,\n    });\n  }\n}\n')),(0,r.kt)("p",null,"Usually you won't need this method, but it's good to know that it exists."),(0,r.kt)("h2",{id:"send-file"},"Send File"),(0,r.kt)("p",null,"To send a file, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.sendFile()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/download-avatar.ts"',title:'"src/app/users/controllers/download-avatar.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function downloadAvatar(\n  request: Request,\n  response: Response\n) {\n  const avatar = await Avatar.find(request.input("id"));\n\n  if (!avatar) {\n    return response.notFound();\n  }\n\n  return response.sendFile(avatar.path);\n}\n')),(0,r.kt)("p",null,"You may set a cache time in seconds as a second parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/download-avatar.ts"',title:'"src/app/users/controllers/download-avatar.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function downloadAvatar(\n  request: Request,\n  response: Response\n) {\n  const avatar = await Avatar.find(request.input("id"));\n\n  if (!avatar) {\n    return response.notFound();\n  }\n\n  return response.sendFile(avatar.path, 3600); // 1 hour\n}\n')),(0,r.kt)("p",null,"An alias method ",(0,r.kt)("inlineCode",{parentName:"p"},"sendCachedFile")," works exactly the same but sets the cache time to 1 year."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/download-avatar.ts"',title:'"src/app/users/controllers/download-avatar.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function downloadAvatar(\n  request: Request,\n  response: Response\n) {\n  const avatar = await Avatar.find(request.input("id"));\n\n  if (!avatar) {\n    return response.notFound();\n  }\n\n  return response.sendCachedFile(avatar.path);\n}\n')),(0,r.kt)("h2",{id:"send-xml-response"},"Send xml response"),(0,r.kt)("p",null,"To send a xml response, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.xml()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/general/controllers/sitemap.ts"',title:'"src/app/general/controllers/sitemap.ts"'},'import { Request, Response } from "@warlock.js/core";\nimport sitemap from "./../sitemap";\n\nexport default async function sitemap(request: Request, response: Response) {\n  return response.xml(sitemap);\n}\n')),(0,r.kt)("p",null,"This will send a response with Content Type ",(0,r.kt)("inlineCode",{parentName:"p"},"application/xml"),"."),(0,r.kt)("h2",{id:"send-text-response"},"Send text response"),(0,r.kt)("p",null,"To send a text response, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.text()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/general/controllers/robots.ts"',title:'"src/app/general/controllers/robots.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function robots(request: Request, response: Response) {\n  return response.text("User-agent: *\\nDisallow: /");\n}\n')),(0,r.kt)("p",null,"This will send a response with Content Type ",(0,r.kt)("inlineCode",{parentName:"p"},"text/plain"),"."),(0,r.kt)("h2",{id:"send-html-response"},"Send html response"),(0,r.kt)("p",null,"To send a html response, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.html()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/general/controllers/home.ts"',title:'"src/app/general/controllers/home.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function home(request: Request, response: Response) {\n  return response.html("<h1>Hello World</h1>");\n}\n')),(0,r.kt)("p",null,"This will send a response with Content Type ",(0,r.kt)("inlineCode",{parentName:"p"},"text/html"),"."),(0,r.kt)("h2",{id:"redirect"},"Redirect"),(0,r.kt)("p",null,"To redirect the user to another page, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.redirect()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/login.ts"',title:'"src/app/users/controllers/login.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function login(request: Request, response: Response) {\n  const user = await User.find(request.input("id"));\n\n  if (!user) {\n    return response.notFound();\n  }\n\n  return response.redirect("/users");\n}\n')),(0,r.kt)("p",null,"By default this will make a ",(0,r.kt)("inlineCode",{parentName:"p"},"temporary redirect")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"302")," status code, you can change this by passing the status code as the second parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/login.ts"',title:'"src/app/users/controllers/login.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function login(request: Request, response: Response) {\n  const user = await User.find(request.input("id"));\n\n  if (!user) {\n    return response.notFound();\n  }\n\n  return response.redirect("/users", 301);\n}\n')),(0,r.kt)("p",null,"To send a ",(0,r.kt)("inlineCode",{parentName:"p"},"permanent redirect")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"301")," status code, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.permanentRedirect()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/login.ts"',title:'"src/app/users/controllers/login.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function login(request: Request, response: Response) {\n  const user = await User.find(request.input("id"));\n\n  if (!user) {\n    return response.notFound();\n  }\n\n  return response.permanentRedirect("/users");\n}\n')),(0,r.kt)("h2",{id:"set-header"},"Set Header"),(0,r.kt)("p",null,"To set a header, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.header()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/download-avatar.ts"',title:'"src/app/users/controllers/download-avatar.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function downloadAvatar(\n  request: Request,\n  response: Response\n) {\n  const avatar = await Avatar.find(request.input("id"));\n\n  if (!avatar) {\n    return response.notFound();\n  }\n\n  response.header(\n    "Content-Disposition",\n    `attachment; filename="${avatar.name}"`\n  );\n\n  return response.sendFile(avatar.path);\n}\n')),(0,r.kt)("h2",{id:"set-multiple-headers"},"Set multiple headers"),(0,r.kt)("p",null,"To set multiple headers, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.headers()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/download-avatar.ts"',title:'"src/app/users/controllers/download-avatar.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function downloadAvatar(\n  request: Request,\n  response: Response\n) {\n  const avatar = await Avatar.find(request.input("id"));\n\n  if (!avatar) {\n    return response.notFound();\n  }\n\n  response.headers({\n    "Content-Disposition": `attachment; filename="${avatar.name}"`,\n    "Content-Type": avatar.mimeType,\n  });\n\n  return response.sendFile(avatar.path);\n}\n')),(0,r.kt)("h2",{id:"remove-header"},"Remove header"),(0,r.kt)("p",null,"To remove a header, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.removeHeader()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/download-avatar.ts"',title:'"src/app/users/controllers/download-avatar.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function downloadAvatar(\n  request: Request,\n  response: Response\n) {\n  const avatar = await Avatar.find(request.input("id"));\n\n  if (!avatar) {\n    return response.notFound();\n  }\n\n  response.removeHeader("Content-Type");\n\n  return response.sendFile(avatar.path);\n}\n')),(0,r.kt)("h2",{id:"get-response-headers"},"Get response headers"),(0,r.kt)("p",null,"To get all response headers, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.getHeaders()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/download-avatar.ts"',title:'"src/app/users/controllers/download-avatar.ts"'},"// ...\nconst headers = response.getHeaders();\n")),(0,r.kt)("p",null,"This will return an object with all headers."),(0,r.kt)("h2",{id:"get-response-header"},"Get response header"),(0,r.kt)("p",null,"To get a specific response header, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.header()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/download-avatar.ts"',title:'"src/app/users/controllers/download-avatar.ts"'},'// ...\nconst contentType = response.header("Content-Type");\n')),(0,r.kt)("h2",{id:"set-status-code"},"Set status code"),(0,r.kt)("p",null,"To set a status code, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.setStatusCode()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/download-avatar.ts"',title:'"src/app/users/controllers/download-avatar.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function downloadAvatar(\n  request: Request,\n  response: Response\n) {\n  const avatar = await Avatar.find(request.input("id"));\n\n  if (!avatar) {\n    return response.notFound();\n  }\n\n  response.setStatusCode(200);\n\n  return response.sendFile(avatar.path);\n}\n')),(0,r.kt)("h2",{id:"set-content-type"},"Set Content Type"),(0,r.kt)("p",null,"You don't really need to do it manually, but if you want to, you can."),(0,r.kt)("p",null,"To set a Content Type, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.setContentType()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/download-avatar.ts"',title:'"src/app/users/controllers/download-avatar.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function downloadAvatar(\n  request: Request,\n  response: Response\n) {\n  const avatar = await Avatar.find(request.input("id"));\n\n  if (!avatar) {\n    return response.notFound();\n  }\n\n  response.setContentType(avatar.mimeType);\n\n  return response.sendFile(avatar.path);\n}\n')),(0,r.kt)("h2",{id:"stream-file"},"Stream file"),(0,r.kt)("p",null,"Sometimes we want to send large files, in that case we need to stream the file."),(0,r.kt)("p",null,"To stream a file, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.streamFile()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/download-avatar.ts"',title:'"src/app/users/controllers/download-avatar.ts"'},'import { Request, Response } from "@warlock.js/core";\n\nexport default async function downloadAvatar(\n  request: Request,\n  response: Response\n) {\n  const avatar = await Avatar.find(request.input("id"));\n\n  if (!avatar) {\n    return response.notFound();\n  }\n\n  return response.streamFile(avatar.path);\n}\n')),(0,r.kt)("h2",{id:"get-response-body"},"Get response body"),(0,r.kt)("p",null,"Getting response body, status code, headers and content type are likely will be needed when working with ",(0,r.kt)("a",{parentName:"p",href:"#response-events"},"Response Events"),"."),(0,r.kt)("p",null,"To get the response body, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.body")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},"// ...\nconst body = response.body;\n")),(0,r.kt)("p",null,"The response body will return the final output of the body."),(0,r.kt)("h2",{id:"get-response-status-code"},"Get response status code"),(0,r.kt)("p",null,"To get the current status code, use ",(0,r.kt)("inlineCode",{parentName:"p"},"response.statusCode")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',title:'"src/app/users/controllers/get-users.ts"'},"// ...\nconst statusCode = response.statusCode;\n")),(0,r.kt)("h2",{id:"response-events"},"Response Events"),(0,r.kt)("p",null,"Now let's talk about response events, which is one of the most important features in Warlock."),(0,r.kt)("p",null,"Why would i need to listen to response events?"),(0,r.kt)("p",null,"Well, for many reasons, for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Modify the response before sending it."),(0,r.kt)("li",{parentName:"ul"},"Add more data to each response dynamically, for example sending current user data in each response."),(0,r.kt)("li",{parentName:"ul"},"After sending response, perform some logging or any other action.")),(0,r.kt)("h3",{id:"listen-to-response-events"},"Listen to response events"),(0,r.kt)("p",null,"In any ",(0,r.kt)("inlineCode",{parentName:"p"},"src/general/events")," directory, create ",(0,r.kt)("inlineCode",{parentName:"p"},"send-app-version-to-response.ts")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/general/events/send-app-version-to-response.ts"',title:'"src/general/events/send-app-version-to-response.ts"'},'import { Response } from "@warlock.js/core";\n\nResponse.on("sending", (response) => {\n  response.body.appVersion = "1.0.0";\n});\n')),(0,r.kt)("p",null,"If we want to perform something after the response is sent, use ",(0,r.kt)("inlineCode",{parentName:"p"},'on("sent")')," event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/general/events/log-request.ts"',title:'"src/general/events/log-request.ts"'},'import { storagePath, Response } from "@warlock.js/core";\nimport { putJsonFileAsync } from "@mongez/fs";\n\nResponse.on("sent", (response) => {\n  const request = response.request;\n\n  putJsonFileAsync(storagePath(`logs/${Date.now()}.json`), request.all());\n});\n')),(0,r.kt)("p",null,"This will log the request body in a json file."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"putJsonFileAsync")," will not block io operations, so it's safe to use it in response events.")))}c.isMDXComponent=!0}}]);