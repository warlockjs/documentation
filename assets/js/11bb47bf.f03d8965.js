"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[1410],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),m=c(n),p=a,h=m["".concat(l,".").concat(p)]||m[p]||u[p]||s;return n?o.createElement(h,i(i({ref:t},d),{},{components:n})):o.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=p;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[m]="string"==typeof e?e:a,i[1]=r;for(var c=2;c<s;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4643:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const s={sidebar_position:1},i="Philosophy",r={unversionedId:"monpulse/models/introduction",id:"monpulse/models/introduction",title:"Philosophy",description:"Models are objects that aim to manage a single document in a collection, it also provides multiple ways of creating, updating, deleting and fetching documents as utilities.",source:"@site/docs/monpulse/models/introduction.mdx",sourceDirName:"monpulse/models",slug:"/monpulse/models/introduction",permalink:"/documentation/docs/monpulse/models/introduction",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"mongodb",previous:{title:"Models",permalink:"/documentation/docs/category/models"},next:{title:"Create New Document",permalink:"/documentation/docs/monpulse/models/create-document"}},l={},c=[{value:"What is a model?",id:"what-is-a-model",level:2},{value:"Why not dealing with documents directly?",id:"why-not-dealing-with-documents-directly",level:2},{value:"Creating a model",id:"creating-a-model",level:2},{value:"How to use a model?",id:"how-to-use-a-model",level:2},{value:"Saving a model instance",id:"saving-a-model-instance",level:2},{value:"Accessing Document ids",id:"accessing-document-ids",level:2}],d={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"philosophy"},"Philosophy"),(0,a.kt)("p",null,"Models are objects that aim to manage a single document in a collection, it also provides multiple ways of creating, updating, deleting and fetching documents as utilities."),(0,a.kt)("h2",{id:"what-is-a-model"},"What is a model?"),(0,a.kt)("p",null,"A model basically is a class that represents a document in a collection, this helps us to manage the document in a more object oriented way."),(0,a.kt)("h2",{id:"why-not-dealing-with-documents-directly"},"Why not dealing with documents directly?"),(0,a.kt)("p",null,"Because when your application grows, you'd need to do more complex operations over documents, let's take an example, when we save a new model it automatically creates a new unique ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," for that document, and we can access that id using the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," property, you would need to do this manually each time you create a new document, and this is just a simple example, there are many other things that you'd need to do manually if you don't use models."),(0,a.kt)("h2",{id:"creating-a-model"},"Creating a model"),(0,a.kt)("p",null,"To create a model, you need to extend the ",(0,a.kt)("inlineCode",{parentName:"p"},"Model")," class and define the ",(0,a.kt)("inlineCode",{parentName:"p"},"collection")," property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/models/user.ts"',title:'"src/models/user.ts"'},'import { Model } from "@mongez/monpulse";\n\nexport class User extends Model {\n    /**\n    * The collection name\n    */\n    public static collection = "users";\n}\n')),(0,a.kt)("p",null,"This is the bare minimum to create a model, but we can do more, we'll see that as long as we go."),(0,a.kt)("h2",{id:"how-to-use-a-model"},"How to use a model?"),(0,a.kt)("p",null,"When creating a new model instance, you optionally pass an object of the data that will be saved (",(0,a.kt)("strong",{parentName:"p"},"created"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app.ts"',title:'"src/app.ts"'},'import { User } from "./models/user";\n\nconst user = new User({\n    name: "Hasan Zohdy",\n    email: "hassanzohdy@gmail.com",\n    isActive: true,\n});\n')),(0,a.kt)("p",null,"This only creates an instance of the model, but the data is not saved yet, now let's see how to save the data."),(0,a.kt)("h2",{id:"saving-a-model-instance"},"Saving a model instance"),(0,a.kt)("p",null,"To save a model instance, you need to call the ",(0,a.kt)("inlineCode",{parentName:"p"},"save")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app.ts"',title:'"src/app.ts"'},'import { User } from "./models/user";\n\nasync function main() {\n    const user = new User({\n        name: "Hasan Zohdy",\n        email: "hassanzohdy@gmail.com",\n        isActive: true,\n    });\n\n    await user.save();\n}\n')),(0,a.kt)("p",null,"Once the model is successfully saved, a new ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," is assigned to the model instance."),(0,a.kt)("h2",{id:"accessing-document-ids"},"Accessing Document ids"),(0,a.kt)("p",null,"By default, MongoDB generates ",(0,a.kt)("inlineCode",{parentName:"p"},"_id")," for each document, and it's a unique identifier for each document in the collection, we can access the document id using the ",(0,a.kt)("inlineCode",{parentName:"p"},"_id")," property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app.ts"',title:'"src/app.ts"'},'import { User } from "./models/user";\n\nasync function main() {\n    const user = new User({\n        name: "Hasan Zohdy",\n        email: "hassanzohdy@gmail.com",\n        isActive: true,\n    });\n\n    await user.save();\n\n    const _id = user._id;\n\n    console.log(_id); // ObjectId("5f9b2b3b3f3b9a0b3c3b9a0b")\n}\n')),(0,a.kt)("p",null,"This is good, but honestly i prefer ids as numbers, so we can use the good benefit of the auto generated id."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/models/user.ts"',title:'"src/models/user.ts"'},'\nimport { User } from "./models/user";\n\nasync function main() {\n    const user = new User({\n        name: "Hasan Zohdy",\n        email: "hassanzohdy@gmail.com",\n        isActive: true,\n    });\n\n    await user.save();\n\n    const id = user.id;\n\n    console.log(id); // 1424151\n}\n')),(0,a.kt)("p",null,"Any generated id is randomly generated by default, later we'll see how to generate ids in a sequential way on all models or on a specific model."))}u.isMDXComponent=!0}}]);