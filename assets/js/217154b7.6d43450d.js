"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[7950],{2365:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=t(4848),a=t(5680);const i={sidebar_position:11},o="Auto Increment",c={id:"cascade/advanced/auto-increment",title:"Auto Increment",description:"Introduction",source:"@site/docs/cascade/advanced/auto-increment.mdx",sourceDirName:"cascade/advanced",slug:"/cascade/advanced/auto-increment",permalink:"/docs/cascade/advanced/auto-increment",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"mongodb",previous:{title:"Introduction",permalink:"/docs/cascade/advanced/introduction"},next:{title:"Master Mind",permalink:"/docs/cascade/advanced/master-mind"}},s={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Auto Incrementing",id:"auto-incrementing",level:2},{value:"Auto Incrementing with a custom start value",id:"auto-incrementing-with-a-custom-start-value",level:2},{value:"The next auto generated id",id:"the-next-auto-generated-id",level:2},{value:"Manually Generating the next ID",id:"manually-generating-the-next-id",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.RP)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"auto-increment",children:"Auto Increment"}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["Model ",(0,r.jsx)(n.code,{children:"id"})," is an integer field that is auto-incremented by default, which is fully managed by the model class, you can manually assign value to it or manually generate it as well."]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["The id is generated if and only if the model does not have an ",(0,r.jsx)(n.code,{children:"id"})," value in its data, this means it works only with newly created models."]})}),"\n",(0,r.jsx)(n.h2,{id:"auto-incrementing",children:"Auto Incrementing"}),"\n",(0,r.jsxs)(n.p,{children:["By default, the ",(0,r.jsx)(n.code,{children:"id"})," field is auto-incremented, which means that when saving a new model, the ",(0,r.jsx)(n.code,{children:"id"})," field will be automatically generated, let's take an example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="src/app.ts"',children:'import { Category } from "./models/category";\r\n\r\nasync function main() {\r\n  const category = new Category({\r\n    name: "Sports",\r\n  });\r\n\r\n  await category.save();\r\n\r\n  console.log(category.id); // 512344\r\n}\r\n\r\nmain();\n'})}),"\n",(0,r.jsx)(n.p,{children:"This will auto generate a random id for the model by default."}),"\n",(0,r.jsx)(n.h2,{id:"auto-incrementing-with-a-custom-start-value",children:"Auto Incrementing with a custom start value"}),"\n",(0,r.jsxs)(n.p,{children:["By default the initial id value is randomly generated for an integer between ",(0,r.jsx)(n.code,{children:"10000"})," and ",(0,r.jsx)(n.code,{children:"499999"}),", you can change this value by setting the ",(0,r.jsx)(n.code,{children:"initialId"})," property in the model class, let's take an example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="src/models/category.ts"',children:'import { Model } from "@warlock.js/cascade";\r\n\r\nexport class Category extends Model {\r\n  /**\r\n   * The collection name\r\n   */\r\n  public static collection = "categories";\r\n\r\n  /**\r\n   * The initial id value\r\n   */\r\n  public static initialId = 1;\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This will start the auto incrementing from ",(0,r.jsx)(n.code,{children:"1"})," instead of a random value."]}),"\n",(0,r.jsx)(n.h2,{id:"the-next-auto-generated-id",children:"The next auto generated id"}),"\n",(0,r.jsxs)(n.p,{children:["Same applies to the next generated id, it is generated randomly and sums the initial id with a random number between ",(0,r.jsx)(n.code,{children:"1000"})," and ",(0,r.jsx)(n.code,{children:"9999"}),", you can change this value by setting the ",(0,r.jsx)(n.code,{children:"incrementIdBy"})," property in the model class, let's take an example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="src/models/category.ts"',children:'import { Model } from "@warlock.js/cascade";\r\n\r\nexport class Category extends Model {\r\n  /**\r\n   * The collection name\r\n   */\r\n  public static collection = "categories";\r\n\r\n  /**\r\n   * The initial id value\r\n   */\r\n  public static initialId = 1;\r\n\r\n  /**\r\n   * The increment value\r\n   */\r\n  public static incrementIdBy = 1;\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"In that example, our category model will mostly interact exactly like the typical auto incrementing id in SQL databases, however, for large scale applications, it is recommended to use a random id instead of an auto incrementing one so guessing the next id will be impossible."}),"\n",(0,r.jsx)(n.h2,{id:"manually-generating-the-next-id",children:"Manually Generating the next ID"}),"\n",(0,r.jsxs)(n.p,{children:["In some scenarios, you might need to generate the next id even before saving the model, to achieve this we can use the ",(0,r.jsx)(n.code,{children:"generateNextId"})," method, let's take an example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="src/app.ts"',children:'import { Category } from "./models/category";\r\n\r\nasync function main() {\r\n  const category = new Category({\r\n    name: "Sports",\r\n  });\r\n\r\n  const nextId = await category.generateNextId();\r\n\r\n  console.log(nextId); // 512344\r\n  console.log(category.id); // 512344\r\n}\r\n\r\nmain();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This will generate the next id and assign it to the ",(0,r.jsx)(n.code,{children:"id"})," property of the model."]})]})}function u(e={}){const{wrapper:n}={...(0,a.RP)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},5680:(e,n,t)=>{t.d(n,{RP:()=>l});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=l(t),h=a,p=m["".concat(s,".").concat(h)]||m[h]||d[h]||i;return t?r.createElement(p,o(o({ref:n},u),{},{components:t})):r.createElement(p,o({ref:n},u))}));u.displayName="MDXCreateElement"}}]);