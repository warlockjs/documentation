"use strict";(self.webpackChunkmongez_docs=self.webpackChunkmongez_docs||[]).push([[5125],{8926:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var t=n(4848),i=n(5680);const o={sidebar_position:7},c="Memory Cache Driver",a={id:"warlock/cache/memory",title:"Memory Cache Driver",description:"The memory cache driver stores data in memory, it will be persisted until the application is restarted.",source:"@site/docs/warlock/cache/memory.mdx",sourceDirName:"warlock/cache",slug:"/warlock/cache/memory",permalink:"/docs/warlock/cache/memory",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"warlock",previous:{title:"Redis Cache Driver",permalink:"/docs/warlock/cache/redis"},next:{title:"File Cache Driver",permalink:"/docs/warlock/cache/file"}},s={},l=[{value:"Driver name",id:"driver-name",level:2},{value:"Options",id:"options",level:2},{value:"Usage",id:"usage",level:2}];function d(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.RP)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"memory-cache-driver",children:"Memory Cache Driver"}),"\n",(0,t.jsx)(r.p,{children:"The memory cache driver stores data in memory, it will be persisted until the application is restarted."}),"\n",(0,t.jsx)(r.h2,{id:"driver-name",children:"Driver name"}),"\n",(0,t.jsxs)(r.p,{children:["The default name for the driver is ",(0,t.jsx)(r.code,{children:"memory"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"options",children:"Options"}),"\n",(0,t.jsx)(r.p,{children:"The memory cache driver has the following options:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"globalPrefix"}),": A prefix that will be added to all keys. This is useful when you want to use the same cache driver for multiple applications, it could be a ",(0,t.jsx)(r.code,{children:"string"})," or a callback that returns a ",(0,t.jsx)(r.code,{children:"string"}),", if not provided then there will no be prefix for the keys."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"ttl"}),": Time to live in seconds, the default value is ",(0,t.jsx)(r.code,{children:"Infinity"}),"."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(r.p,{children:"To use the memory cache driver, you need to define it in the drivers list in the cache configurations file:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:'title="src/config/cache.ts"',children:'import { env } from "@mongez/dotenv";\r\nimport {\r\n  CacheConfigurations,\r\n  MemoryCacheDriver,\r\n  requestContext,\r\n} from "@warlock.js/core";\r\n\r\nconst cacheConfigurations: CacheConfigurations = {\r\n  drivers: {\r\n    memory: MemoryCacheDriver,\r\n  },\r\n  default: env("CACHE_DRIVER", "memory"),\r\n  options: {\r\n    memory: {\r\n      globalPrefix: "online-store",\r\n      ttl: 60 * 60 * 24, // 24 hours\r\n    },\r\n  },\r\n};\r\n\r\nexport default cacheConfigurations;\n'})}),"\n",(0,t.jsxs)(r.p,{children:["This will allow the cache manager to pick it if there is no ",(0,t.jsx)(r.code,{children:"CACHE_DRIVER"})," environment variable defined."]}),"\n",(0,t.jsxs)(r.p,{children:["We set the global prefix to ",(0,t.jsx)(r.code,{children:"online-store"}),", this will be added to all keys. This is useful when you want to use the same cache driver for multiple applications, it could be a ",(0,t.jsx)(r.code,{children:"string"})," or a callback that returns a ",(0,t.jsx)(r.code,{children:"string"}),", if not provided then there will no be prefix for the keys."]}),"\n",(0,t.jsx)(r.p,{children:"All cache keys will remain for 24 hours, after that they will be removed."}),"\n",(0,t.jsx)(r.admonition,{type:"note",children:(0,t.jsxs)(r.p,{children:["Please note that the Memory Cache Drier implements all methods in ",(0,t.jsx)(r.a,{href:"./cache-driver-interface",children:"Cache Driver Interface"})," so you can use it directly as a cache driver."]})})]})}function h(e={}){const{wrapper:r}={...(0,i.RP)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},5680:(e,r,n)=>{n.d(r,{RP:()=>l});var t=n(6540);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,t,i=function(e,r){if(null==e)return{};var n,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(i[n]=e[n]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),l=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},h=t.forwardRef((function(e,r){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,h=a(e,["components","mdxType","originalType","parentName"]),m=l(n),p=i,u=m["".concat(s,".").concat(p)]||m[p]||d[p]||o;return n?t.createElement(u,c(c({ref:r},h),{},{components:n})):t.createElement(u,c({ref:r},h))}));h.displayName="MDXCreateElement"}}]);