"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2226],{1803:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(4848),t=r(8453);const o={sidebar_position:3},a="Request",i={id:"warlock/http/request",title:"Request",description:"Warlock Request is the incoming request object, it contains all the information about the request, and it is used to get the request body, query string, headers, and more.",source:"@site/docs/warlock/http/request.mdx",sourceDirName:"warlock/http",slug:"/warlock/http/request",permalink:"/docs/warlock/http/request",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"warlock",previous:{title:"Http configurations",permalink:"/docs/warlock/http/configurations"},next:{title:"Uploaded Files",permalink:"/docs/warlock/http/uploaded-files"}},l={},c=[{value:"Request params",id:"request-params",level:2},{value:"Request query string",id:"request-query-string",level:2},{value:"Request body",id:"request-body",level:2},{value:"Json and Form Data Requests",id:"json-and-form-data-requests",level:2},{value:"Dot Notation Support",id:"dot-notation-support",level:3},{value:"Int Values",id:"int-values",level:2},{value:"Float Values",id:"float-values",level:2},{value:"Number Values",id:"number-values",level:2},{value:"Boolean Values",id:"boolean-values",level:2},{value:"Check if request has a value",id:"check-if-request-has-a-value",level:2},{value:"Set value to request payload",id:"set-value-to-request-payload",level:2},{value:"Unset values from request",id:"unset-values-from-request",level:2},{value:"Get entire request payload",id:"get-entire-request-payload",level:2},{value:"Get certain values from request",id:"get-certain-values-from-request",level:2},{value:"Get all values except certain values",id:"get-all-values-except-certain-values",level:2},{value:"Get heavy inputs",id:"get-heavy-inputs",level:2},{value:"Request files",id:"request-files",level:2},{value:"Validation",id:"validation",level:2},{value:"Get validated inputs only",id:"get-validated-inputs-only",level:2},{value:"Request headers",id:"request-headers",level:2},{value:"Request Authorization value",id:"request-authorization-value",level:2},{value:"Authorization Value",id:"authorization-value",level:3},{value:"Request path",id:"request-path",level:2},{value:"Request url",id:"request-url",level:2},{value:"Get full url",id:"get-full-url",level:3},{value:"Request Ip",id:"request-ip",level:2},{value:"User Agent",id:"user-agent",level:2},{value:"Request Referer",id:"request-referer",level:2},{value:"Request Method",id:"request-method",level:2},{value:"Request hostname",id:"request-hostname",level:2},{value:"Request Protocol",id:"request-protocol",level:2},{value:"Request Locale Code",id:"request-locale-code",level:2}];function u(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"request",children:"Request"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Warlock Request"})," is the incoming request object, it contains all the information about the request, and it is used to get the request body, query string, headers, and more."]}),"\n",(0,n.jsx)(s.h2,{id:"request-params",children:"Request params"}),"\n",(0,n.jsx)(s.p,{children:"Request params are the dynamic segments in the request path, for example in the following route:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/routes.ts"',children:'import { router } from "@warlock.js/core";\r\n\r\nrouter.get("/users/:id", getUser);\n'})}),"\n",(0,n.jsxs)(s.p,{children:["In this example, when the user requests ",(0,n.jsx)(s.code,{children:"/users/1"}),", the ",(0,n.jsx)(s.code,{children:"id"})," param will be ",(0,n.jsx)(s.code,{children:"1"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"Let's see how to access it:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-user.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport async function getUser(request: Request, response: Response) {\r\n  const user = await User.find(request.params.id);\r\n  response.success({\r\n    user,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"request-query-string",children:"Request query string"}),"\n",(0,n.jsxs)(s.p,{children:["Query string is the part of the URL after the ",(0,n.jsx)(s.code,{children:"?"})," character, for example in the following URL:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"https://example.com/users?name=John&age=20\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The query string is ",(0,n.jsx)(s.code,{children:"name=John&age=20"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"Let's see how to access it:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const users = await User.find({\r\n    name: request.query.name,\r\n    age: request.query.name,\r\n  });\r\n\r\n  response.success({\r\n    users,\r\n  });\r\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["If the query params has a ",(0,n.jsx)(s.code,{children:"[]"})," as a key suffix, then it will be treated as an array, for example:"]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"sitename.com/products?brands[]=1&brands[]=2&brands[]=3"})," will be parsed as:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"//...\r\nconst brands = request.query.brands; // [1, 2, 3]\n"})}),"\n",(0,n.jsx)(s.h2,{id:"request-body",children:"Request body"}),"\n",(0,n.jsxs)(s.p,{children:["Request body are the payload data that is being sent in ",(0,n.jsx)(s.code,{children:"POST"})," ",(0,n.jsx)(s.code,{children:"PUT"})," ",(0,n.jsx)(s.code,{children:"PATCH"})," requests, for example in the following request:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport async function createUser(request: Request, response: Response) {\r\n  const user = await User.create({\r\n    name: request.body.name,\r\n    age: request.body.age,\r\n  });\r\n\r\n  response.success({\r\n    user,\r\n  });\r\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["As mentioned in the request query, if the request body input has a ",(0,n.jsx)(s.code,{children:"[]"})," as a key suffix, then it will be treated as an array, for example:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport async function createUser(request: Request, response: Response) {\r\n  const user = await User.create({\r\n    name: request.body.name,\r\n    age: request.body.age,\r\n    brands: request.body.brands, // [1, 2, 3]\r\n  });\r\n\r\n  response.success({\r\n    user,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"json-and-form-data-requests",children:"Json and Form Data Requests"}),"\n",(0,n.jsxs)(s.p,{children:["By default, ",(0,n.jsx)(s.code,{children:"Warlock"})," parses both types out of the box, so you don't need to add additional work, it will parse the request body and make it available in ",(0,n.jsx)(s.code,{children:"request.body"})," property."]}),"\n",(0,n.jsx)(s.h1,{id:"request-input",children:"Request Input"}),"\n",(0,n.jsxs)(s.p,{children:["This is the recommended way to access any type of data from request wether it is from ",(0,n.jsx)(s.code,{children:"params"})," ",(0,n.jsx)(s.code,{children:"query"})," or ",(0,n.jsx)(s.code,{children:"body"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["To access any value from the request, use the ",(0,n.jsx)(s.code,{children:"input()"})," method:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport async function createUser(request: Request, response: Response) {\r\n  const user = await User.create({\r\n    name: request.input("name"),\r\n    age: request.input("age"),\r\n  });\r\n\r\n  response.success({\r\n    user,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"input()"})," method accepts a default value as a second argument if the input is missing."]})}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsxs)(s.p,{children:["Using ",(0,n.jsx)(s.code,{children:"input()"})," method is the recommended way to access request payload regardless of the request method."]})}),"\n",(0,n.jsx)(s.h3,{id:"dot-notation-support",children:"Dot Notation Support"}),"\n",(0,n.jsx)(s.p,{children:"When sending a json request, you can use the dot notation to access nested values, for example in the following request:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-json",children:'{\r\n  "user": {\r\n    "name": "John",\r\n    "age": 20\r\n  }\r\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["To get the ",(0,n.jsx)(s.code,{children:"name"})," value, use the following:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function createUser(request: Request, response: Response) {\r\n  const name = request.input("user.name");\r\n\r\n  response.success({\r\n    name,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"int-values",children:"Int Values"}),"\n",(0,n.jsx)(s.p,{children:"As you already know, any value from the request is a string, but sometimes we need to get an integer value, for example in the following request:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const users = await User.find({\r\n    age: request.int("age"),\r\n  });\r\n\r\n  response.success({\r\n    users,\r\n  });\r\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This will convert the ",(0,n.jsx)(s.code,{children:"age"})," value to an integer, if the input is missing or not an integer, it will return ",(0,n.jsx)(s.code,{children:"0"}),"."]}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:["You can of course pass the second argument to the ",(0,n.jsx)(s.code,{children:"int()"})," method to set a default value."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"float-values",children:"Float Values"}),"\n",(0,n.jsxs)(s.p,{children:["Similar to the ",(0,n.jsx)(s.code,{children:"int()"})," method, the ",(0,n.jsx)(s.code,{children:"float()"})," method converts the input value to a float number, if the input is missing or not a float number, it will return ",(0,n.jsx)(s.code,{children:"0"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"number-values",children:"Number Values"}),"\n",(0,n.jsxs)(s.p,{children:["This method is a combination of ",(0,n.jsx)(s.code,{children:"int()"})," and ",(0,n.jsx)(s.code,{children:"float()"})," methods, it converts the input value to a number, if the input is missing or not a number, it will return ",(0,n.jsx)(s.code,{children:"0"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"boolean-values",children:"Boolean Values"}),"\n",(0,n.jsxs)(s.p,{children:["When using ",(0,n.jsx)(s.code,{children:"request.bool()"})," method, If the request input is present, then all values will be marked as ",(0,n.jsx)(s.strong,{children:"true"})," except for ",(0,n.jsx)(s.code,{children:"false"})," value."]}),"\n",(0,n.jsx)(s.div,{}),"\n",(0,n.jsxs)(s.p,{children:["When using ",(0,n.jsx)(s.code,{children:"bool"})," method, if the input's value is ",(0,n.jsx)(s.code,{children:"false"})," as a string, it will be converted to ",(0,n.jsx)(s.code,{children:"false"})," as boolean value.\r\n:::"]}),"\n",(0,n.jsx)(s.h2,{id:"check-if-request-has-a-value",children:"Check if request has a value"}),"\n",(0,n.jsxs)(s.p,{children:["To check if the request has a value in any payload type, use the ",(0,n.jsx)(s.code,{children:"has()"})," method:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const hasAge = request.has("age");\r\n\r\n  response.success({\r\n    hasAge,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"set-value-to-request-payload",children:"Set value to request payload"}),"\n",(0,n.jsxs)(s.p,{children:["Sometimes we need to update the request payload with additional data, this usually happens in ",(0,n.jsx)(s.code,{children:"middleware"}),", to do so, use ",(0,n.jsx)(s.code,{children:"request.set"})," method"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/middleware/auth.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function auth(request: Request, response: Response) {\r\n  const authorizationHeader = request.header("Authorization");\r\n\r\n  if (!authorizationHeader) {\r\n    return response.unauthorized();\r\n  }\r\n\r\n  const user = await User.find(request.input("id"));\r\n\r\n  request.set("email", user.get("email"));\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"unset-values-from-request",children:"Unset values from request"}),"\n",(0,n.jsxs)(s.p,{children:["To unset multiple values from the request, use the ",(0,n.jsx)(s.code,{children:"unset()"})," method:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/middleware/auth.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function auth(request: Request, response: Response) {\r\n  const authorizationHeader = request.header("Authorization");\r\n\r\n  if (!authorizationHeader) {\r\n    return response.unauthorized();\r\n  }\r\n\r\n  request.unset(["id", "name"]);\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"get-entire-request-payload",children:"Get entire request payload"}),"\n",(0,n.jsxs)(s.p,{children:["To get the entire request payload, use the ",(0,n.jsx)(s.code,{children:"all()"})," method:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport async function createUser(request: Request, response: Response) {\r\n  const user = await User.create(request.all());\r\n\r\n  response.success({\r\n    user,\r\n  });\r\n}\n'})}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:["Please note that this method will return the entire request payload, including the ",(0,n.jsx)(s.code,{children:"params"})," ",(0,n.jsx)(s.code,{children:"query"})," and ",(0,n.jsx)(s.code,{children:"body"})," but not including request files."]}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["In some situations, you don't want to get the request params, you need only the request query and body, in this case use ",(0,n.jsx)(s.code,{children:"allExceptParams"})," method."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport async function createUser(request: Request, response: Response) {\r\n  const user = await User.create(request.allExceptParams());\r\n\r\n  response.success({\r\n    user,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"get-certain-values-from-request",children:"Get certain values from request"}),"\n",(0,n.jsxs)(s.p,{children:["To get certain values from the request payload, use ",(0,n.jsx)(s.code,{children:"only"})," method, it accepts an array of keys that you want to get from the request payload and returns an object."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport async function createUser(request: Request, response: Response) {\r\n  const user = await User.create(request.only(["name", "age"])); // { name: "John", age: 20 }\r\n\r\n  response.success({\r\n    user,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"get-all-values-except-certain-values",children:"Get all values except certain values"}),"\n",(0,n.jsxs)(s.p,{children:["To get all values from the request payload except certain values, use ",(0,n.jsx)(s.code,{children:"except"})," method, it accepts an array of keys that you want to exclude from the request payload and returns an object."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport async function createUser(request: Request, response: Response) {\r\n  const user = await User.create(\r\n    request.except(["id", "createdAt", "updatedAt"])\r\n  ); // { name: "John", age: 20 }\r\n\r\n  response.success({\r\n    user,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"get-heavy-inputs",children:"Get heavy inputs"}),"\n",(0,n.jsx)(s.p,{children:"Sometimes, a request payload may contain inputs but with empty strings, consider the following request url"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.code,{children:"example.com/users/1?name=&age=20"})}),"\n",(0,n.jsxs)(s.p,{children:["If we use ",(0,n.jsx)(s.code,{children:"request.all()"})," method, it will return the following object:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-json",children:'{\r\n  "id": 1,\r\n  "name": "",\r\n  "age": 20\r\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["To get the heavy inputs, use ",(0,n.jsx)(s.code,{children:"request.heavy()"})," method, it will return the following object:"]}),"\n",(0,n.jsx)(s.p,{children:"This will return the following data"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-json",children:'{\r\n  "id": 1,\r\n  "age": 20\r\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This will return all data from ",(0,n.jsx)(s.code,{children:"params"})," ",(0,n.jsx)(s.code,{children:"query"})," and ",(0,n.jsx)(s.code,{children:"body"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["To get all heavy data except the params data, use ",(0,n.jsx)(s.code,{children:"request.heavyExceptParams()"})," method, it will return the following object:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-json",children:'{\r\n  "age": 20\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"request-files",children:"Request files"}),"\n",(0,n.jsxs)(s.p,{children:["When send a ",(0,n.jsx)(s.code,{children:"multipart/form-data"})," request, you can access the files using the ",(0,n.jsx)(s.code,{children:"file"})," method:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/create-user.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport async function createUser(request: Request, response: Response) {\r\n  const image = request.file("image");\r\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"file"})," method may return a ",(0,n.jsx)(s.code,{children:"UploadedFile"})," instance, or ",(0,n.jsx)(s.code,{children:"null"})," if the file is missing."]}),"\n",(0,n.jsxs)(s.p,{children:["If the request contains multiple files with the same name, then the ",(0,n.jsx)(s.code,{children:"file"})," method will return an array of ",(0,n.jsx)(s.code,{children:"UploadedFile"})," instances."]}),"\n",(0,n.jsxs)(s.p,{children:["For more details about uploaded files, check it in the ",(0,n.jsx)(s.a,{href:"./uploaded-files",children:"Uploaded Files Section"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"validation",children:"Validation"}),"\n",(0,n.jsxs)(s.p,{children:["Sometimes you want to ",(0,n.jsx)(s.a,{href:"./../validation/introduction",children:"validate"})," some inputs on a middleware, or in ",(0,n.jsx)(s.code,{children:"validation.validate"})," method, in this case, you can use ",(0,n.jsx)(s.code,{children:"request.validate"})," method, which accepts an object of rules or a ",(0,n.jsx)(s.a,{href:"./../validation/validation-schema",children:"Validation Schema"}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport default async function login(request: Request, response: Response) {\r\n  //\r\n}\r\n\r\nlogin.validation = {\r\n  validate: async (request: Request, response: Response) => {\r\n    const user = await User.findBy("email", request.input("email"));\r\n\r\n    if (!user) {\r\n      return response.badRequest({\r\n        email: "Email is not found",\r\n      });\r\n    }\r\n\r\n    if (user.get("isAdmin")) {\r\n      const validator = await request.validate({\r\n        superPassword: ["required", "minLength:8"],\r\n      });\r\n\r\n      // if validation fails, then return the validation by passing the validator to the response\r\n      if (validator.fails()) {\r\n        return response.validationFailed(validator);\r\n      }\r\n    }\r\n  },\r\n};\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This case we have to first fetch the user from the database then perform validation, if the user is not found, then we return a bad request response, if the user is found, then we check if the user is an admin, if the user is an admin, then we validate the ",(0,n.jsx)(s.code,{children:"superPassword"})," input, if the validation fails, then we return a validation failed response."]}),"\n",(0,n.jsx)(s.h2,{id:"get-validated-inputs-only",children:"Get validated inputs only"}),"\n",(0,n.jsxs)(s.p,{children:["To get only the validated inputs that are listed in ",(0,n.jsx)(s.code,{children:"validation.rules"})," object, use ",(0,n.jsx)(s.code,{children:"request.validated()"})," method:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:'import { Request, Response } from "@warlock.js/core";\r\nimport { User } from "./../models/user";\r\n\r\nexport default async function login(request: Request, response: Response) {\r\n  const { email, password } = request.validated(); // will return only the email and password\r\n}\r\n\r\nlogin.validation = {\r\n  rules: {\r\n    email: ["required", "email"],\r\n    password: ["required"],\r\n  },\r\n};\n'})}),"\n",(0,n.jsxs)(s.p,{children:["If an input is listed in the ",(0,n.jsx)(s.code,{children:"rules"})," object but not required and missing, then it will not be returned, for example if we added ",(0,n.jsx)(s.code,{children:"gender: in:male,female"})," in this case, the gender input is optional, if not present in the request payload, it will be ignored."]}),"\n",(0,n.jsx)(s.h2,{id:"request-headers",children:"Request headers"}),"\n",(0,n.jsxs)(s.p,{children:["Request headers are the HTTP headers sent with the request, for example the ",(0,n.jsx)(s.code,{children:"Accept"})," header, ",(0,n.jsx)(s.code,{children:"Content-Type"})," header, and more."]}),"\n",(0,n.jsxs)(s.p,{children:["To get a single header, use the ",(0,n.jsx)(s.code,{children:"header()"})," method:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const acceptHeader = request.header("Accept");\r\n\r\n  response.success({\r\n    acceptHeader,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.p,{children:"It may accept a default value for second argument if the header is missing:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const acceptHeader = request.header("Accept", "application/json");\r\n\r\n  response.success({\r\n    acceptHeader,\r\n  });\r\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["To get all headers, use the ",(0,n.jsx)(s.code,{children:"headers"})," property:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const headers = request.headers;\r\n\r\n  response.success({\r\n    headers,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"request-authorization-value",children:"Request Authorization value"}),"\n",(0,n.jsxs)(s.p,{children:["If the ",(0,n.jsx)(s.code,{children:"Authorization"})," header is present in the request, you can get its value using the ",(0,n.jsx)(s.code,{children:"authorization"})," property:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const authorization = request.authorization;\r\n\r\n  response.success({\r\n    authorization,\r\n  });\r\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["It will return the value of the ",(0,n.jsx)(s.code,{children:"Authorization"})," header, if the header is not present, it will return ",(0,n.jsx)(s.code,{children:"null"}),"."]}),"\n",(0,n.jsx)(s.h3,{id:"authorization-value",children:"Authorization Value"}),"\n",(0,n.jsxs)(s.p,{children:["To get the authorization value use ",(0,n.jsx)(s.code,{children:"authorizationValue"})," property instead, for example if teh request Authorization header is:"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.code,{children:"Authorization: key apiKey"})}),"\n",(0,n.jsxs)(s.p,{children:["Then the ",(0,n.jsx)(s.code,{children:"authorizationValue"})," will be ",(0,n.jsx)(s.code,{children:"apiKey"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["If it contains a ",(0,n.jsx)(s.code,{children:"Bearer Token"})," then the token will be returned directly without the ",(0,n.jsx)(s.code,{children:"Bearer"})," prefix."]}),"\n",(0,n.jsx)(s.h2,{id:"request-path",children:"Request path"}),"\n",(0,n.jsxs)(s.p,{children:["Get current request path using the ",(0,n.jsx)(s.code,{children:"path"})," property:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const path = request.path;\r\n\r\n  response.success({\r\n    path,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"request-url",children:"Request url"}),"\n",(0,n.jsxs)(s.p,{children:["Get current request url using the ",(0,n.jsx)(s.code,{children:"url"})," property:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const url = request.url;\r\n\r\n  response.success({\r\n    url,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.h3,{id:"get-full-url",children:"Get full url"}),"\n",(0,n.jsxs)(s.p,{children:["To get the full url (not including the query string) use ",(0,n.jsx)(s.code,{children:"fullUrl"})," property instead:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'{7} title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const fullUrl = request.fullUrl;\r\n\r\n  response.success({\r\n    fullUrl, // https://example.com/users\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"request-ip",children:"Request Ip"}),"\n",(0,n.jsxs)(s.p,{children:["To get the request IP, use the ",(0,n.jsx)(s.code,{children:"ip"})," property:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const ip = request.ip;\r\n\r\n  response.success({\r\n    ip,\r\n  });\r\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This will work as it will return the current ip address, however, if the app is running under a proxy, it will return the proxy ip address, to get the real ip address, use the ",(0,n.jsx)(s.code,{children:"realIp"})," property:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const ip = request.realIp;\r\n\r\n  response.success({\r\n    ip,\r\n  });\r\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This works by trying to get the ip from the ",(0,n.jsx)(s.code,{children:"x-real-ip"}),", if the header is not found, then a ",(0,n.jsx)(s.code,{children:"x-forwarded-for"})," header is used, if the header is not found, then the default ip will be returned."]}),"\n",(0,n.jsx)(s.h2,{id:"user-agent",children:"User Agent"}),"\n",(0,n.jsxs)(s.p,{children:["To get the user agent, use the ",(0,n.jsx)(s.code,{children:"userAgent"})," property:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const userAgent = request.userAgent;\r\n\r\n  response.success({\r\n    userAgent,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"request-referer",children:"Request Referer"}),"\n",(0,n.jsxs)(s.p,{children:["To get the request referer, use the ",(0,n.jsx)(s.code,{children:"referer"})," property:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const referer = request.referer;\r\n\r\n  response.success({\r\n    referer,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"request-method",children:"Request Method"}),"\n",(0,n.jsxs)(s.p,{children:["To get the request method, use the ",(0,n.jsx)(s.code,{children:"method"})," property:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function getUsers(request: Request, response: Response) {\r\n  const method = request.method;\r\n\r\n  response.success({\r\n    method,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"request-hostname",children:"Request hostname"}),"\n",(0,n.jsxs)(s.p,{children:["Request ",(0,n.jsx)(s.code,{children:"hostname"})," property returns the hostname of the request, for example in the following request:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"https://example.com/users\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The hostname is ",(0,n.jsx)(s.code,{children:"example.com"}),"."]}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"request.domain"})," is an alias for ",(0,n.jsx)(s.code,{children:"request.hostname"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["If the application is running under a proxy, then use ",(0,n.jsx)(s.code,{children:"originalDomain"})," instead."]}),"\n",(0,n.jsx)(s.h2,{id:"request-protocol",children:"Request Protocol"}),"\n",(0,n.jsxs)(s.p,{children:["Request ",(0,n.jsx)(s.code,{children:"protocol"})," property returns the protocol of the request, for example in the following request:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"https://example.com/users\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"console.log(request.protocol); // https\n"})}),"\n",(0,n.jsx)(s.h2,{id:"request-locale-code",children:"Request Locale Code"}),"\n",(0,n.jsxs)(s.p,{children:["When dealing with a multilingual apps, its important to know the current locale code, to get the current locale code, use the ",(0,n.jsx)(s.code,{children:"locale"})," property:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:'title="src/app/users/controllers/get-users.ts"',children:'import { Request, Response } from "@warlock.js/core";\r\n\r\nexport async function getLocale(request: Request, response: Response) {\r\n  const locale = request.locale;\r\n\r\n  response.success({\r\n    locale,\r\n  });\r\n}\n'})}),"\n",(0,n.jsx)(s.p,{children:"The locale property will try to find one of the following headers in the incoming request to fetch the locale code from"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"translation-locale-code"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"locale-code"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"locale"})}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["If none of the headers is found, then it will return the default locale code from ",(0,n.jsx)(s.a,{href:"./../getting-started/configurations#localeCode",children:"Application default Locale Code Configuration"}),"."]})]})}function d(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>a,x:()=>i});var n=r(6540);const t={},o=n.createContext(t);function a(e){const s=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(o.Provider,{value:s},e.children)}}}]);