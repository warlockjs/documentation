"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3702],{8355:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var s=o(4848),t=o(8453);const i={sidebar_position:4},r="Joins (Lookups)",l={id:"cascade/relationships/joins",title:"Joins (Lookups)",description:"Joins mean data is fetched from two or more collections in one query, for example, fetching posts, each post has a user id, and we want to fetch the user data for each post.",source:"@site/docs/cascade/relationships/joins.mdx",sourceDirName:"cascade/relationships",slug:"/cascade/relationships/joins",permalink:"/docs/cascade/relationships/joins",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"mongodb",previous:{title:"Syncing Models",permalink:"/docs/cascade/relationships/syncing-models"},next:{title:"Advanced",permalink:"/docs/category/advanced-1"}},a={},c=[{value:"The joinings method",id:"the-joinings-method",level:2},{value:"Joinings",id:"joinings",level:2},{value:"1-1 Relationship",id:"1-1-relationship",level:2},{value:"1-many Relationship",id:"1-many-relationship",level:2},{value:"Using Joinings",id:"using-joinings",level:2},{value:"Joining Options",id:"joining-options",level:2},{value:"Auto Detecting Fields",id:"auto-detecting-fields",level:2},{value:"Counting Joined Documents",id:"counting-joined-documents",level:2},{value:"Using Aggregate pipeline",id:"using-aggregate-pipeline",level:2},{value:"Example",id:"example",level:3},{value:"Advanced Examples",id:"advanced-examples",level:2},{value:"Counting Likes and Comments for only current user",id:"counting-likes-and-comments-for-only-current-user",level:3},{value:"Get total likes and check if current user liked the post",id:"get-total-likes-and-check-if-current-user-liked-the-post",level:3}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"joins-lookups",children:"Joins (Lookups)"}),"\n",(0,s.jsx)(n.p,{children:"Joins mean data is fetched from two or more collections in one query, for example, fetching posts, each post has a user id, and we want to fetch the user data for each post."}),"\n",(0,s.jsx)(n.p,{children:"Or we may fetch multiple documents, for example, fetch comments when fetching posts."}),"\n",(0,s.jsxs)(n.p,{children:["This could be done in MongoDB using ",(0,s.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/",children:"Lookups"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"But in Cascade, we have a better way to do it."}),"\n",(0,s.jsx)(n.h2,{id:"the-joinings-method",children:"The joinings method"}),"\n",(0,s.jsxs)(n.p,{children:["Any model has its own ",(0,s.jsx)(n.a,{href:"/docs/cascade/aggregate/model-aggregate",children:"Aggregate model class"}),", the idea here is to make the code more readable and easier to maintain."]}),"\n",(0,s.jsx)(n.p,{children:"Let's take an example of the basic lookup pipeline and see how we can transform it into a more readable code."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Post } from "./models/post";\r\n\r\nconst posts = await Post.aggregate()\r\n  .lookup({\r\n    from: "comments",\r\n    localField: "id",\r\n    foreignField: "post.id",\r\n    as: "comments",\r\n  })\r\n  .get();\n'})}),"\n",(0,s.jsx)(n.p,{children:"This will fetch all posts and join the user data for each post, which gives an output like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\r\n  {\r\n    "id": "1",\r\n    "title": "Post 1",\r\n    "createdBy": {\r\n      "id": "2",\r\n      "name": "User 1",\r\n      "image": "path-to-image.jpg"\r\n    },\r\n    "comments": [\r\n      {\r\n        "id": "1",\r\n        "content": "Comment 1",\r\n        "createdBy": {\r\n          "id": "3",\r\n          "name": "User 2",\r\n          "image": "path-to-image.jpg"\r\n        }\r\n      },\r\n      {\r\n        "id": "2",\r\n        "content": "Comment 2",\r\n        "createdBy": {\r\n          "id": "4",\r\n          "name": "User 3",\r\n          "image": "path-to-image.jpg"\r\n        }\r\n      }\r\n    ]\r\n  }\r\n]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"joinings",children:"Joinings"}),"\n",(0,s.jsxs)(n.p,{children:["So the concept is simple, we define a list of static ",(0,s.jsx)(n.code,{children:"joinings"})," in the model, each joining has a name, and a ",(0,s.jsx)(n.code,{children:"Joinable"})," instance."]}),"\n",(0,s.jsxs)(n.p,{children:["We have two types of joinings, the first one is we want to make a ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/One-to-one_(data_model)",children:"1-1 relationship"})," between the two collections, and the second one is we want to make a ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/One-to-many_(data_model)",children:"1-many relationship"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Let's see each one"}),"\n",(0,s.jsx)(n.h2,{id:"1-1-relationship",children:"1-1 Relationship"}),"\n",(0,s.jsxs)(n.p,{children:["Let's say we have a ",(0,s.jsx)(n.code,{children:"Post"})," model, and we want to join the user data for each post, we can define a joining like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/models/post.ts"',children:'import { Model } from "@warlock.js/cascade";\r\nimport { User } from "./user";\r\n\r\nexport class Post extends Model {\r\n  static collectionName = "posts";\r\n\r\n  /**\r\n   * List of joinings\r\n   */\r\n  public static joinings = {\r\n    author: User.joinable("createdBy.id", "id").single().as("author"),\r\n  };\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"This will join the user data for each post, and the output will be like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\r\n  {\r\n    "id": "1",\r\n    "title": "Post 1",\r\n    "author": {\r\n      "id": "2",\r\n      "name": "User 1",\r\n      "image": "path-to-image.jpg"\r\n    }\r\n  }\r\n]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["As it performs a ",(0,s.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/",children:"Lookup Pipeline"}),", it will return an array of documents, so we need to use the ",(0,s.jsx)(n.code,{children:"single"})," method to tell The Joiner that we want to return only one document."]}),"\n",(0,s.jsx)(n.p,{children:"This will make a lookup object with the following properties:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "from": "users",\r\n  "localField": "createdBy.id",\r\n  "foreignField": "id",\r\n  "as": "author"\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"1-many-relationship",children:"1-many Relationship"}),"\n",(0,s.jsx)(n.p,{children:"Suppose we want to return list of comments for each post, we can define a joining like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/models/post.ts"',children:'import { Model } from "@warlock.js/cascade";\r\nimport { Comment } from "./comment";\r\n\r\nexport class Post extends Model {\r\n  static collectionName = "posts";\r\n\r\n  /**\r\n   * List of joinings\r\n   */\r\n  public static joinings = {\r\n    comments: Comment.joinable("id", "post.id"),\r\n  };\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"This will make a lookup object with the following properties:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "from": "comments",\r\n  "localField": "id",\r\n  "foreignField": "post.id",\r\n  "as": "comments"\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["We can alternatively, use ",(0,s.jsx)(n.code,{children:"localField"})," and ",(0,s.jsx)(n.code,{children:"foreignField"})," properties to define the fields"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/models/post.ts"',children:'import { Model } from "@warlock.js/cascade";\r\nimport { User } from "./user";\r\nimport { Comment } from "./comment";\r\n\r\nexport class Post extends Model {\r\n  static collectionName = "posts";\r\n\r\n  /**\r\n   * List of joinings\r\n   */\r\n  public static joinings = {\r\n    author: User.joinable()\r\n      .single(true)\r\n      .localField("createdBy.id")\r\n      .foreignField("id"),\r\n    comments: Comment.joinable().localField("id").foreignField("post.id"),\r\n  };\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now let's see how we can use it:"}),"\n",(0,s.jsx)(n.h2,{id:"using-joinings",children:"Using Joinings"}),"\n",(0,s.jsxs)(n.p,{children:["To use any of these joinings in a ",(0,s.jsx)(n.a,{href:"/docs/cascade/aggregate/model-aggregate",children:"Model Aggregate"})," query, we can use ",(0,s.jsx)(n.code,{children:"joining"})," method which accepts two argument, the first one is the joining name or the ",(0,s.jsx)(n.code,{children:"Joinable instance"}),", the second argument is the ",(0,s.jsx)(n.code,{children:"options"})," object."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Post } from "./models/post";\r\n\r\nconst posts = await Post.aggregate()\r\n  .joining("author")\r\n  .joining("comments")\r\n  .get();\n'})}),"\n",(0,s.jsxs)(n.p,{children:["We can refer to the reference of the joining directly from the static property ",(0,s.jsx)(n.code,{children:"joinings"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Post } from "./models/post";\r\n\r\nconst posts = await Post.aggregate()\r\n  .joining(Post.joinings.author)\r\n  .joining(Post.joinings.comments)\r\n  .get();\n'})}),"\n",(0,s.jsx)(n.p,{children:"The second solution gives you more flexibility and more typescript support."}),"\n",(0,s.jsx)(n.h2,{id:"joining-options",children:"Joining Options"}),"\n",(0,s.jsxs)(n.p,{children:["So now we saw how to perform a lookup using the ",(0,s.jsx)(n.code,{children:"joining"})," method, but what if we want to customize the lookup options?"]}),"\n",(0,s.jsx)(n.p,{children:"For example, let's say we want to get only the approved comments with the post not all comments."}),"\n",(0,s.jsxs)(n.p,{children:["We can pass the options object as the second argument to the ",(0,s.jsx)(n.code,{children:"joining"})," method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Post } from "./models/post";\r\n\r\nconst posts = await Post.aggregate()\r\n  .joining("author")\r\n  .joining("comments")\r\n  .get();\n'})}),"\n",(0,s.jsx)(n.p,{children:"We may also define what to be selected from the joined collection:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Post } from "./models/post";\r\n\r\nconst posts = await Post.aggregate()\r\n  .joining("author")\r\n  .joining("comments", {\r\n    where: {\r\n      isApproved: true,\r\n    },\r\n    select: ["id", "content"],\r\n  })\r\n  .get();\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"These can also be done when declaring the joinings list, but sometimes we want to make more filter based on the current situation."})}),"\n",(0,s.jsxs)(n.p,{children:["We can also use the ",(0,s.jsx)(n.code,{children:"where"})," and ",(0,s.jsx)(n.code,{children:"select"})," methods from the joining instance:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"{6}",children:'import { Post } from "./models/post";\r\n\r\nconst posts = await Post.aggregate()\r\n  .joining("author")\r\n  .joining(\r\n    Post.joinings.comments.where({ isApproved: true }).select(["id", "content"])\r\n  )\r\n  .joining()\r\n  .get();\n'})}),"\n",(0,s.jsx)(n.admonition,{title:"Did you know?",type:"info",children:(0,s.jsxs)(n.p,{children:["When using the ",(0,s.jsx)(n.code,{children:"where"})," method from the joining instance, you can use any of the ",(0,s.jsx)(n.a,{href:"/docs/cascade/aggregate/filtering",children:"where operators"})]})}),"\n",(0,s.jsx)(n.h2,{id:"auto-detecting-fields",children:"Auto Detecting Fields"}),"\n",(0,s.jsxs)(n.p,{children:["By default the ",(0,s.jsx)(n.code,{children:"Joinable"})," class will set the local field to ",(0,s.jsx)(n.code,{children:"id"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Regarding ",(0,s.jsx)(n.code,{children:"as"})," and ",(0,s.jsx)(n.code,{children:"foreignField"})," properties, it will depend on the ",(0,s.jsx)(n.code,{children:"single"})," type, if it set to ",(0,s.jsx)(n.code,{children:"true"}),", then it will be the singular of the joining model ",(0,s.jsx)(n.code,{children:"collection"})," value, otherwise it will be the plural of the joining model ",(0,s.jsx)(n.code,{children:"collection"})," value."]}),"\n",(0,s.jsxs)(n.p,{children:["And the foreign field will be the same as ",(0,s.jsx)(n.code,{children:"as"})," but suffixed with ",(0,s.jsx)(n.code,{children:"Id"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Let's see the both example, the first one if we provided all ",(0,s.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/",children:"Lookup"})," options:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/models/post.ts"',children:'import { Model } from "@warlock.js/cascade";\r\nimport { User } from "./user";\r\n\r\nexport class Post extends Model {\r\n  static collectionName = "posts";\r\n\r\n  /**\r\n   * List of joinings\r\n   */\r\n  public static joinings = {\r\n    author: User.joinable()\r\n      .single(true)\r\n      .localField("createdBy.id")\r\n      .foreignField("id")\r\n      .as("author"),\r\n  };\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now let's see the second example, if we didn't provide any options:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/models/post.ts"',children:'import { Model } from "@warlock.js/cascade";\r\nimport { User } from "./user";\r\n\r\nexport class Post extends Model {\r\n  static collectionName = "posts";\r\n\r\n  /**\r\n   * List of joinings\r\n   */\r\n  public static joinings = {\r\n    author: User.joinable().single(true),\r\n  };\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"This will be translated to:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Model } from "@warlock.js/cascade";\r\nimport { User } from "./user";\r\n\r\nexport class Post extends Model {\r\n  static collectionName = "posts";\r\n\r\n  /**\r\n   * List of joinings\r\n   */\r\n  public static joinings = {\r\n    author: User.joinable()\r\n      .single(true)\r\n      .localField("user.id")\r\n      .foreignField("id")\r\n      .as("user"),\r\n  };\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["It is pretty near to be accurate, but if the user that is stored in the ",(0,s.jsx)(n.code,{children:"Post"})," model is ",(0,s.jsx)(n.code,{children:"createdBy"}),", then we need to change the ",(0,s.jsx)(n.code,{children:"localField"})," to ",(0,s.jsx)(n.code,{children:"createdBy.id"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"You could also pass the four values as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/models/post.ts"',children:'import { Model } from "@warlock.js/cascade";\r\nimport { User } from "./user";\r\n\r\nexport class Post extends Model {\r\n  static collectionName = "posts";\r\n\r\n  /**\r\n   * List of joinings\r\n   */\r\n  public static joinings = {\r\n    author: User.joinable("createdBy.id", "id", true, "author"),\r\n  };\r\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["calling ",(0,s.jsx)(n.code,{children:"single"})," method with ",(0,s.jsx)(n.strong,{children:"true"})," value will only return one document, otherwise it will return list of documents from the joined collection, default value to ",(0,s.jsx)(n.code,{children:"single"})," is ",(0,s.jsx)(n.strong,{children:"false"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"counting-joined-documents",children:"Counting Joined Documents"}),"\n",(0,s.jsxs)(n.p,{children:["Sometimes we just need to count the documents from the joined collection, for example we need to count total number of comments for each post, in that situation we can use the ",(0,s.jsx)(n.code,{children:"countJoining"})," method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Post } from "./models/post";\r\n\r\nconst posts = await Post.aggregate().countJoining("comments").get();\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Please note that the first and second argument of the ",(0,s.jsx)(n.code,{children:"countJoining"})," method are the same as the ",(0,s.jsx)(n.code,{children:"joining"})," method."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This will return a new property called ",(0,s.jsx)(n.code,{children:"commentsCount"})," for each post, if you want to set a custom name for the property, you can pass the ",(0,s.jsx)(n.code,{children:"as"})," property in the options object:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Post } from "./models/post";\r\n\r\nconst posts = await Post.aggregate()\r\n  .countJoining("comments", {\r\n    as: "totalComments",\r\n  })\r\n  .get();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-aggregate-pipeline",children:"Using Aggregate pipeline"}),"\n",(0,s.jsxs)(n.p,{children:["So if we need to add more pipeline options to the joining (lookup) collection, we can use the second argument to the ",(0,s.jsx)(n.code,{children:"joining"})," method, it receives a callback function which receives the ",(0,s.jsx)(n.code,{children:"Joinable"})," instance for the joined collection, which we can use any ",(0,s.jsx)(n.a,{href:"./../aggregate/introduction",children:"Aggregate"})," method on it."]}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"This will be the default setup to join comments for the post:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Model } from "@warlock.js/cascade";\r\nimport { Post } from "./models/post";\r\nimport { Comment } from "./models/comment";\r\n\r\nexport class Post extends Model {\r\n  static collectionName = "posts";\r\n\r\n  /**\r\n   * List of joinings\r\n   */\r\n  public static joinings = {\r\n    comments: Comment.joinable("id", "post.id"),\r\n  };\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now we can get all comments for the post like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Post } from "./models/post";\r\n\r\nconst posts = await Post.aggregate().joining("comments").get();\n'})}),"\n",(0,s.jsx)(n.p,{children:"Or we can get only the approved comments:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Post } from "./models/post";\r\n\r\nconst posts = await Post.aggregate()\r\n  .joining("comments", (query) => query.where("isApproved", true))\r\n  .get();\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["The query used here will be on the joined collection, which will be applied on the ",(0,s.jsx)(n.code,{children:"comments"})," collection."]})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-examples",children:"Advanced Examples"}),"\n",(0,s.jsxs)(n.p,{children:["We have ",(0,s.jsx)(n.code,{children:"Post"})," model, represents ",(0,s.jsx)(n.strong,{children:"posts collection"}),", ",(0,s.jsx)(n.code,{children:"Comment"})," model represents ",(0,s.jsx)(n.strong,{children:"comments collection"})," and ",(0,s.jsx)(n.code,{children:"Like"})," model represents ",(0,s.jsx)(n.strong,{children:"likes collection"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Like"})," model has two properties, ",(0,s.jsx)(n.code,{children:"type"})," and ",(0,s.jsx)(n.code,{children:"typeId"}),", so we can store inside it post and/or comment likes."]}),"\n",(0,s.jsx)(n.p,{children:"Let's see how we can fetch the posts with the comments and likes count for each post:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"models/post.ts {11}",children:'import { Model } from "@warlock.js/cascade";\r\nimport { Like } from "./like";\r\nimport { Comment } from "./comment";\r\n\r\nexport class Post extends Model {\r\n  static collectionName = "posts";\r\n\r\n  /**\r\n   * List of joinings\r\n   */\r\n  public static joinings = {\r\n    likes: Like.joinable("id", "type.id").where("type", "post"),\r\n    comments: Comment.joinable("id", "post.id"),\r\n  };\r\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"models/like.ts",children:'import { Model, Casts } from "@warlock.js/cascade";\r\n\r\nexport class Like extends Model {\r\n  static collectionName = "likes";\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  protected casts: Casts = {\r\n    type: "string",\r\n    typeId: "int",\r\n  };\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now let's count the comments and likes for each post:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Post } from "./models/post";\r\n\r\nconst posts = await Post.aggregate()\r\n  .countJoining("likes")\r\n  .countJoining("comments")\r\n  .get();\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This will return something like this: (I'm using ",(0,s.jsx)(n.code,{children:"console.log"})," to make it more readable)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\r\n  {\r\n    "id": "1",\r\n    "title": "Post 1",\r\n    "likesCount": 2,\r\n    "commentsCount": 2\r\n  }\r\n]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"counting-likes-and-comments-for-only-current-user",children:"Counting Likes and Comments for only current user"}),"\n",(0,s.jsx)(n.p,{children:"Let's say we want to count the likes and comments for only the current user, we can do it like this:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["We'll assume any like or comment has a ",(0,s.jsx)(n.code,{children:"createdBy"})," object of a ",(0,s.jsx)(n.code,{children:"User"})," model."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Post } from "./models/post";\r\n\r\nconst posts = await Post.aggregate()\r\n  .countJoining("likes", query => query.where(\'createdBy.id\', 1))\r\n  .countJoining("comments", query => query.where("createdBy.id": 1))\r\n  .get();\n'})}),"\n",(0,s.jsx)(n.p,{children:"This will return something like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\r\n  {\r\n    "id": "1",\r\n    "title": "Post 1",\r\n    "likesCount": 1,\r\n    "commentsCount": 1\r\n  }\r\n]\n'})}),"\n",(0,s.jsx)(n.p,{children:"In that scenario we only returned the likes and comments for the current user."}),"\n",(0,s.jsx)(n.h3,{id:"get-total-likes-and-check-if-current-user-liked-the-post",children:"Get total likes and check if current user liked the post"}),"\n",(0,s.jsx)(n.p,{children:"Let's say we want to get the total likes for each post, and check if the current user liked the post or not."}),"\n",(0,s.jsx)(n.p,{children:"We can do it like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { $agg } from "@warlock.js/cascade";\r\nimport { Post } from "./models/post";\r\n\r\nconst posts = await Post.aggregate()\r\n  .countJoining("likes")\r\n  .joining("likes", join => join.where("createdBy.id", 1).single(true).as("userLike"))\r\n  .addField(\'liked\', $agg.booleanCond($agg.eq("$userLike", null))\r\n  .get();\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var s=o(6540);const t={},i=s.createContext(t);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);